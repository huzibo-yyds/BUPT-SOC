/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD2048X64 -words 2048 -bits 64 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      Synopsys model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD2048X64
 *      Words:          2048
 *      Word Width:     64
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:		max
 *
 *      Creation Date:  2002-06-03 12:14:08Z
 *      Version:        2005Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2002-06-03 12:14:08Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.620;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 4.000;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.0;
	k_temp_cell_rise		: 0.0;
	k_temp_hold_fall                : 0.0;
	k_temp_hold_rise                : 0.0;
	k_temp_min_pulse_width_high     : 0.0;
	k_temp_min_pulse_width_low      : 0.0;
	k_temp_min_period               : 0.0;
	k_temp_rise_propagation         : 0.0;
	k_temp_fall_propagation         : 0.0;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.0;
	k_temp_recovery_rise            : 0.0;
	k_temp_setup_fall               : 0.0;
	k_temp_setup_rise               : 0.0;
	k_volt_cell_fall                : 0.0;
	k_volt_cell_rise                : 0.0;
	k_volt_hold_fall                : 0.0;
	k_volt_hold_rise                : 0.0;
	k_volt_min_pulse_width_high     : 0.0;
	k_volt_min_pulse_width_low      : 0.0;
	k_volt_min_period               : 0.0;
	k_volt_rise_propagation         : 0.0;
	k_volt_fall_propagation         : 0.0;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.0;
	k_volt_recovery_rise            : 0.0;
	k_volt_setup_fall               : 0.0;
	k_volt_setup_rise               : 0.0;


	operating_conditions(slow) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.620;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : slow;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
	output_voltage(GENERAL) {
		vol	 : 0.4;
		voh	 : VDD - 0.4;
		vomin	 : -0.5;
		vomax	 : VDD + 0.5;
	}
	input_voltage(CMOS) {
		vil	 : 0.3 * VDD;
		vih	 : 0.7 * VDD;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
	input_voltage(TTL) {
		vil	 : 0.8;
		vih	 : 2;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
        lu_table_template(RA1SHD2048X64_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD2048X64_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD2048X64_load_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD2048X64_passive_energy_template_1x2) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RA1SHD2048X64_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 64;
		bit_from : 63;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD2048X64_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 11;
		bit_from : 10;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD2048X64_WRITE) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(RA1SHD2048X64) {
	area		 : 835512.042;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 11;
		word_width : 64;
	}
	bus(Q)	 {
		bus_type : RA1SHD2048X64_DATA;
		direction : output;
		max_capacitance : 0.823;
		capacitance : 0.023;
                three_state : "OEN" ;
                memory_read() {
			address : A;
		}
		timing() {
			related_pin :	"CLK" ;
			timing_type : rising_edge;
			timing_sense : non_unate;
			cell_rise(RA1SHD2048X64_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ( \
			  "2.322, 2.327, 2.343, 2.369, 2.448, 2.595, 2.743", \
			  "2.328, 2.334, 2.349, 2.376, 2.455, 2.602, 2.749", \
			  "2.353, 2.358, 2.374, 2.400, 2.479, 2.626, 2.773", \
			  "2.401, 2.406, 2.422, 2.448, 2.527, 2.675, 2.822", \
			  "2.514, 2.520, 2.535, 2.562, 2.641, 2.788, 2.935", \
			  "2.741, 2.746, 2.762, 2.788, 2.867, 3.014, 3.162", \
			  "2.968, 2.973, 2.989, 3.015, 3.094, 3.241, 3.388" \
			)
			}
			rise_transition(RA1SHD2048X64_load_template) {
			index_1 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ("0.105, 0.116, 0.148, 0.201, 0.361, 0.659, 0.958")
			}
			cell_fall(RA1SHD2048X64_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ( \
			  "2.312, 2.315, 2.327, 2.345, 2.402, 2.507, 2.612", \
			  "2.318, 2.322, 2.333, 2.352, 2.408, 2.513, 2.619", \
			  "2.342, 2.346, 2.357, 2.376, 2.432, 2.538, 2.643", \
			  "2.391, 2.395, 2.406, 2.425, 2.481, 2.586, 2.691", \
			  "2.504, 2.508, 2.519, 2.538, 2.594, 2.699, 2.805", \
			  "2.731, 2.734, 2.746, 2.764, 2.821, 2.926, 3.031", \
			  "2.957, 2.961, 2.972, 2.991, 3.047, 3.153, 3.258" \
			)
			}
			fall_transition(RA1SHD2048X64_load_template) {
			index_1 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ("0.083, 0.088, 0.106, 0.136, 0.225, 0.392, 0.558")
		}	}
		timing() {
			related_pin :	"OEN" ;
                        timing_type : three_state_disable ;
			timing_sense : non_unate;

			cell_rise(RA1SHD2048X64_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ( \
			  "1.048, 1.048, 1.048, 1.048, 1.048, 1.131, 1.278", \
			  "1.052, 1.052, 1.052, 1.052, 1.052, 1.136, 1.283", \
			  "1.067, 1.067, 1.067, 1.067, 1.067, 1.155, 1.302", \
			  "1.097, 1.097, 1.097, 1.097, 1.097, 1.194, 1.341", \
			  "1.166, 1.166, 1.166, 1.166, 1.166, 1.283, 1.431", \
			  "1.305, 1.305, 1.305, 1.305, 1.316, 1.463, 1.610", \
			  "1.445, 1.445, 1.445, 1.445, 1.495, 1.643, 1.790" \
			)
                       }
			rise_transition(RA1SHD2048X64_load_template) {
			index_1 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ("0.105, 0.116, 0.148, 0.201, 0.361, 0.659, 0.958")
			}
			cell_fall(RA1SHD2048X64_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ( \
			  "1.048, 1.048, 1.048, 1.048, 1.048, 1.048, 1.079", \
			  "1.052, 1.052, 1.052, 1.052, 1.052, 1.052, 1.084", \
			  "1.067, 1.067, 1.067, 1.067, 1.067, 1.067, 1.103", \
			  "1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.142", \
			  "1.166, 1.166, 1.166, 1.166, 1.166, 1.166, 1.232", \
			  "1.305, 1.305, 1.305, 1.305, 1.305, 1.306, 1.411", \
			  "1.445, 1.445, 1.445, 1.445, 1.445, 1.486, 1.591" \
			)
			}
			fall_transition(RA1SHD2048X64_load_template) {
			index_1 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ("0.083, 0.088, 0.106, 0.136, 0.225, 0.392, 0.558")
		}	}
		timing() {
			related_pin :	"OEN" ;
			timing_sense : non_unate;
                        timing_type : three_state_enable ;

			cell_rise(RA1SHD2048X64_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ( \
			  "1.048, 1.048, 1.048, 1.048, 1.048, 1.131, 1.278", \
			  "1.052, 1.052, 1.052, 1.052, 1.052, 1.136, 1.283", \
			  "1.067, 1.067, 1.067, 1.067, 1.067, 1.155, 1.302", \
			  "1.097, 1.097, 1.097, 1.097, 1.097, 1.194, 1.341", \
			  "1.166, 1.166, 1.166, 1.166, 1.166, 1.283, 1.431", \
			  "1.305, 1.305, 1.305, 1.305, 1.316, 1.463, 1.610", \
			  "1.445, 1.445, 1.445, 1.445, 1.495, 1.643, 1.790" \
			)
                       }
			rise_transition(RA1SHD2048X64_load_template) {
			index_1 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ("0.105, 0.116, 0.148, 0.201, 0.361, 0.659, 0.958")
			}
			cell_fall(RA1SHD2048X64_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ( \
			  "1.048, 1.048, 1.048, 1.048, 1.048, 1.048, 1.079", \
			  "1.052, 1.052, 1.052, 1.052, 1.052, 1.052, 1.084", \
			  "1.067, 1.067, 1.067, 1.067, 1.067, 1.067, 1.103", \
			  "1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.142", \
			  "1.166, 1.166, 1.166, 1.166, 1.166, 1.166, 1.232", \
			  "1.305, 1.305, 1.305, 1.305, 1.305, 1.306, 1.411", \
			  "1.445, 1.445, 1.445, 1.445, 1.445, 1.486, 1.591" \
			)
			}
			fall_transition(RA1SHD2048X64_load_template) {
			index_1 ("0.023, 0.033, 0.063, 0.113, 0.263, 0.543, 0.823");
			values ("0.083, 0.088, 0.106, 0.136, 0.225, 0.392, 0.558")
		}	}
        }

	pin(CLK) {
		direction : input;
		capacitance : 0.269
		clock	: true;
		min_pulse_width_low	: 0.312;
		min_pulse_width_high	: 0.209;
		min_period		: 2.338;
		max_transition		: 4.000;
		internal_power(){
			when : "(!CEN \
                                 & WEN[7] \
                                 & WEN[6] \
                                 & WEN[5] \
                                 & WEN[4] \
                                 & WEN[3] \
                                 & WEN[2] \
                                 & WEN[1] \
                                 & WEN[0] \
                        	)";
			rise_power(RA1SHD2048X64_passive_energy_template_1x2) {
            			index_1 ("0.0 1.0");
            			values ("261.390, 261.390")
        		}
			fall_power(RA1SHD2048X64_passive_energy_template_1x2) {
            			index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
        		}
		}
		internal_power(){
            		when : "(!CEN & !( \
                            	WEN[7] & \
                            	WEN[6] & \
                            	WEN[5] & \
                            	WEN[4] & \
                            	WEN[3] & \
                            	WEN[2] & \
                            	WEN[1] & \
                            	WEN[0]))";
        		rise_power(RA1SHD2048X64_passive_energy_template_1x2) {
            			index_1 ("0.0 1.0");
            			values ("354.453, 354.453")
        		}
        		fall_power(RA1SHD2048X64_passive_energy_template_1x2) {
            			index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
        		}
		}
         internal_power(){
                 when : "CEN";
                 power(RA1SHD2048X64_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("0.100, 0.100")
                 }
         }
	}

	pin(CEN) {
		direction : input;
		capacitance : 0.015;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.661, 0.663, 0.671, 0.687, 0.725, 0.801, 0.889", \
			  "0.654, 0.657, 0.665, 0.681, 0.719, 0.794, 0.882", \
			  "0.630, 0.632, 0.640, 0.657, 0.694, 0.770, 0.858", \
			  "0.582, 0.584, 0.592, 0.608, 0.646, 0.721, 0.810", \
			  "0.468, 0.470, 0.479, 0.495, 0.532, 0.608, 0.696", \
			  "0.242, 0.244, 0.252, 0.268, 0.306, 0.381, 0.470", \
			  "0.015, 0.017, 0.025, 0.042, 0.079, 0.155, 0.243" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.661, 0.663, 0.671, 0.687, 0.725, 0.801, 0.889", \
			  "0.654, 0.657, 0.665, 0.681, 0.719, 0.794, 0.882", \
			  "0.630, 0.632, 0.640, 0.657, 0.694, 0.770, 0.858", \
			  "0.582, 0.584, 0.592, 0.608, 0.646, 0.721, 0.810", \
			  "0.468, 0.470, 0.479, 0.495, 0.532, 0.608, 0.696", \
			  "0.242, 0.244, 0.252, 0.268, 0.306, 0.381, 0.470", \
			  "0.015, 0.017, 0.025, 0.042, 0.079, 0.155, 0.243" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.004, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.117, 0.115, 0.107, 0.090, 0.053, 0.000, 0.000", \
			  "0.343, 0.341, 0.333, 0.317, 0.279, 0.204, 0.128", \
			  "0.570, 0.568, 0.560, 0.544, 0.506, 0.430, 0.355" \
			)
				
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.004, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.117, 0.115, 0.107, 0.090, 0.053, 0.000, 0.000", \
			  "0.343, 0.341, 0.333, 0.317, 0.279, 0.204, 0.128", \
			  "0.570, 0.568, 0.560, 0.544, 0.506, 0.430, 0.355" \
			)
	}	}	}


	pin(OEN)	{
		direction	 : input;
		capacitance : 0.010;
	}
	bus(WEN)	 {
		bus_type : RA1SHD2048X64_WRITE;
		direction : input;
		capacitance : 0.121;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.424, 0.427, 0.439, 0.463, 0.520, 0.670, 0.820", \
			  "0.418, 0.421, 0.433, 0.457, 0.514, 0.664, 0.813", \
			  "0.393, 0.396, 0.408, 0.432, 0.490, 0.639, 0.789", \
			  "0.345, 0.348, 0.360, 0.384, 0.441, 0.591, 0.741", \
			  "0.231, 0.235, 0.247, 0.271, 0.328, 0.478, 0.627", \
			  "0.114, 0.118, 0.130, 0.154, 0.210, 0.322, 0.437", \
			  "0.114, 0.118, 0.130, 0.154, 0.210, 0.322, 0.437" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.424, 0.427, 0.439, 0.463, 0.520, 0.670, 0.820", \
			  "0.418, 0.421, 0.433, 0.457, 0.514, 0.664, 0.813", \
			  "0.393, 0.396, 0.408, 0.432, 0.490, 0.639, 0.789", \
			  "0.345, 0.348, 0.360, 0.384, 0.441, 0.591, 0.741", \
			  "0.231, 0.235, 0.247, 0.271, 0.328, 0.478, 0.627", \
			  "0.114, 0.118, 0.130, 0.154, 0.210, 0.322, 0.437", \
			  "0.114, 0.118, 0.130, 0.154, 0.210, 0.322, 0.437" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.112, 0.108, 0.092, 0.060, 0.000, 0.000, 0.000", \
			  "0.339, 0.334, 0.318, 0.286, 0.224, 0.111, 0.000" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.112, 0.108, 0.092, 0.060, 0.000, 0.000, 0.000", \
			  "0.339, 0.334, 0.318, 0.286, 0.224, 0.111, 0.000" \
			)
	}	}	}

	bus(A)  {
		bus_type : RA1SHD2048X64_ADDRESS;
		direction : input;
		capacitance : 0.054;
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.705, 0.707, 0.714, 0.727, 0.759, 0.822, 0.885", \
			  "0.699, 0.701, 0.707, 0.721, 0.753, 0.816, 0.879", \
			  "0.675, 0.676, 0.683, 0.697, 0.728, 0.791, 0.855", \
			  "0.626, 0.628, 0.635, 0.648, 0.680, 0.743, 0.806", \
			  "0.513, 0.515, 0.521, 0.535, 0.566, 0.630, 0.693", \
			  "0.286, 0.288, 0.295, 0.308, 0.340, 0.403, 0.466", \
			  "0.060, 0.061, 0.068, 0.082, 0.113, 0.176, 0.240" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.705, 0.707, 0.714, 0.727, 0.759, 0.822, 0.885", \
			  "0.699, 0.701, 0.707, 0.721, 0.753, 0.816, 0.879", \
			  "0.675, 0.676, 0.683, 0.697, 0.728, 0.791, 0.855", \
			  "0.626, 0.628, 0.635, 0.648, 0.680, 0.743, 0.806", \
			  "0.513, 0.515, 0.521, 0.535, 0.566, 0.630, 0.693", \
			  "0.286, 0.288, 0.295, 0.308, 0.340, 0.403, 0.466", \
			  "0.060, 0.061, 0.068, 0.082, 0.113, 0.176, 0.240" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.052, 0.050, 0.044, 0.030, 0.000, 0.000, 0.000", \
			  "0.059, 0.057, 0.050, 0.037, 0.005, 0.000, 0.000", \
			  "0.083, 0.081, 0.074, 0.061, 0.029, 0.000, 0.000", \
			  "0.131, 0.130, 0.123, 0.109, 0.078, 0.015, 0.000", \
			  "0.245, 0.243, 0.236, 0.223, 0.191, 0.128, 0.065", \
			  "0.471, 0.470, 0.463, 0.449, 0.418, 0.355, 0.291", \
			  "0.698, 0.696, 0.689, 0.676, 0.644, 0.581, 0.518" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.012, 0.009, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.019, 0.016, 0.005, 0.000, 0.000, 0.000, 0.000", \
			  "0.043, 0.040, 0.029, 0.008, 0.000, 0.000, 0.000", \
			  "0.091, 0.089, 0.078, 0.056, 0.006, 0.000, 0.000", \
			  "0.205, 0.202, 0.191, 0.169, 0.119, 0.018, 0.000", \
			  "0.431, 0.428, 0.418, 0.396, 0.346, 0.245, 0.144", \
			  "0.658, 0.655, 0.644, 0.623, 0.572, 0.471, 0.371" \
			)
	}	}	

         internal_power(){
                 when : "CEN";
                 power(RA1SHD2048X64_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("3.055, 3.055")
                 }
         }

}
	bus(D)	 {
		bus_type : RA1SHD2048X64_DATA;
		direction : input;
		capacitance : 0.003;
		memory_write() {
			address : A;
			clocked_on : "CLK";
		}
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.426, 0.429, 0.439, 0.458, 0.504, 0.596, 0.728", \
			  "0.420, 0.423, 0.432, 0.452, 0.498, 0.590, 0.722", \
			  "0.396, 0.398, 0.408, 0.428, 0.474, 0.565, 0.698", \
			  "0.347, 0.350, 0.360, 0.379, 0.425, 0.517, 0.649", \
			  "0.234, 0.236, 0.246, 0.266, 0.312, 0.404, 0.536", \
			  "0.007, 0.010, 0.020, 0.039, 0.085, 0.177, 0.309", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.083" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.426, 0.429, 0.439, 0.458, 0.504, 0.596, 0.728", \
			  "0.420, 0.423, 0.432, 0.452, 0.498, 0.590, 0.722", \
			  "0.396, 0.398, 0.408, 0.428, 0.474, 0.565, 0.698", \
			  "0.347, 0.350, 0.360, 0.379, 0.425, 0.517, 0.649", \
			  "0.234, 0.236, 0.246, 0.266, 0.312, 0.404, 0.536", \
			  "0.007, 0.010, 0.020, 0.039, 0.085, 0.177, 0.309", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.083" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.025, 0.020, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.074, 0.069, 0.049, 0.009, 0.000, 0.000, 0.000", \
			  "0.187, 0.182, 0.162, 0.122, 0.030, 0.000, 0.000", \
			  "0.414, 0.408, 0.389, 0.349, 0.256, 0.071, 0.000", \
			  "0.640, 0.635, 0.615, 0.575, 0.483, 0.298, 0.166" \
			)
			}
			fall_constraint(RA1SHD2048X64_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.200, 2.600, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.025, 0.020, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.074, 0.069, 0.049, 0.009, 0.000, 0.000, 0.000", \
			  "0.187, 0.182, 0.162, 0.122, 0.030, 0.000, 0.000", \
			  "0.414, 0.408, 0.389, 0.349, 0.256, 0.071, 0.000", \
			  "0.640, 0.635, 0.615, 0.575, 0.483, 0.298, 0.166" \
			)
		}	}
	}

	cell_leakage_power : 8.39E-2;
  }
}
