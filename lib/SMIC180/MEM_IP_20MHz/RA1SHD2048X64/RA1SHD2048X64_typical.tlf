/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD2048X64 -words 2048 -bits 64 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD2048X64
 *      Words:          2048
 *      Word Width:     64
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        typical
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 12:15:41Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 12:15:54Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("typical")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(25.000)
  voltage(1.800)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.800) error(2.800))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD2048X64

Area (835512.042)
CT_TOLERANCE(0.180)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.390:0.390:0.390 0.391:0.391:0.391 0.392:0.392:0.392 0.395:0.395:0.395 0.400:0.400:0.400 0.410:0.410:0.410 0.490:0.490:0.490)
	    (0.386:0.386:0.386 0.387:0.387:0.387 0.387:0.387:0.387 0.390:0.390:0.390 0.396:0.396:0.396 0.406:0.406:0.406 0.486:0.486:0.486)
	    (0.381:0.381:0.381 0.382:0.382:0.382 0.382:0.382:0.382 0.385:0.385:0.385 0.391:0.391:0.391 0.401:0.401:0.401 0.481:0.481:0.481)
	    (0.360:0.360:0.360 0.361:0.361:0.361 0.361:0.361:0.361 0.364:0.364:0.364 0.370:0.370:0.370 0.380:0.380:0.380 0.460:0.460:0.460)
	    (0.318:0.318:0.318 0.319:0.319:0.319 0.320:0.320:0.320 0.323:0.323:0.323 0.328:0.328:0.328 0.338:0.338:0.338 0.418:0.418:0.418)
	    (0.246:0.246:0.246 0.246:0.246:0.246 0.247:0.247:0.247 0.250:0.250:0.250 0.255:0.255:0.255 0.265:0.265:0.265 0.345:0.345:0.345)
	    (0.100:0.100:0.100 0.100:0.100:0.100 0.101:0.101:0.101 0.104:0.104:0.104 0.109:0.109:0.109 0.120:0.120:0.120 0.199:0.199:0.199)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.390:0.390:0.390 0.391:0.391:0.391 0.392:0.392:0.392 0.395:0.395:0.395 0.400:0.400:0.400 0.410:0.410:0.410 0.490:0.490:0.490)
	    (0.386:0.386:0.386 0.387:0.387:0.387 0.387:0.387:0.387 0.390:0.390:0.390 0.396:0.396:0.396 0.406:0.406:0.406 0.486:0.486:0.486)
	    (0.381:0.381:0.381 0.382:0.382:0.382 0.382:0.382:0.382 0.385:0.385:0.385 0.391:0.391:0.391 0.401:0.401:0.401 0.481:0.481:0.481)
	    (0.360:0.360:0.360 0.361:0.361:0.361 0.361:0.361:0.361 0.364:0.364:0.364 0.370:0.370:0.370 0.380:0.380:0.380 0.460:0.460:0.460)
	    (0.318:0.318:0.318 0.319:0.319:0.319 0.320:0.320:0.320 0.323:0.323:0.323 0.328:0.328:0.328 0.338:0.338:0.338 0.418:0.418:0.418)
	    (0.246:0.246:0.246 0.246:0.246:0.246 0.247:0.247:0.247 0.250:0.250:0.250 0.255:0.255:0.255 0.265:0.265:0.265 0.345:0.345:0.345)
	    (0.100:0.100:0.100 0.100:0.100:0.100 0.101:0.101:0.101 0.104:0.104:0.104 0.109:0.109:0.109 0.120:0.120:0.120 0.199:0.199:0.199)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.041:0.041:0.041 0.041:0.041:0.041 0.040:0.040:0.040 0.037:0.037:0.037 0.032:0.032:0.032 0.022:0.022:0.022 0.001:0.001:0.001)
	    (0.046:0.046:0.046 0.045:0.045:0.045 0.044:0.044:0.044 0.041:0.041:0.041 0.036:0.036:0.036 0.026:0.026:0.026 0.006:0.006:0.006)
	    (0.051:0.051:0.051 0.050:0.050:0.050 0.050:0.050:0.050 0.047:0.047:0.047 0.041:0.041:0.041 0.031:0.031:0.031 0.011:0.011:0.011)
	    (0.072:0.072:0.072 0.071:0.071:0.071 0.070:0.070:0.070 0.068:0.068:0.068 0.062:0.062:0.062 0.052:0.052:0.052 0.032:0.032:0.032)
	    (0.113:0.113:0.113 0.113:0.113:0.113 0.112:0.112:0.112 0.109:0.109:0.109 0.103:0.103:0.103 0.093:0.093:0.093 0.073:0.073:0.073)
	    (0.186:0.186:0.186 0.186:0.186:0.186 0.185:0.185:0.185 0.182:0.182:0.182 0.176:0.176:0.176 0.166:0.166:0.166 0.146:0.146:0.146)
	    (0.332:0.332:0.332 0.332:0.332:0.332 0.331:0.331:0.331 0.328:0.328:0.328 0.322:0.322:0.322 0.312:0.312:0.312 0.292:0.292:0.292)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.019:0.019:0.019 0.016:0.016:0.016 0.011:0.011:0.011 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.020:0.020:0.020 0.016:0.016:0.016 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.029:0.029:0.029 0.025:0.025:0.025 0.021:0.021:0.021 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.050:0.050:0.050 0.046:0.046:0.046 0.042:0.042:0.042 0.024:0.024:0.024 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.091:0.091:0.091 0.088:0.088:0.088 0.083:0.083:0.083 0.066:0.066:0.066 0.031:0.031:0.031 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.164:0.164:0.164 0.161:0.161:0.161 0.156:0.156:0.156 0.139:0.139:0.139 0.104:0.104:0.104 0.043:0.043:0.043 0.000:0.000:0.000)
	    (0.310:0.310:0.310 0.307:0.307:0.307 0.302:0.302:0.302 0.285:0.285:0.285 0.250:0.250:0.250 0.188:0.188:0.188 0.066:0.066:0.066)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.410:0.410:0.410 0.410:0.410:0.410 0.411:0.411:0.411 0.416:0.416:0.416 0.424:0.424:0.424 0.442:0.442:0.442 0.596:0.596:0.596)
	    (0.405:0.405:0.405 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.420:0.420:0.420 0.438:0.438:0.438 0.591:0.591:0.591)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.414:0.414:0.414 0.432:0.432:0.432 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.394:0.394:0.394 0.412:0.412:0.412 0.565:0.565:0.565)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.297:0.297:0.297 0.451:0.451:0.451)
	    (0.119:0.119:0.119 0.120:0.120:0.120 0.121:0.121:0.121 0.125:0.125:0.125 0.133:0.133:0.133 0.151:0.151:0.151 0.305:0.305:0.305)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.410:0.410:0.410 0.410:0.410:0.410 0.411:0.411:0.411 0.416:0.416:0.416 0.424:0.424:0.424 0.442:0.442:0.442 0.596:0.596:0.596)
	    (0.405:0.405:0.405 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.420:0.420:0.420 0.438:0.438:0.438 0.591:0.591:0.591)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.414:0.414:0.414 0.432:0.432:0.432 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.394:0.394:0.394 0.412:0.412:0.412 0.565:0.565:0.565)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.297:0.297:0.297 0.451:0.451:0.451)
	    (0.119:0.119:0.119 0.120:0.120:0.120 0.121:0.121:0.121 0.125:0.125:0.125 0.133:0.133:0.133 0.151:0.151:0.151 0.305:0.305:0.305)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.082:0.082:0.082 0.067:0.067:0.067 0.039:0.039:0.039)
	    (0.242:0.242:0.242 0.241:0.241:0.241 0.240:0.240:0.240 0.236:0.236:0.236 0.228:0.228:0.228 0.213:0.213:0.213 0.185:0.185:0.185)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.082:0.082:0.082 0.067:0.067:0.067 0.039:0.039:0.039)
	    (0.242:0.242:0.242 0.241:0.241:0.241 0.240:0.240:0.240 0.236:0.236:0.236 0.228:0.228:0.228 0.213:0.213:0.213 0.185:0.185:0.185)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.244:0.244:0.244 0.245:0.245:0.245 0.247:0.247:0.247 0.253:0.253:0.253 0.265:0.265:0.265 0.312:0.312:0.312 0.513:0.513:0.513)
	    (0.240:0.240:0.240 0.241:0.241:0.241 0.243:0.243:0.243 0.249:0.249:0.249 0.261:0.261:0.261 0.308:0.308:0.308 0.509:0.509:0.509)
	    (0.235:0.235:0.235 0.236:0.236:0.236 0.238:0.238:0.238 0.244:0.244:0.244 0.255:0.255:0.255 0.303:0.303:0.303 0.504:0.504:0.504)
	    (0.214:0.214:0.214 0.215:0.215:0.215 0.217:0.217:0.217 0.223:0.223:0.223 0.235:0.235:0.235 0.282:0.282:0.282 0.483:0.483:0.483)
	    (0.172:0.172:0.172 0.174:0.174:0.174 0.175:0.175:0.175 0.181:0.181:0.181 0.193:0.193:0.193 0.240:0.240:0.240 0.441:0.441:0.441)
	    (0.099:0.099:0.099 0.101:0.101:0.101 0.102:0.102:0.102 0.108:0.108:0.108 0.120:0.120:0.120 0.168:0.168:0.168 0.368:0.368:0.368)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.022:0.022:0.022 0.222:0.222:0.222)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.244:0.244:0.244 0.245:0.245:0.245 0.247:0.247:0.247 0.253:0.253:0.253 0.265:0.265:0.265 0.312:0.312:0.312 0.513:0.513:0.513)
	    (0.240:0.240:0.240 0.241:0.241:0.241 0.243:0.243:0.243 0.249:0.249:0.249 0.261:0.261:0.261 0.308:0.308:0.308 0.509:0.509:0.509)
	    (0.235:0.235:0.235 0.236:0.236:0.236 0.238:0.238:0.238 0.244:0.244:0.244 0.255:0.255:0.255 0.303:0.303:0.303 0.504:0.504:0.504)
	    (0.214:0.214:0.214 0.215:0.215:0.215 0.217:0.217:0.217 0.223:0.223:0.223 0.235:0.235:0.235 0.282:0.282:0.282 0.483:0.483:0.483)
	    (0.172:0.172:0.172 0.174:0.174:0.174 0.175:0.175:0.175 0.181:0.181:0.181 0.193:0.193:0.193 0.240:0.240:0.240 0.441:0.441:0.441)
	    (0.099:0.099:0.099 0.101:0.101:0.101 0.102:0.102:0.102 0.108:0.108:0.108 0.120:0.120:0.120 0.168:0.168:0.168 0.368:0.368:0.368)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.022:0.022:0.022 0.222:0.222:0.222)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.012:0.012:0.012 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.016:0.016:0.016 0.010:0.010:0.010 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.021:0.021:0.021 0.015:0.015:0.015 0.008:0.008:0.008 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.042:0.042:0.042 0.036:0.036:0.036 0.029:0.029:0.029 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.084:0.084:0.084 0.078:0.078:0.078 0.071:0.071:0.071 0.042:0.042:0.042 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.157:0.157:0.157 0.151:0.151:0.151 0.144:0.144:0.144 0.115:0.115:0.115 0.058:0.058:0.058 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.302:0.302:0.302 0.297:0.297:0.297 0.290:0.290:0.290 0.261:0.261:0.261 0.204:0.204:0.204 0.136:0.136:0.136 0.094:0.094:0.094)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.012:0.012:0.012 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.016:0.016:0.016 0.010:0.010:0.010 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.021:0.021:0.021 0.015:0.015:0.015 0.008:0.008:0.008 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.042:0.042:0.042 0.036:0.036:0.036 0.029:0.029:0.029 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.084:0.084:0.084 0.078:0.078:0.078 0.071:0.071:0.071 0.042:0.042:0.042 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.157:0.157:0.157 0.151:0.151:0.151 0.144:0.144:0.144 0.115:0.115:0.115 0.058:0.058:0.058 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.302:0.302:0.302 0.297:0.297:0.297 0.290:0.290:0.290 0.261:0.261:0.261 0.204:0.204:0.204 0.136:0.136:0.136 0.094:0.094:0.094)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.241:0.241:0.241 0.243:0.243:0.243 0.246:0.246:0.246 0.255:0.255:0.255 0.301:0.301:0.301 0.386:0.386:0.386 0.555:0.555:0.555)
	    (0.237:0.237:0.237 0.239:0.239:0.239 0.241:0.241:0.241 0.251:0.251:0.251 0.297:0.297:0.297 0.381:0.381:0.381 0.551:0.551:0.551)
	    (0.232:0.232:0.232 0.234:0.234:0.234 0.236:0.236:0.236 0.245:0.245:0.245 0.292:0.292:0.292 0.376:0.376:0.376 0.545:0.545:0.545)
	    (0.211:0.211:0.211 0.213:0.213:0.213 0.215:0.215:0.215 0.224:0.224:0.224 0.271:0.271:0.271 0.355:0.355:0.355 0.524:0.524:0.524)
	    (0.170:0.170:0.170 0.171:0.171:0.171 0.174:0.174:0.174 0.183:0.183:0.183 0.229:0.229:0.229 0.314:0.314:0.314 0.483:0.483:0.483)
	    (0.097:0.097:0.097 0.098:0.098:0.098 0.101:0.101:0.101 0.110:0.110:0.110 0.156:0.156:0.156 0.241:0.241:0.241 0.410:0.410:0.410)
	    (0.082:0.082:0.082 0.084:0.084:0.084 0.086:0.086:0.086 0.095:0.095:0.095 0.113:0.113:0.113 0.189:0.189:0.189 0.358:0.358:0.358)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.241:0.241:0.241 0.243:0.243:0.243 0.246:0.246:0.246 0.255:0.255:0.255 0.301:0.301:0.301 0.386:0.386:0.386 0.555:0.555:0.555)
	    (0.237:0.237:0.237 0.239:0.239:0.239 0.241:0.241:0.241 0.251:0.251:0.251 0.297:0.297:0.297 0.381:0.381:0.381 0.551:0.551:0.551)
	    (0.232:0.232:0.232 0.234:0.234:0.234 0.236:0.236:0.236 0.245:0.245:0.245 0.292:0.292:0.292 0.376:0.376:0.376 0.545:0.545:0.545)
	    (0.211:0.211:0.211 0.213:0.213:0.213 0.215:0.215:0.215 0.224:0.224:0.224 0.271:0.271:0.271 0.355:0.355:0.355 0.524:0.524:0.524)
	    (0.170:0.170:0.170 0.171:0.171:0.171 0.174:0.174:0.174 0.183:0.183:0.183 0.229:0.229:0.229 0.314:0.314:0.314 0.483:0.483:0.483)
	    (0.097:0.097:0.097 0.098:0.098:0.098 0.101:0.101:0.101 0.110:0.110:0.110 0.156:0.156:0.156 0.241:0.241:0.241 0.410:0.410:0.410)
	    (0.082:0.082:0.082 0.084:0.084:0.084 0.086:0.086:0.086 0.095:0.095:0.095 0.113:0.113:0.113 0.189:0.189:0.189 0.358:0.358:0.358)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.133:0.133:0.133 0.128:0.128:0.128 0.122:0.122:0.122 0.098:0.098:0.098 0.076:0.076:0.076 0.044:0.044:0.044 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.133:0.133:0.133 0.128:0.128:0.128 0.122:0.122:0.122 0.098:0.098:0.098 0.076:0.076:0.076 0.044:0.044:0.044 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (1.36067485105377)))
TIMING_model (tpw_tckl (const (0.180072692307695)))
TIMING_model (tpw_tckh (const (0.1185)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.048 0.055 0.076 0.112 0.218 0.417 0.615))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.046 0.050 0.062 0.081 0.138 0.245 0.353))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.383:1.383:1.383 1.386:1.386:1.386 1.397:1.397:1.397 1.414:1.414:1.414 1.468:1.468:1.468 1.567:1.567:1.567 1.666:1.666:1.666)
	    (1.387:1.387:1.387 1.390:1.390:1.390 1.401:1.401:1.401 1.419:1.419:1.419 1.472:1.472:1.472 1.571:1.571:1.571 1.670:1.670:1.670)
	    (1.392:1.392:1.392 1.395:1.395:1.395 1.406:1.406:1.406 1.424:1.424:1.424 1.477:1.477:1.477 1.576:1.576:1.576 1.675:1.675:1.675)
	    (1.413:1.413:1.413 1.416:1.416:1.416 1.427:1.427:1.427 1.445:1.445:1.445 1.498:1.498:1.498 1.597:1.597:1.597 1.696:1.696:1.696)
	    (1.454:1.454:1.454 1.458:1.458:1.458 1.469:1.469:1.469 1.486:1.486:1.486 1.539:1.539:1.539 1.639:1.639:1.639 1.738:1.738:1.738)
	    (1.527:1.527:1.527 1.531:1.531:1.531 1.542:1.542:1.542 1.559:1.559:1.559 1.612:1.612:1.612 1.712:1.712:1.712 1.811:1.811:1.811)
	    (1.673:1.673:1.673 1.677:1.677:1.677 1.688:1.688:1.688 1.705:1.705:1.705 1.758:1.758:1.758 1.857:1.857:1.857 1.957:1.957:1.957)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.380:1.380:1.380 1.383:1.383:1.383 1.390:1.390:1.390 1.402:1.402:1.402 1.438:1.438:1.438 1.505:1.505:1.505 1.572:1.572:1.572)
	    (1.385:1.385:1.385 1.387:1.387:1.387 1.394:1.394:1.394 1.406:1.406:1.406 1.442:1.442:1.442 1.509:1.509:1.509 1.576:1.576:1.576)
	    (1.390:1.390:1.390 1.392:1.392:1.392 1.399:1.399:1.399 1.411:1.411:1.411 1.447:1.447:1.447 1.514:1.514:1.514 1.581:1.581:1.581)
	    (1.411:1.411:1.411 1.413:1.413:1.413 1.420:1.420:1.420 1.432:1.432:1.432 1.468:1.468:1.468 1.535:1.535:1.535 1.602:1.602:1.602)
	    (1.452:1.452:1.452 1.455:1.455:1.455 1.462:1.462:1.462 1.474:1.474:1.474 1.510:1.510:1.510 1.577:1.577:1.577 1.644:1.644:1.644)
	    (1.525:1.525:1.525 1.528:1.528:1.528 1.535:1.535:1.535 1.547:1.547:1.547 1.583:1.583:1.583 1.650:1.650:1.650 1.717:1.717:1.717)
	    (1.671:1.671:1.671 1.674:1.674:1.674 1.681:1.681:1.681 1.693:1.693:1.693 1.729:1.729:1.729 1.796:1.796:1.796 1.863:1.863:1.863)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.715:0.715:0.715 0.814:0.814:0.814)
	    (0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.720:0.720:0.720 0.819:0.819:0.819)
	    (0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.727:0.727:0.727 0.826:0.826:0.826)
	    (0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.755:0.755:0.755 0.854:0.854:0.854)
	    (0.686:0.686:0.686 0.686:0.686:0.686 0.686:0.686:0.686 0.686:0.686:0.686 0.711:0.711:0.711 0.810:0.810:0.810 0.909:0.909:0.909)
	    (0.731:0.731:0.731 0.731:0.731:0.731 0.737:0.737:0.737 0.755:0.755:0.755 0.808:0.808:0.808 0.907:0.907:0.907 1.006:1.006:1.006)
	    (0.916:0.916:0.916 0.920:0.920:0.920 0.930:0.930:0.930 0.948:0.948:0.948 1.001:1.001:1.001 1.100:1.100:1.100 1.199:1.199:1.199)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.643:0.643:0.643 0.675:0.675:0.675)
	    (0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.645:0.645:0.645 0.680:0.680:0.680)
	    (0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.649:0.649:0.649 0.687:0.687:0.687)
	    (0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.661:0.661:0.661 0.715:0.715:0.715)
	    (0.686:0.686:0.686 0.686:0.686:0.686 0.686:0.686:0.686 0.686:0.686:0.686 0.686:0.686:0.686 0.703:0.703:0.703 0.770:0.770:0.770)
	    (0.731:0.731:0.731 0.731:0.731:0.731 0.731:0.731:0.731 0.731:0.731:0.731 0.732:0.732:0.732 0.800:0.800:0.800 0.867:0.867:0.867)
	    (0.868:0.868:0.868 0.871:0.871:0.871 0.878:0.878:0.878 0.890:0.890:0.890 0.926:0.926:0.926 0.993:0.993:0.993 1.060:1.060:1.060)
	  )))

bus(Q[63:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[10:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.800) error(2.800))
 capacitance(0.277)
)
bus(D[63:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[7:0] bustype(input)
 capacitance(0.122)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.090))
pin(VSS pintype(ground) vdrop_limit(0.090))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (D[32] => CLK 01 posedge tch_tds_rise)
setup (D[32] => CLK 10 posedge tch_tds_fall)
hold (D[32] => CLK 01 posedge tch_tdh_rise)
hold (D[32] => CLK 10 posedge tch_tdh_fall)
setup (D[33] => CLK 01 posedge tch_tds_rise)
setup (D[33] => CLK 10 posedge tch_tds_fall)
hold (D[33] => CLK 01 posedge tch_tdh_rise)
hold (D[33] => CLK 10 posedge tch_tdh_fall)
setup (D[34] => CLK 01 posedge tch_tds_rise)
setup (D[34] => CLK 10 posedge tch_tds_fall)
hold (D[34] => CLK 01 posedge tch_tdh_rise)
hold (D[34] => CLK 10 posedge tch_tdh_fall)
setup (D[35] => CLK 01 posedge tch_tds_rise)
setup (D[35] => CLK 10 posedge tch_tds_fall)
hold (D[35] => CLK 01 posedge tch_tdh_rise)
hold (D[35] => CLK 10 posedge tch_tdh_fall)
setup (D[36] => CLK 01 posedge tch_tds_rise)
setup (D[36] => CLK 10 posedge tch_tds_fall)
hold (D[36] => CLK 01 posedge tch_tdh_rise)
hold (D[36] => CLK 10 posedge tch_tdh_fall)
setup (D[37] => CLK 01 posedge tch_tds_rise)
setup (D[37] => CLK 10 posedge tch_tds_fall)
hold (D[37] => CLK 01 posedge tch_tdh_rise)
hold (D[37] => CLK 10 posedge tch_tdh_fall)
setup (D[38] => CLK 01 posedge tch_tds_rise)
setup (D[38] => CLK 10 posedge tch_tds_fall)
hold (D[38] => CLK 01 posedge tch_tdh_rise)
hold (D[38] => CLK 10 posedge tch_tdh_fall)
setup (D[39] => CLK 01 posedge tch_tds_rise)
setup (D[39] => CLK 10 posedge tch_tds_fall)
hold (D[39] => CLK 01 posedge tch_tdh_rise)
hold (D[39] => CLK 10 posedge tch_tdh_fall)
setup (D[40] => CLK 01 posedge tch_tds_rise)
setup (D[40] => CLK 10 posedge tch_tds_fall)
hold (D[40] => CLK 01 posedge tch_tdh_rise)
hold (D[40] => CLK 10 posedge tch_tdh_fall)
setup (D[41] => CLK 01 posedge tch_tds_rise)
setup (D[41] => CLK 10 posedge tch_tds_fall)
hold (D[41] => CLK 01 posedge tch_tdh_rise)
hold (D[41] => CLK 10 posedge tch_tdh_fall)
setup (D[42] => CLK 01 posedge tch_tds_rise)
setup (D[42] => CLK 10 posedge tch_tds_fall)
hold (D[42] => CLK 01 posedge tch_tdh_rise)
hold (D[42] => CLK 10 posedge tch_tdh_fall)
setup (D[43] => CLK 01 posedge tch_tds_rise)
setup (D[43] => CLK 10 posedge tch_tds_fall)
hold (D[43] => CLK 01 posedge tch_tdh_rise)
hold (D[43] => CLK 10 posedge tch_tdh_fall)
setup (D[44] => CLK 01 posedge tch_tds_rise)
setup (D[44] => CLK 10 posedge tch_tds_fall)
hold (D[44] => CLK 01 posedge tch_tdh_rise)
hold (D[44] => CLK 10 posedge tch_tdh_fall)
setup (D[45] => CLK 01 posedge tch_tds_rise)
setup (D[45] => CLK 10 posedge tch_tds_fall)
hold (D[45] => CLK 01 posedge tch_tdh_rise)
hold (D[45] => CLK 10 posedge tch_tdh_fall)
setup (D[46] => CLK 01 posedge tch_tds_rise)
setup (D[46] => CLK 10 posedge tch_tds_fall)
hold (D[46] => CLK 01 posedge tch_tdh_rise)
hold (D[46] => CLK 10 posedge tch_tdh_fall)
setup (D[47] => CLK 01 posedge tch_tds_rise)
setup (D[47] => CLK 10 posedge tch_tds_fall)
hold (D[47] => CLK 01 posedge tch_tdh_rise)
hold (D[47] => CLK 10 posedge tch_tdh_fall)
setup (D[48] => CLK 01 posedge tch_tds_rise)
setup (D[48] => CLK 10 posedge tch_tds_fall)
hold (D[48] => CLK 01 posedge tch_tdh_rise)
hold (D[48] => CLK 10 posedge tch_tdh_fall)
setup (D[49] => CLK 01 posedge tch_tds_rise)
setup (D[49] => CLK 10 posedge tch_tds_fall)
hold (D[49] => CLK 01 posedge tch_tdh_rise)
hold (D[49] => CLK 10 posedge tch_tdh_fall)
setup (D[50] => CLK 01 posedge tch_tds_rise)
setup (D[50] => CLK 10 posedge tch_tds_fall)
hold (D[50] => CLK 01 posedge tch_tdh_rise)
hold (D[50] => CLK 10 posedge tch_tdh_fall)
setup (D[51] => CLK 01 posedge tch_tds_rise)
setup (D[51] => CLK 10 posedge tch_tds_fall)
hold (D[51] => CLK 01 posedge tch_tdh_rise)
hold (D[51] => CLK 10 posedge tch_tdh_fall)
setup (D[52] => CLK 01 posedge tch_tds_rise)
setup (D[52] => CLK 10 posedge tch_tds_fall)
hold (D[52] => CLK 01 posedge tch_tdh_rise)
hold (D[52] => CLK 10 posedge tch_tdh_fall)
setup (D[53] => CLK 01 posedge tch_tds_rise)
setup (D[53] => CLK 10 posedge tch_tds_fall)
hold (D[53] => CLK 01 posedge tch_tdh_rise)
hold (D[53] => CLK 10 posedge tch_tdh_fall)
setup (D[54] => CLK 01 posedge tch_tds_rise)
setup (D[54] => CLK 10 posedge tch_tds_fall)
hold (D[54] => CLK 01 posedge tch_tdh_rise)
hold (D[54] => CLK 10 posedge tch_tdh_fall)
setup (D[55] => CLK 01 posedge tch_tds_rise)
setup (D[55] => CLK 10 posedge tch_tds_fall)
hold (D[55] => CLK 01 posedge tch_tdh_rise)
hold (D[55] => CLK 10 posedge tch_tdh_fall)
setup (D[56] => CLK 01 posedge tch_tds_rise)
setup (D[56] => CLK 10 posedge tch_tds_fall)
hold (D[56] => CLK 01 posedge tch_tdh_rise)
hold (D[56] => CLK 10 posedge tch_tdh_fall)
setup (D[57] => CLK 01 posedge tch_tds_rise)
setup (D[57] => CLK 10 posedge tch_tds_fall)
hold (D[57] => CLK 01 posedge tch_tdh_rise)
hold (D[57] => CLK 10 posedge tch_tdh_fall)
setup (D[58] => CLK 01 posedge tch_tds_rise)
setup (D[58] => CLK 10 posedge tch_tds_fall)
hold (D[58] => CLK 01 posedge tch_tdh_rise)
hold (D[58] => CLK 10 posedge tch_tdh_fall)
setup (D[59] => CLK 01 posedge tch_tds_rise)
setup (D[59] => CLK 10 posedge tch_tds_fall)
hold (D[59] => CLK 01 posedge tch_tdh_rise)
hold (D[59] => CLK 10 posedge tch_tdh_fall)
setup (D[60] => CLK 01 posedge tch_tds_rise)
setup (D[60] => CLK 10 posedge tch_tds_fall)
hold (D[60] => CLK 01 posedge tch_tdh_rise)
hold (D[60] => CLK 10 posedge tch_tdh_fall)
setup (D[61] => CLK 01 posedge tch_tds_rise)
setup (D[61] => CLK 10 posedge tch_tds_fall)
hold (D[61] => CLK 01 posedge tch_tdh_rise)
hold (D[61] => CLK 10 posedge tch_tdh_fall)
setup (D[62] => CLK 01 posedge tch_tds_rise)
setup (D[62] => CLK 10 posedge tch_tds_fall)
hold (D[62] => CLK 01 posedge tch_tdh_rise)
hold (D[62] => CLK 10 posedge tch_tdh_fall)
setup (D[63] => CLK 01 posedge tch_tds_rise)
setup (D[63] => CLK 10 posedge tch_tds_fall)
hold (D[63] => CLK 01 posedge tch_tdh_rise)
hold (D[63] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
setup (WEN[4] => CLK 01 posedge tch_tws_rise)
setup (WEN[4] => CLK 10 posedge tch_tws_fall)
hold (WEN[4] => CLK 01 posedge tch_twh_rise)
hold (WEN[4] => CLK 10 posedge tch_twh_fall)
setup (WEN[5] => CLK 01 posedge tch_tws_rise)
setup (WEN[5] => CLK 10 posedge tch_tws_fall)
hold (WEN[5] => CLK 01 posedge tch_twh_rise)
hold (WEN[5] => CLK 10 posedge tch_twh_fall)
setup (WEN[6] => CLK 01 posedge tch_tws_rise)
setup (WEN[6] => CLK 10 posedge tch_tws_fall)
hold (WEN[6] => CLK 01 posedge tch_twh_rise)
hold (WEN[6] => CLK 10 posedge tch_twh_fall)
setup (WEN[7] => CLK 01 posedge tch_tws_rise)
setup (WEN[7] => CLK 10 posedge tch_tws_fall)
hold (WEN[7] => CLK 01 posedge tch_twh_rise)
hold (WEN[7] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[32] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[32] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[33] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[33] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[34] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[34] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[35] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[35] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[36] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[36] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[37] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[37] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[38] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[38] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[39] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[39] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[40] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[40] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[41] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[41] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[42] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[42] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[43] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[43] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[44] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[44] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[45] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[45] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[46] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[46] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[47] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[47] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[48] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[48] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[49] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[49] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[50] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[50] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[51] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[51] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[52] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[52] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[53] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[53] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[54] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[54] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[55] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[55] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[56] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[56] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[57] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[57] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[58] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[58] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[59] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[59] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[60] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[60] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[61] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[61] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[62] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[62] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[63] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[63] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[32] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[32] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[32] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[32] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[33] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[33] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[33] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[33] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[34] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[34] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[34] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[34] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[35] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[35] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[35] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[35] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[36] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[36] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[36] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[36] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[37] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[37] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[37] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[37] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[38] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[38] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[38] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[38] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[39] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[39] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[39] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[39] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[40] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[40] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[40] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[40] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[41] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[41] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[41] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[41] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[42] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[42] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[42] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[42] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[43] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[43] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[43] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[43] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[44] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[44] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[44] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[44] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[45] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[45] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[45] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[45] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[46] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[46] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[46] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[46] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[47] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[47] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[47] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[47] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[48] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[48] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[48] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[48] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[49] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[49] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[49] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[49] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[50] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[50] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[50] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[50] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[51] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[51] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[51] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[51] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[52] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[52] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[52] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[52] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[53] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[53] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[53] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[53] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[54] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[54] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[54] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[54] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[55] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[55] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[55] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[55] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[56] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[56] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[56] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[56] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[57] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[57] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[57] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[57] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[58] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[58] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[58] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[58] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[59] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[59] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[59] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[59] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[60] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[60] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[60] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[60] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[61] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[61] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[61] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[61] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[62] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[62] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[62] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[62] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[63] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[63] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[63] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[63] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
