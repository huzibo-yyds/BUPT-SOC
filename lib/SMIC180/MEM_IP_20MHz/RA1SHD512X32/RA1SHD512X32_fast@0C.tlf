/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD512X32 -words 512 -bits 32 -frequency 20 -ring_width 2 -mux 4 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD512X32
 *      Words:          512
 *      Word Width:     32
 *      Mux:            4
 *      Pipeline:       No
 *      Process:        fast@0C
 *      Delays:         min
 *
 *      Creation Date:  2002-06-03 13:12:00Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:12:14Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("fast@0C")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(0.000)
  voltage(1.980)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.200) error(2.200))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD512X32

Area (164513.375)
CT_TOLERANCE(0.198)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.229:0.229:0.229 0.229:0.229:0.229 0.229:0.229:0.229 0.230:0.230:0.230 0.232:0.232:0.232 0.233:0.233:0.233 0.309:0.309:0.309)
	    (0.227:0.227:0.227 0.227:0.227:0.227 0.228:0.228:0.228 0.228:0.228:0.228 0.230:0.230:0.230 0.231:0.231:0.231 0.307:0.307:0.307)
	    (0.220:0.220:0.220 0.220:0.220:0.220 0.221:0.221:0.221 0.221:0.221:0.221 0.223:0.223:0.223 0.224:0.224:0.224 0.301:0.301:0.301)
	    (0.211:0.211:0.211 0.211:0.211:0.211 0.212:0.212:0.212 0.212:0.212:0.212 0.214:0.214:0.214 0.215:0.215:0.215 0.292:0.292:0.292)
	    (0.189:0.189:0.189 0.189:0.189:0.189 0.189:0.189:0.189 0.190:0.190:0.190 0.192:0.192:0.192 0.193:0.193:0.193 0.269:0.269:0.269)
	    (0.171:0.171:0.171 0.171:0.171:0.171 0.171:0.171:0.171 0.172:0.172:0.172 0.174:0.174:0.174 0.175:0.175:0.175 0.251:0.251:0.251)
	    (0.130:0.130:0.130 0.131:0.131:0.131 0.131:0.131:0.131 0.132:0.132:0.132 0.133:0.133:0.133 0.135:0.135:0.135 0.211:0.211:0.211)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.229:0.229:0.229 0.229:0.229:0.229 0.229:0.229:0.229 0.230:0.230:0.230 0.232:0.232:0.232 0.233:0.233:0.233 0.309:0.309:0.309)
	    (0.227:0.227:0.227 0.227:0.227:0.227 0.228:0.228:0.228 0.228:0.228:0.228 0.230:0.230:0.230 0.231:0.231:0.231 0.307:0.307:0.307)
	    (0.220:0.220:0.220 0.220:0.220:0.220 0.221:0.221:0.221 0.221:0.221:0.221 0.223:0.223:0.223 0.224:0.224:0.224 0.301:0.301:0.301)
	    (0.211:0.211:0.211 0.211:0.211:0.211 0.212:0.212:0.212 0.212:0.212:0.212 0.214:0.214:0.214 0.215:0.215:0.215 0.292:0.292:0.292)
	    (0.189:0.189:0.189 0.189:0.189:0.189 0.189:0.189:0.189 0.190:0.190:0.190 0.192:0.192:0.192 0.193:0.193:0.193 0.269:0.269:0.269)
	    (0.171:0.171:0.171 0.171:0.171:0.171 0.171:0.171:0.171 0.172:0.172:0.172 0.174:0.174:0.174 0.175:0.175:0.175 0.251:0.251:0.251)
	    (0.130:0.130:0.130 0.131:0.131:0.131 0.131:0.131:0.131 0.132:0.132:0.132 0.133:0.133:0.133 0.135:0.135:0.135 0.211:0.211:0.211)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.063:0.063:0.063 0.063:0.063:0.063 0.063:0.063:0.063 0.062:0.062:0.062 0.061:0.061:0.061 0.059:0.059:0.059 0.056:0.056:0.056)
	    (0.065:0.065:0.065 0.065:0.065:0.065 0.065:0.065:0.065 0.064:0.064:0.064 0.062:0.062:0.062 0.061:0.061:0.061 0.058:0.058:0.058)
	    (0.072:0.072:0.072 0.072:0.072:0.072 0.071:0.071:0.071 0.071:0.071:0.071 0.069:0.069:0.069 0.068:0.068:0.068 0.065:0.065:0.065)
	    (0.081:0.081:0.081 0.081:0.081:0.081 0.080:0.080:0.080 0.080:0.080:0.080 0.078:0.078:0.078 0.077:0.077:0.077 0.074:0.074:0.074)
	    (0.103:0.103:0.103 0.103:0.103:0.103 0.103:0.103:0.103 0.102:0.102:0.102 0.100:0.100:0.100 0.099:0.099:0.099 0.096:0.096:0.096)
	    (0.121:0.121:0.121 0.121:0.121:0.121 0.121:0.121:0.121 0.120:0.120:0.120 0.118:0.118:0.118 0.117:0.117:0.117 0.114:0.114:0.114)
	    (0.162:0.162:0.162 0.161:0.161:0.161 0.161:0.161:0.161 0.160:0.160:0.160 0.159:0.159:0.159 0.157:0.157:0.157 0.155:0.155:0.155)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.048:0.048:0.048 0.044:0.044:0.044 0.030:0.030:0.030 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.049:0.049:0.049 0.046:0.046:0.046 0.032:0.032:0.032 0.014:0.014:0.014 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.056:0.056:0.056 0.053:0.053:0.053 0.039:0.039:0.039 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.065:0.065:0.065 0.062:0.062:0.062 0.048:0.048:0.048 0.030:0.030:0.030 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.088:0.088:0.088 0.084:0.084:0.084 0.070:0.070:0.070 0.052:0.052:0.052 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.106:0.106:0.106 0.102:0.102:0.102 0.088:0.088:0.088 0.070:0.070:0.070 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.146:0.146:0.146 0.142:0.142:0.142 0.129:0.129:0.129 0.110:0.110:0.110 0.065:0.065:0.065 0.029:0.029:0.029 0.000:0.000:0.000)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.268:0.268:0.268 0.269:0.269:0.269 0.270:0.270:0.270 0.271:0.271:0.271 0.284:0.284:0.284 0.328:0.328:0.328 0.428:0.428:0.428)
	    (0.267:0.267:0.267 0.267:0.267:0.267 0.268:0.268:0.268 0.270:0.270:0.270 0.282:0.282:0.282 0.326:0.326:0.326 0.426:0.426:0.426)
	    (0.260:0.260:0.260 0.260:0.260:0.260 0.261:0.261:0.261 0.263:0.263:0.263 0.275:0.275:0.275 0.320:0.320:0.320 0.419:0.419:0.419)
	    (0.251:0.251:0.251 0.251:0.251:0.251 0.252:0.252:0.252 0.254:0.254:0.254 0.266:0.266:0.266 0.311:0.311:0.311 0.411:0.411:0.411)
	    (0.229:0.229:0.229 0.229:0.229:0.229 0.230:0.230:0.230 0.231:0.231:0.231 0.244:0.244:0.244 0.288:0.288:0.288 0.388:0.388:0.388)
	    (0.211:0.211:0.211 0.211:0.211:0.211 0.212:0.212:0.212 0.213:0.213:0.213 0.226:0.226:0.226 0.270:0.270:0.270 0.370:0.370:0.370)
	    (0.170:0.170:0.170 0.170:0.170:0.170 0.172:0.172:0.172 0.173:0.173:0.173 0.185:0.185:0.185 0.230:0.230:0.230 0.330:0.330:0.330)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.268:0.268:0.268 0.269:0.269:0.269 0.270:0.270:0.270 0.271:0.271:0.271 0.284:0.284:0.284 0.328:0.328:0.328 0.428:0.428:0.428)
	    (0.267:0.267:0.267 0.267:0.267:0.267 0.268:0.268:0.268 0.270:0.270:0.270 0.282:0.282:0.282 0.326:0.326:0.326 0.426:0.426:0.426)
	    (0.260:0.260:0.260 0.260:0.260:0.260 0.261:0.261:0.261 0.263:0.263:0.263 0.275:0.275:0.275 0.320:0.320:0.320 0.419:0.419:0.419)
	    (0.251:0.251:0.251 0.251:0.251:0.251 0.252:0.252:0.252 0.254:0.254:0.254 0.266:0.266:0.266 0.311:0.311:0.311 0.411:0.411:0.411)
	    (0.229:0.229:0.229 0.229:0.229:0.229 0.230:0.230:0.230 0.231:0.231:0.231 0.244:0.244:0.244 0.288:0.288:0.288 0.388:0.388:0.388)
	    (0.211:0.211:0.211 0.211:0.211:0.211 0.212:0.212:0.212 0.213:0.213:0.213 0.226:0.226:0.226 0.270:0.270:0.270 0.370:0.370:0.370)
	    (0.170:0.170:0.170 0.170:0.170:0.170 0.172:0.172:0.172 0.173:0.173:0.173 0.185:0.185:0.185 0.230:0.230:0.230 0.330:0.330:0.330)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.011:0.011:0.011 0.011:0.011:0.011 0.010:0.010:0.010 0.009:0.009:0.009 0.005:0.005:0.005 0.002:0.002:0.002 0.000:0.000:0.000)
	    (0.029:0.029:0.029 0.029:0.029:0.029 0.028:0.028:0.028 0.027:0.027:0.027 0.023:0.023:0.023 0.020:0.020:0.020 0.013:0.013:0.013)
	    (0.070:0.070:0.070 0.069:0.069:0.069 0.068:0.068:0.068 0.067:0.067:0.067 0.063:0.063:0.063 0.060:0.060:0.060 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.011:0.011:0.011 0.011:0.011:0.011 0.010:0.010:0.010 0.009:0.009:0.009 0.005:0.005:0.005 0.002:0.002:0.002 0.000:0.000:0.000)
	    (0.029:0.029:0.029 0.029:0.029:0.029 0.028:0.028:0.028 0.027:0.027:0.027 0.023:0.023:0.023 0.020:0.020:0.020 0.013:0.013:0.013)
	    (0.070:0.070:0.070 0.069:0.069:0.069 0.068:0.068:0.068 0.067:0.067:0.067 0.063:0.063:0.063 0.060:0.060:0.060 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.110:0.110:0.110 0.110:0.110:0.110 0.112:0.112:0.112 0.119:0.119:0.119 0.191:0.191:0.191 0.249:0.249:0.249 0.379:0.379:0.379)
	    (0.108:0.108:0.108 0.109:0.109:0.109 0.110:0.110:0.110 0.117:0.117:0.117 0.189:0.189:0.189 0.247:0.247:0.247 0.378:0.378:0.378)
	    (0.101:0.101:0.101 0.102:0.102:0.102 0.104:0.104:0.104 0.110:0.110:0.110 0.183:0.183:0.183 0.240:0.240:0.240 0.371:0.371:0.371)
	    (0.092:0.092:0.092 0.093:0.093:0.093 0.095:0.095:0.095 0.101:0.101:0.101 0.174:0.174:0.174 0.231:0.231:0.231 0.362:0.362:0.362)
	    (0.070:0.070:0.070 0.070:0.070:0.070 0.072:0.072:0.072 0.079:0.079:0.079 0.151:0.151:0.151 0.209:0.209:0.209 0.339:0.339:0.339)
	    (0.052:0.052:0.052 0.052:0.052:0.052 0.054:0.054:0.054 0.061:0.061:0.061 0.133:0.133:0.133 0.191:0.191:0.191 0.321:0.321:0.321)
	    (0.012:0.012:0.012 0.012:0.012:0.012 0.014:0.014:0.014 0.020:0.020:0.020 0.093:0.093:0.093 0.151:0.151:0.151 0.281:0.281:0.281)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.110:0.110:0.110 0.110:0.110:0.110 0.112:0.112:0.112 0.119:0.119:0.119 0.191:0.191:0.191 0.249:0.249:0.249 0.379:0.379:0.379)
	    (0.108:0.108:0.108 0.109:0.109:0.109 0.110:0.110:0.110 0.117:0.117:0.117 0.189:0.189:0.189 0.247:0.247:0.247 0.378:0.378:0.378)
	    (0.101:0.101:0.101 0.102:0.102:0.102 0.104:0.104:0.104 0.110:0.110:0.110 0.183:0.183:0.183 0.240:0.240:0.240 0.371:0.371:0.371)
	    (0.092:0.092:0.092 0.093:0.093:0.093 0.095:0.095:0.095 0.101:0.101:0.101 0.174:0.174:0.174 0.231:0.231:0.231 0.362:0.362:0.362)
	    (0.070:0.070:0.070 0.070:0.070:0.070 0.072:0.072:0.072 0.079:0.079:0.079 0.151:0.151:0.151 0.209:0.209:0.209 0.339:0.339:0.339)
	    (0.052:0.052:0.052 0.052:0.052:0.052 0.054:0.054:0.054 0.061:0.061:0.061 0.133:0.133:0.133 0.191:0.191:0.191 0.321:0.321:0.321)
	    (0.012:0.012:0.012 0.012:0.012:0.012 0.014:0.014:0.014 0.020:0.020:0.020 0.093:0.093:0.093 0.151:0.151:0.151 0.281:0.281:0.281)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.009:0.009:0.009 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.011:0.011:0.011 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.017:0.017:0.017 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.026:0.026:0.026 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.049:0.049:0.049 0.043:0.043:0.043 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.067:0.067:0.067 0.061:0.061:0.061 0.039:0.039:0.039 0.010:0.010:0.010 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.107:0.107:0.107 0.101:0.101:0.101 0.080:0.080:0.080 0.051:0.051:0.051 0.031:0.031:0.031 0.026:0.026:0.026 0.015:0.015:0.015)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.009:0.009:0.009 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.011:0.011:0.011 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.017:0.017:0.017 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.026:0.026:0.026 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.049:0.049:0.049 0.043:0.043:0.043 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.067:0.067:0.067 0.061:0.061:0.061 0.039:0.039:0.039 0.010:0.010:0.010 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.107:0.107:0.107 0.101:0.101:0.101 0.080:0.080:0.080 0.051:0.051:0.051 0.031:0.031:0.031 0.026:0.026:0.026 0.015:0.015:0.015)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.130:0.130:0.130 0.135:0.135:0.135 0.153:0.153:0.153 0.177:0.177:0.177 0.237:0.237:0.237 0.286:0.286:0.286 0.394:0.394:0.394)
	    (0.128:0.128:0.128 0.133:0.133:0.133 0.151:0.151:0.151 0.175:0.175:0.175 0.236:0.236:0.236 0.284:0.284:0.284 0.393:0.393:0.393)
	    (0.121:0.121:0.121 0.126:0.126:0.126 0.144:0.144:0.144 0.169:0.169:0.169 0.229:0.229:0.229 0.277:0.277:0.277 0.386:0.386:0.386)
	    (0.112:0.112:0.112 0.117:0.117:0.117 0.135:0.135:0.135 0.160:0.160:0.160 0.220:0.220:0.220 0.268:0.268:0.268 0.377:0.377:0.377)
	    (0.090:0.090:0.090 0.095:0.095:0.095 0.113:0.113:0.113 0.137:0.137:0.137 0.198:0.198:0.198 0.246:0.246:0.246 0.355:0.355:0.355)
	    (0.072:0.072:0.072 0.077:0.077:0.077 0.095:0.095:0.095 0.119:0.119:0.119 0.180:0.180:0.180 0.228:0.228:0.228 0.337:0.337:0.337)
	    (0.038:0.038:0.038 0.039:0.039:0.039 0.055:0.055:0.055 0.079:0.079:0.079 0.139:0.139:0.139 0.188:0.188:0.188 0.296:0.296:0.296)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.130:0.130:0.130 0.135:0.135:0.135 0.153:0.153:0.153 0.177:0.177:0.177 0.237:0.237:0.237 0.286:0.286:0.286 0.394:0.394:0.394)
	    (0.128:0.128:0.128 0.133:0.133:0.133 0.151:0.151:0.151 0.175:0.175:0.175 0.236:0.236:0.236 0.284:0.284:0.284 0.393:0.393:0.393)
	    (0.121:0.121:0.121 0.126:0.126:0.126 0.144:0.144:0.144 0.169:0.169:0.169 0.229:0.229:0.229 0.277:0.277:0.277 0.386:0.386:0.386)
	    (0.112:0.112:0.112 0.117:0.117:0.117 0.135:0.135:0.135 0.160:0.160:0.160 0.220:0.220:0.220 0.268:0.268:0.268 0.377:0.377:0.377)
	    (0.090:0.090:0.090 0.095:0.095:0.095 0.113:0.113:0.113 0.137:0.137:0.137 0.198:0.198:0.198 0.246:0.246:0.246 0.355:0.355:0.355)
	    (0.072:0.072:0.072 0.077:0.077:0.077 0.095:0.095:0.095 0.119:0.119:0.119 0.180:0.180:0.180 0.228:0.228:0.228 0.337:0.337:0.337)
	    (0.038:0.038:0.038 0.039:0.039:0.039 0.055:0.055:0.055 0.079:0.079:0.079 0.139:0.139:0.139 0.188:0.188:0.188 0.296:0.296:0.296)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.022:0.022:0.022 0.018:0.018:0.018 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.022:0.022:0.022 0.018:0.018:0.018 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (0.82190884558468)))
TIMING_model (tpw_tckl (const (0.108738235294117)))
TIMING_model (tpw_tckh (const (0.08738)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.053 0.058 0.073 0.099 0.176 0.320 0.463))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.035 0.038 0.047 0.061 0.104 0.183 0.263))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (0.784:0.784:0.784 0.787:0.787:0.787 0.794:0.794:0.794 0.804:0.804:0.804 0.832:0.832:0.832 0.884:0.884:0.884 0.937:0.937:0.937)
	    (0.786:0.786:0.786 0.788:0.788:0.788 0.796:0.796:0.796 0.806:0.806:0.806 0.834:0.834:0.834 0.886:0.886:0.886 0.939:0.939:0.939)
	    (0.793:0.793:0.793 0.795:0.795:0.795 0.803:0.803:0.803 0.812:0.812:0.812 0.840:0.840:0.840 0.893:0.893:0.893 0.946:0.946:0.946)
	    (0.802:0.802:0.802 0.804:0.804:0.804 0.812:0.812:0.812 0.821:0.821:0.821 0.849:0.849:0.849 0.902:0.902:0.902 0.955:0.955:0.955)
	    (0.824:0.824:0.824 0.827:0.827:0.827 0.834:0.834:0.834 0.844:0.844:0.844 0.872:0.872:0.872 0.924:0.924:0.924 0.977:0.977:0.977)
	    (0.842:0.842:0.842 0.845:0.845:0.845 0.852:0.852:0.852 0.862:0.862:0.862 0.890:0.890:0.890 0.942:0.942:0.942 0.995:0.995:0.995)
	    (0.882:0.882:0.882 0.885:0.885:0.885 0.893:0.893:0.893 0.902:0.902:0.902 0.930:0.930:0.930 0.983:0.983:0.983 1.035:1.035:1.035)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (0.784:0.784:0.784 0.787:0.787:0.787 0.794:0.794:0.794 0.804:0.804:0.804 0.832:0.832:0.832 0.884:0.884:0.884 0.937:0.937:0.937)
	    (0.786:0.786:0.786 0.788:0.788:0.788 0.796:0.796:0.796 0.806:0.806:0.806 0.834:0.834:0.834 0.886:0.886:0.886 0.939:0.939:0.939)
	    (0.793:0.793:0.793 0.795:0.795:0.795 0.803:0.803:0.803 0.812:0.812:0.812 0.840:0.840:0.840 0.893:0.893:0.893 0.946:0.946:0.946)
	    (0.802:0.802:0.802 0.804:0.804:0.804 0.812:0.812:0.812 0.821:0.821:0.821 0.849:0.849:0.849 0.902:0.902:0.902 0.955:0.955:0.955)
	    (0.824:0.824:0.824 0.827:0.827:0.827 0.834:0.834:0.834 0.844:0.844:0.844 0.872:0.872:0.872 0.924:0.924:0.924 0.977:0.977:0.977)
	    (0.842:0.842:0.842 0.845:0.845:0.845 0.852:0.852:0.852 0.862:0.862:0.862 0.890:0.890:0.890 0.942:0.942:0.942 0.995:0.995:0.995)
	    (0.882:0.882:0.882 0.885:0.885:0.885 0.893:0.893:0.893 0.902:0.902:0.902 0.930:0.930:0.930 0.983:0.983:0.983 1.035:1.035:1.035)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.358:0.358:0.358 0.361:0.361:0.361 0.368:0.368:0.368 0.382:0.382:0.382 0.421:0.421:0.421 0.439:0.439:0.439 0.439:0.439:0.439)
	    (0.363:0.363:0.363 0.366:0.366:0.366 0.374:0.374:0.374 0.387:0.387:0.387 0.426:0.426:0.426 0.441:0.441:0.441 0.441:0.441:0.441)
	    (0.384:0.384:0.384 0.387:0.387:0.387 0.394:0.394:0.394 0.408:0.408:0.408 0.447:0.447:0.447 0.448:0.448:0.448 0.448:0.448:0.448)
	    (0.411:0.411:0.411 0.414:0.414:0.414 0.422:0.422:0.422 0.435:0.435:0.435 0.458:0.458:0.458 0.458:0.458:0.458 0.458:0.458:0.458)
	    (0.480:0.480:0.480 0.481:0.481:0.481 0.481:0.481:0.481 0.481:0.481:0.481 0.481:0.481:0.481 0.481:0.481:0.481 0.481:0.481:0.481)
	    (0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499)
	    (0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.324:0.324:0.324 0.326:0.326:0.326 0.332:0.332:0.332 0.341:0.341:0.341 0.369:0.369:0.369 0.422:0.422:0.422 0.439:0.439:0.439)
	    (0.329:0.329:0.329 0.331:0.331:0.331 0.337:0.337:0.337 0.346:0.346:0.346 0.375:0.375:0.375 0.427:0.427:0.427 0.441:0.441:0.441)
	    (0.350:0.350:0.350 0.352:0.352:0.352 0.357:0.357:0.357 0.367:0.367:0.367 0.395:0.395:0.395 0.448:0.448:0.448 0.448:0.448:0.448)
	    (0.377:0.377:0.377 0.379:0.379:0.379 0.385:0.385:0.385 0.394:0.394:0.394 0.422:0.422:0.422 0.458:0.458:0.458 0.458:0.458:0.458)
	    (0.446:0.446:0.446 0.448:0.448:0.448 0.453:0.453:0.453 0.463:0.463:0.463 0.481:0.481:0.481 0.481:0.481:0.481 0.481:0.481:0.481)
	    (0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499 0.499:0.499:0.499)
	    (0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541 0.541:0.541:0.541)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[8:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.200) error(2.200))
 capacitance(0.193)
)
bus(D[31:0] bustype(input)
 capacitance(0.005)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.123)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.099))
pin(VSS pintype(ground) vdrop_limit(0.099))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
