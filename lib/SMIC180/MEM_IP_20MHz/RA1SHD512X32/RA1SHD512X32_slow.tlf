/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD512X32 -words 512 -bits 32 -frequency 20 -ring_width 2 -mux 4 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD512X32
 *      Words:          512
 *      Word Width:     32
 *      Mux:            4
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 13:12:52Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:13:06Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("slow")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(125.000)
  voltage(1.620)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(4.000) error(4.000))
  load_limit(0.822) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD512X32

Area (164513.375)
CT_TOLERANCE(0.162)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.619:0.619:0.619 0.621:0.621:0.621 0.627:0.627:0.627 0.641:0.641:0.641 0.672:0.672:0.672 0.736:0.736:0.736 0.799:0.799:0.799)
	    (0.612:0.612:0.612 0.614:0.614:0.614 0.621:0.621:0.621 0.634:0.634:0.634 0.666:0.666:0.666 0.729:0.729:0.729 0.792:0.792:0.792)
	    (0.588:0.588:0.588 0.590:0.590:0.590 0.596:0.596:0.596 0.610:0.610:0.610 0.642:0.642:0.642 0.705:0.705:0.705 0.768:0.768:0.768)
	    (0.539:0.539:0.539 0.541:0.541:0.541 0.548:0.548:0.548 0.561:0.561:0.561 0.593:0.593:0.593 0.656:0.656:0.656 0.719:0.719:0.719)
	    (0.425:0.425:0.425 0.427:0.427:0.427 0.434:0.434:0.434 0.447:0.447:0.447 0.479:0.479:0.479 0.542:0.542:0.542 0.605:0.605:0.605)
	    (0.197:0.197:0.197 0.199:0.199:0.199 0.206:0.206:0.206 0.219:0.219:0.219 0.251:0.251:0.251 0.314:0.314:0.314 0.377:0.377:0.377)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.023:0.023:0.023 0.086:0.086:0.086 0.149:0.149:0.149)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.619:0.619:0.619 0.621:0.621:0.621 0.627:0.627:0.627 0.641:0.641:0.641 0.672:0.672:0.672 0.736:0.736:0.736 0.799:0.799:0.799)
	    (0.612:0.612:0.612 0.614:0.614:0.614 0.621:0.621:0.621 0.634:0.634:0.634 0.666:0.666:0.666 0.729:0.729:0.729 0.792:0.792:0.792)
	    (0.588:0.588:0.588 0.590:0.590:0.590 0.596:0.596:0.596 0.610:0.610:0.610 0.642:0.642:0.642 0.705:0.705:0.705 0.768:0.768:0.768)
	    (0.539:0.539:0.539 0.541:0.541:0.541 0.548:0.548:0.548 0.561:0.561:0.561 0.593:0.593:0.593 0.656:0.656:0.656 0.719:0.719:0.719)
	    (0.425:0.425:0.425 0.427:0.427:0.427 0.434:0.434:0.434 0.447:0.447:0.447 0.479:0.479:0.479 0.542:0.542:0.542 0.605:0.605:0.605)
	    (0.197:0.197:0.197 0.199:0.199:0.199 0.206:0.206:0.206 0.219:0.219:0.219 0.251:0.251:0.251 0.314:0.314:0.314 0.377:0.377:0.377)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.023:0.023:0.023 0.086:0.086:0.086 0.149:0.149:0.149)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.105:0.105:0.105 0.103:0.103:0.103 0.097:0.097:0.097 0.083:0.083:0.083 0.052:0.052:0.052 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.112:0.112:0.112 0.110:0.110:0.110 0.103:0.103:0.103 0.090:0.090:0.090 0.058:0.058:0.058 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.136:0.136:0.136 0.134:0.134:0.134 0.128:0.128:0.128 0.114:0.114:0.114 0.082:0.082:0.082 0.019:0.019:0.019 0.000:0.000:0.000)
	    (0.185:0.185:0.185 0.183:0.183:0.183 0.176:0.176:0.176 0.163:0.163:0.163 0.131:0.131:0.131 0.068:0.068:0.068 0.005:0.005:0.005)
	    (0.299:0.299:0.299 0.297:0.297:0.297 0.290:0.290:0.290 0.277:0.277:0.277 0.245:0.245:0.245 0.182:0.182:0.182 0.119:0.119:0.119)
	    (0.527:0.527:0.527 0.525:0.525:0.525 0.518:0.518:0.518 0.505:0.505:0.505 0.473:0.473:0.473 0.410:0.410:0.410 0.347:0.347:0.347)
	    (0.755:0.755:0.755 0.753:0.753:0.753 0.746:0.746:0.746 0.733:0.733:0.733 0.701:0.701:0.701 0.638:0.638:0.638 0.575:0.575:0.575)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.065:0.065:0.065 0.062:0.062:0.062 0.052:0.052:0.052 0.030:0.030:0.030 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.072:0.072:0.072 0.069:0.069:0.069 0.058:0.058:0.058 0.036:0.036:0.036 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.093:0.093:0.093 0.082:0.082:0.082 0.061:0.061:0.061 0.010:0.010:0.010 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.145:0.145:0.145 0.142:0.142:0.142 0.131:0.131:0.131 0.110:0.110:0.110 0.059:0.059:0.059 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.259:0.259:0.259 0.256:0.256:0.256 0.245:0.245:0.245 0.224:0.224:0.224 0.173:0.173:0.173 0.072:0.072:0.072 0.000:0.000:0.000)
	    (0.487:0.487:0.487 0.484:0.484:0.484 0.473:0.473:0.473 0.452:0.452:0.452 0.401:0.401:0.401 0.300:0.300:0.300 0.200:0.200:0.200)
	    (0.715:0.715:0.715 0.712:0.712:0.712 0.701:0.701:0.701 0.679:0.679:0.679 0.629:0.629:0.629 0.528:0.528:0.528 0.427:0.427:0.427)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.588:0.588:0.588 0.591:0.591:0.591 0.599:0.599:0.599 0.615:0.615:0.615 0.653:0.653:0.653 0.728:0.728:0.728 0.855:0.855:0.855)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.722:0.722:0.722 0.849:0.849:0.849)
	    (0.557:0.557:0.557 0.560:0.560:0.560 0.568:0.568:0.568 0.584:0.584:0.584 0.622:0.622:0.622 0.697:0.697:0.697 0.824:0.824:0.824)
	    (0.509:0.509:0.509 0.511:0.511:0.511 0.519:0.519:0.519 0.535:0.535:0.535 0.573:0.573:0.573 0.648:0.648:0.648 0.776:0.776:0.776)
	    (0.395:0.395:0.395 0.397:0.397:0.397 0.405:0.405:0.405 0.421:0.421:0.421 0.459:0.459:0.459 0.534:0.534:0.534 0.662:0.662:0.662)
	    (0.167:0.167:0.167 0.169:0.169:0.169 0.177:0.177:0.177 0.193:0.193:0.193 0.231:0.231:0.231 0.306:0.306:0.306 0.434:0.434:0.434)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.003:0.003:0.003 0.079:0.079:0.079 0.206:0.206:0.206)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.588:0.588:0.588 0.591:0.591:0.591 0.599:0.599:0.599 0.615:0.615:0.615 0.653:0.653:0.653 0.728:0.728:0.728 0.855:0.855:0.855)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.722:0.722:0.722 0.849:0.849:0.849)
	    (0.557:0.557:0.557 0.560:0.560:0.560 0.568:0.568:0.568 0.584:0.584:0.584 0.622:0.622:0.622 0.697:0.697:0.697 0.824:0.824:0.824)
	    (0.509:0.509:0.509 0.511:0.511:0.511 0.519:0.519:0.519 0.535:0.535:0.535 0.573:0.573:0.573 0.648:0.648:0.648 0.776:0.776:0.776)
	    (0.395:0.395:0.395 0.397:0.397:0.397 0.405:0.405:0.405 0.421:0.421:0.421 0.459:0.459:0.459 0.534:0.534:0.534 0.662:0.662:0.662)
	    (0.167:0.167:0.167 0.169:0.169:0.169 0.177:0.177:0.177 0.193:0.193:0.193 0.231:0.231:0.231 0.306:0.306:0.306 0.434:0.434:0.434)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.003:0.003:0.003 0.079:0.079:0.079 0.206:0.206:0.206)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.116:0.116:0.116 0.108:0.108:0.108 0.091:0.091:0.091 0.054:0.054:0.054 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.346:0.346:0.346 0.344:0.344:0.344 0.336:0.336:0.336 0.319:0.319:0.319 0.282:0.282:0.282 0.206:0.206:0.206 0.131:0.131:0.131)
	    (0.574:0.574:0.574 0.572:0.572:0.572 0.563:0.563:0.563 0.547:0.547:0.547 0.510:0.510:0.510 0.434:0.434:0.434 0.358:0.358:0.358)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.116:0.116:0.116 0.108:0.108:0.108 0.091:0.091:0.091 0.054:0.054:0.054 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.346:0.346:0.346 0.344:0.344:0.344 0.336:0.336:0.336 0.319:0.319:0.319 0.282:0.282:0.282 0.206:0.206:0.206 0.131:0.131:0.131)
	    (0.574:0.574:0.574 0.572:0.572:0.572 0.563:0.563:0.563 0.547:0.547:0.547 0.510:0.510:0.510 0.434:0.434:0.434 0.358:0.358:0.358)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.313:0.313:0.313 0.316:0.316:0.316 0.326:0.326:0.326 0.345:0.345:0.345 0.391:0.391:0.391 0.508:0.508:0.508 0.693:0.693:0.693)
	    (0.307:0.307:0.307 0.309:0.309:0.309 0.319:0.319:0.319 0.339:0.339:0.339 0.385:0.385:0.385 0.501:0.501:0.501 0.686:0.686:0.686)
	    (0.282:0.282:0.282 0.285:0.285:0.285 0.295:0.295:0.295 0.314:0.314:0.314 0.360:0.360:0.360 0.477:0.477:0.477 0.662:0.662:0.662)
	    (0.233:0.233:0.233 0.236:0.236:0.236 0.246:0.246:0.246 0.265:0.265:0.265 0.311:0.311:0.311 0.428:0.428:0.428 0.613:0.613:0.613)
	    (0.119:0.119:0.119 0.122:0.122:0.122 0.132:0.132:0.132 0.151:0.151:0.151 0.197:0.197:0.197 0.314:0.314:0.314 0.499:0.499:0.499)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.086:0.086:0.086 0.271:0.271:0.271)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.043:0.043:0.043)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.313:0.313:0.313 0.316:0.316:0.316 0.326:0.326:0.326 0.345:0.345:0.345 0.391:0.391:0.391 0.508:0.508:0.508 0.693:0.693:0.693)
	    (0.307:0.307:0.307 0.309:0.309:0.309 0.319:0.319:0.319 0.339:0.339:0.339 0.385:0.385:0.385 0.501:0.501:0.501 0.686:0.686:0.686)
	    (0.282:0.282:0.282 0.285:0.285:0.285 0.295:0.295:0.295 0.314:0.314:0.314 0.360:0.360:0.360 0.477:0.477:0.477 0.662:0.662:0.662)
	    (0.233:0.233:0.233 0.236:0.236:0.236 0.246:0.246:0.246 0.265:0.265:0.265 0.311:0.311:0.311 0.428:0.428:0.428 0.613:0.613:0.613)
	    (0.119:0.119:0.119 0.122:0.122:0.122 0.132:0.132:0.132 0.151:0.151:0.151 0.197:0.197:0.197 0.314:0.314:0.314 0.499:0.499:0.499)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.086:0.086:0.086 0.271:0.271:0.271)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.043:0.043:0.043)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.022:0.022:0.022 0.017:0.017:0.017 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.071:0.071:0.071 0.066:0.066:0.066 0.046:0.046:0.046 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.185:0.185:0.185 0.180:0.180:0.180 0.160:0.160:0.160 0.120:0.120:0.120 0.028:0.028:0.028 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.413:0.413:0.413 0.408:0.408:0.408 0.388:0.388:0.388 0.348:0.348:0.348 0.256:0.256:0.256 0.071:0.071:0.071 0.000:0.000:0.000)
	    (0.641:0.641:0.641 0.636:0.636:0.636 0.616:0.616:0.616 0.576:0.576:0.576 0.483:0.483:0.483 0.299:0.299:0.299 0.207:0.207:0.207)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.022:0.022:0.022 0.017:0.017:0.017 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.071:0.071:0.071 0.066:0.066:0.066 0.046:0.046:0.046 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.185:0.185:0.185 0.180:0.180:0.180 0.160:0.160:0.160 0.120:0.120:0.120 0.028:0.028:0.028 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.413:0.413:0.413 0.408:0.408:0.408 0.388:0.388:0.388 0.348:0.348:0.348 0.256:0.256:0.256 0.071:0.071:0.071 0.000:0.000:0.000)
	    (0.641:0.641:0.641 0.636:0.636:0.636 0.616:0.616:0.616 0.576:0.576:0.576 0.483:0.483:0.483 0.299:0.299:0.299 0.207:0.207:0.207)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.351:0.351:0.351 0.354:0.354:0.354 0.366:0.366:0.366 0.396:0.396:0.396 0.471:0.471:0.471 0.621:0.621:0.621 0.771:0.771:0.771)
	    (0.345:0.345:0.345 0.348:0.348:0.348 0.360:0.360:0.360 0.389:0.389:0.389 0.464:0.464:0.464 0.614:0.614:0.614 0.764:0.764:0.764)
	    (0.320:0.320:0.320 0.323:0.323:0.323 0.335:0.335:0.335 0.365:0.365:0.365 0.440:0.440:0.440 0.590:0.590:0.590 0.740:0.740:0.740)
	    (0.271:0.271:0.271 0.275:0.275:0.275 0.287:0.287:0.287 0.316:0.316:0.316 0.391:0.391:0.391 0.541:0.541:0.541 0.691:0.691:0.691)
	    (0.157:0.157:0.157 0.161:0.161:0.161 0.173:0.173:0.173 0.202:0.202:0.202 0.277:0.277:0.277 0.427:0.427:0.427 0.577:0.577:0.577)
	    (0.074:0.074:0.074 0.077:0.077:0.077 0.089:0.089:0.089 0.113:0.113:0.113 0.169:0.169:0.169 0.281:0.281:0.281 0.403:0.403:0.403)
	    (0.074:0.074:0.074 0.077:0.077:0.077 0.089:0.089:0.089 0.113:0.113:0.113 0.169:0.169:0.169 0.281:0.281:0.281 0.403:0.403:0.403)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.351:0.351:0.351 0.354:0.354:0.354 0.366:0.366:0.366 0.396:0.396:0.396 0.471:0.471:0.471 0.621:0.621:0.621 0.771:0.771:0.771)
	    (0.345:0.345:0.345 0.348:0.348:0.348 0.360:0.360:0.360 0.389:0.389:0.389 0.464:0.464:0.464 0.614:0.614:0.614 0.764:0.764:0.764)
	    (0.320:0.320:0.320 0.323:0.323:0.323 0.335:0.335:0.335 0.365:0.365:0.365 0.440:0.440:0.440 0.590:0.590:0.590 0.740:0.740:0.740)
	    (0.271:0.271:0.271 0.275:0.275:0.275 0.287:0.287:0.287 0.316:0.316:0.316 0.391:0.391:0.391 0.541:0.541:0.541 0.691:0.691:0.691)
	    (0.157:0.157:0.157 0.161:0.161:0.161 0.173:0.173:0.173 0.202:0.202:0.202 0.277:0.277:0.277 0.427:0.427:0.427 0.577:0.577:0.577)
	    (0.074:0.074:0.074 0.077:0.077:0.077 0.089:0.089:0.089 0.113:0.113:0.113 0.169:0.169:0.169 0.281:0.281:0.281 0.403:0.403:0.403)
	    (0.074:0.074:0.074 0.077:0.077:0.077 0.089:0.089:0.089 0.113:0.113:0.113 0.169:0.169:0.169 0.281:0.281:0.281 0.403:0.403:0.403)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.166:0.166:0.166 0.162:0.162:0.162 0.146:0.146:0.146 0.114:0.114:0.114 0.039:0.039:0.039 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.394:0.394:0.394 0.390:0.390:0.390 0.374:0.374:0.374 0.342:0.342:0.342 0.267:0.267:0.267 0.138:0.138:0.138 0.026:0.026:0.026)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.166:0.166:0.166 0.162:0.162:0.162 0.146:0.146:0.146 0.114:0.114:0.114 0.039:0.039:0.039 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.394:0.394:0.394 0.390:0.390:0.390 0.374:0.374:0.374 0.342:0.342:0.342 0.267:0.267:0.267 0.138:0.138:0.138 0.026:0.026:0.026)
	  )))
TIMING_model (period_tcyc (const (2.03297543355322)))
TIMING_model (tpw_tckl (const (0.282799999999998)))
TIMING_model (tpw_tckh (const (0.2091)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  ((0.111 0.122 0.155 0.209 0.370 0.672 0.974))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  ((0.073 0.079 0.098 0.128 0.219 0.388 0.558))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  (
	    (2.036:2.036:2.036 2.041:2.041:2.041 2.057:2.057:2.057 2.084:2.084:2.084 2.165:2.165:2.165 2.317:2.317:2.317 2.468:2.468:2.468)
	    (2.042:2.042:2.042 2.048:2.048:2.048 2.064:2.064:2.064 2.091:2.091:2.091 2.172:2.172:2.172 2.323:2.323:2.323 2.474:2.474:2.474)
	    (2.067:2.067:2.067 2.072:2.072:2.072 2.088:2.088:2.088 2.115:2.115:2.115 2.196:2.196:2.196 2.347:2.347:2.347 2.499:2.499:2.499)
	    (2.116:2.116:2.116 2.121:2.121:2.121 2.137:2.137:2.137 2.164:2.164:2.164 2.245:2.245:2.245 2.396:2.396:2.396 2.547:2.547:2.547)
	    (2.230:2.230:2.230 2.235:2.235:2.235 2.251:2.251:2.251 2.278:2.278:2.278 2.359:2.359:2.359 2.510:2.510:2.510 2.661:2.661:2.661)
	    (2.457:2.457:2.457 2.463:2.463:2.463 2.479:2.479:2.479 2.506:2.506:2.506 2.587:2.587:2.587 2.738:2.738:2.738 2.889:2.889:2.889)
	    (2.685:2.685:2.685 2.691:2.691:2.691 2.707:2.707:2.707 2.734:2.734:2.734 2.815:2.815:2.815 2.966:2.966:2.966 3.117:3.117:3.117)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  (
	    (2.030:2.030:2.030 2.034:2.034:2.034 2.045:2.045:2.045 2.064:2.064:2.064 2.121:2.121:2.121 2.226:2.226:2.226 2.332:2.332:2.332)
	    (2.036:2.036:2.036 2.040:2.040:2.040 2.051:2.051:2.051 2.070:2.070:2.070 2.127:2.127:2.127 2.233:2.233:2.233 2.339:2.339:2.339)
	    (2.061:2.061:2.061 2.064:2.064:2.064 2.076:2.076:2.076 2.095:2.095:2.095 2.151:2.151:2.151 2.257:2.257:2.257 2.363:2.363:2.363)
	    (2.110:2.110:2.110 2.113:2.113:2.113 2.125:2.125:2.125 2.144:2.144:2.144 2.200:2.200:2.200 2.306:2.306:2.306 2.412:2.412:2.412)
	    (2.223:2.223:2.223 2.227:2.227:2.227 2.239:2.239:2.239 2.258:2.258:2.258 2.314:2.314:2.314 2.420:2.420:2.420 2.526:2.526:2.526)
	    (2.451:2.451:2.451 2.455:2.455:2.455 2.467:2.467:2.467 2.485:2.485:2.485 2.542:2.542:2.542 2.648:2.648:2.648 2.754:2.754:2.754)
	    (2.679:2.679:2.679 2.683:2.683:2.683 2.694:2.694:2.694 2.713:2.713:2.713 2.770:2.770:2.770 2.876:2.876:2.876 2.982:2.982:2.982)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 1.080:1.080:1.080 1.232:1.232:1.232)
	    (0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 1.086:1.086:1.086 1.237:1.237:1.237)
	    (0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 1.105:1.105:1.105 1.256:1.256:1.256)
	    (1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.143:1.143:1.143 1.294:1.294:1.294)
	    (1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.233:1.233:1.233 1.384:1.384:1.384)
	    (1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.262:1.262:1.262 1.413:1.413:1.413 1.564:1.564:1.564)
	    (1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.441:1.441:1.441 1.592:1.592:1.592 1.744:1.744:1.744)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 1.037:1.037:1.037)
	    (0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 1.042:1.042:1.042)
	    (0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 1.061:1.061:1.061)
	    (1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.100:1.100:1.100)
	    (1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.084:1.084:1.084 1.189:1.189:1.189)
	    (1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.263:1.263:1.263 1.369:1.369:1.369)
	    (1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.443:1.443:1.443 1.549:1.549:1.549)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.822) error(2.147483647e3))
 capacitance(0.022)
)
bus(A[8:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(4.000) error(4.000))
 capacitance(0.157)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.121)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.081))
pin(VSS pintype(ground) vdrop_limit(0.081))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
