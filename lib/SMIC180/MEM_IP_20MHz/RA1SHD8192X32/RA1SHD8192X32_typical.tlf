/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD8192X32 -words 8192 -bits 32 -frequency 20 -ring_width 2 -mux 16 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD8192X32
 *      Words:          8192
 *      Word Width:     32
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        typical
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 12:47:31Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 12:47:44Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("typical")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(25.000)
  voltage(1.800)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.800) error(2.800))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD8192X32

Area (1548578.603)
CT_TOLERANCE(0.180)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.390:0.390:0.390 0.390:0.390:0.390 0.391:0.391:0.391 0.394:0.394:0.394 0.400:0.400:0.400 0.410:0.410:0.410 0.460:0.460:0.460)
	    (0.386:0.386:0.386 0.386:0.386:0.386 0.387:0.387:0.387 0.390:0.390:0.390 0.396:0.396:0.396 0.406:0.406:0.406 0.456:0.456:0.456)
	    (0.380:0.380:0.380 0.381:0.381:0.381 0.382:0.382:0.382 0.385:0.385:0.385 0.390:0.390:0.390 0.400:0.400:0.400 0.451:0.451:0.451)
	    (0.360:0.360:0.360 0.360:0.360:0.360 0.361:0.361:0.361 0.364:0.364:0.364 0.370:0.370:0.370 0.380:0.380:0.380 0.430:0.430:0.430)
	    (0.318:0.318:0.318 0.319:0.319:0.319 0.319:0.319:0.319 0.322:0.322:0.322 0.328:0.328:0.328 0.338:0.338:0.338 0.389:0.389:0.389)
	    (0.245:0.245:0.245 0.246:0.246:0.246 0.247:0.247:0.247 0.250:0.250:0.250 0.255:0.255:0.255 0.265:0.265:0.265 0.316:0.316:0.316)
	    (0.100:0.100:0.100 0.101:0.101:0.101 0.101:0.101:0.101 0.104:0.104:0.104 0.110:0.110:0.110 0.120:0.120:0.120 0.171:0.171:0.171)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.390:0.390:0.390 0.390:0.390:0.390 0.391:0.391:0.391 0.394:0.394:0.394 0.400:0.400:0.400 0.410:0.410:0.410 0.460:0.460:0.460)
	    (0.386:0.386:0.386 0.386:0.386:0.386 0.387:0.387:0.387 0.390:0.390:0.390 0.396:0.396:0.396 0.406:0.406:0.406 0.456:0.456:0.456)
	    (0.380:0.380:0.380 0.381:0.381:0.381 0.382:0.382:0.382 0.385:0.385:0.385 0.390:0.390:0.390 0.400:0.400:0.400 0.451:0.451:0.451)
	    (0.360:0.360:0.360 0.360:0.360:0.360 0.361:0.361:0.361 0.364:0.364:0.364 0.370:0.370:0.370 0.380:0.380:0.380 0.430:0.430:0.430)
	    (0.318:0.318:0.318 0.319:0.319:0.319 0.319:0.319:0.319 0.322:0.322:0.322 0.328:0.328:0.328 0.338:0.338:0.338 0.389:0.389:0.389)
	    (0.245:0.245:0.245 0.246:0.246:0.246 0.247:0.247:0.247 0.250:0.250:0.250 0.255:0.255:0.255 0.265:0.265:0.265 0.316:0.316:0.316)
	    (0.100:0.100:0.100 0.101:0.101:0.101 0.101:0.101:0.101 0.104:0.104:0.104 0.110:0.110:0.110 0.120:0.120:0.120 0.171:0.171:0.171)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.056:0.056:0.056 0.055:0.055:0.055 0.055:0.055:0.055 0.052:0.052:0.052 0.046:0.046:0.046 0.036:0.036:0.036 0.016:0.016:0.016)
	    (0.060:0.060:0.060 0.060:0.060:0.060 0.059:0.059:0.059 0.056:0.056:0.056 0.050:0.050:0.050 0.040:0.040:0.040 0.020:0.020:0.020)
	    (0.065:0.065:0.065 0.065:0.065:0.065 0.064:0.064:0.064 0.061:0.061:0.061 0.055:0.055:0.055 0.045:0.045:0.045 0.025:0.025:0.025)
	    (0.086:0.086:0.086 0.086:0.086:0.086 0.085:0.085:0.085 0.082:0.082:0.082 0.076:0.076:0.076 0.066:0.066:0.066 0.046:0.046:0.046)
	    (0.128:0.128:0.128 0.127:0.127:0.127 0.126:0.126:0.126 0.123:0.123:0.123 0.118:0.118:0.118 0.108:0.108:0.108 0.088:0.088:0.088)
	    (0.200:0.200:0.200 0.200:0.200:0.200 0.199:0.199:0.199 0.196:0.196:0.196 0.190:0.190:0.190 0.180:0.180:0.180 0.160:0.160:0.160)
	    (0.346:0.346:0.346 0.345:0.345:0.345 0.344:0.344:0.344 0.341:0.341:0.341 0.336:0.336:0.336 0.326:0.326:0.326 0.306:0.306:0.306)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.030:0.030:0.030 0.027:0.027:0.027 0.023:0.023:0.023 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.035:0.035:0.035 0.031:0.031:0.031 0.027:0.027:0.027 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.040:0.040:0.040 0.036:0.036:0.036 0.032:0.032:0.032 0.014:0.014:0.014 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.061:0.061:0.061 0.057:0.057:0.057 0.053:0.053:0.053 0.035:0.035:0.035 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.102:0.102:0.102 0.099:0.099:0.099 0.094:0.094:0.094 0.077:0.077:0.077 0.042:0.042:0.042 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.175:0.175:0.175 0.171:0.171:0.171 0.167:0.167:0.167 0.149:0.149:0.149 0.114:0.114:0.114 0.053:0.053:0.053 0.000:0.000:0.000)
	    (0.320:0.320:0.320 0.317:0.317:0.317 0.312:0.312:0.312 0.295:0.295:0.295 0.260:0.260:0.260 0.198:0.198:0.198 0.076:0.076:0.076)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.409:0.409:0.409 0.410:0.410:0.410 0.411:0.411:0.411 0.415:0.415:0.415 0.424:0.424:0.424 0.442:0.442:0.442 0.596:0.596:0.596)
	    (0.405:0.405:0.405 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.419:0.419:0.419 0.438:0.438:0.438 0.592:0.592:0.592)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.414:0.414:0.414 0.433:0.433:0.433 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.393:0.393:0.393 0.412:0.412:0.412 0.566:0.566:0.566)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.298:0.298:0.298 0.451:0.451:0.451)
	    (0.120:0.120:0.120 0.121:0.121:0.121 0.122:0.122:0.122 0.126:0.126:0.126 0.134:0.134:0.134 0.152:0.152:0.152 0.306:0.306:0.306)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.409:0.409:0.409 0.410:0.410:0.410 0.411:0.411:0.411 0.415:0.415:0.415 0.424:0.424:0.424 0.442:0.442:0.442 0.596:0.596:0.596)
	    (0.405:0.405:0.405 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.419:0.419:0.419 0.438:0.438:0.438 0.592:0.592:0.592)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.414:0.414:0.414 0.433:0.433:0.433 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.393:0.393:0.393 0.412:0.412:0.412 0.566:0.566:0.566)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.298:0.298:0.298 0.451:0.451:0.451)
	    (0.120:0.120:0.120 0.121:0.121:0.121 0.122:0.122:0.122 0.126:0.126:0.126 0.134:0.134:0.134 0.152:0.152:0.152 0.306:0.306:0.306)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.081:0.081:0.081 0.067:0.067:0.067 0.038:0.038:0.038)
	    (0.241:0.241:0.241 0.240:0.240:0.240 0.239:0.239:0.239 0.235:0.235:0.235 0.227:0.227:0.227 0.212:0.212:0.212 0.183:0.183:0.183)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.081:0.081:0.081 0.067:0.067:0.067 0.038:0.038:0.038)
	    (0.241:0.241:0.241 0.240:0.240:0.240 0.239:0.239:0.239 0.235:0.235:0.235 0.227:0.227:0.227 0.212:0.212:0.212 0.183:0.183:0.183)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.255:0.255:0.255 0.256:0.256:0.256 0.258:0.258:0.258 0.264:0.264:0.264 0.275:0.275:0.275 0.311:0.311:0.311 0.511:0.511:0.511)
	    (0.251:0.251:0.251 0.252:0.252:0.252 0.253:0.253:0.253 0.259:0.259:0.259 0.271:0.271:0.271 0.306:0.306:0.306 0.507:0.507:0.507)
	    (0.246:0.246:0.246 0.247:0.247:0.247 0.248:0.248:0.248 0.254:0.254:0.254 0.266:0.266:0.266 0.301:0.301:0.301 0.502:0.502:0.502)
	    (0.225:0.225:0.225 0.226:0.226:0.226 0.227:0.227:0.227 0.233:0.233:0.233 0.245:0.245:0.245 0.281:0.281:0.281 0.481:0.481:0.481)
	    (0.183:0.183:0.183 0.184:0.184:0.184 0.186:0.186:0.186 0.192:0.192:0.192 0.204:0.204:0.204 0.239:0.239:0.239 0.440:0.440:0.440)
	    (0.111:0.111:0.111 0.112:0.112:0.112 0.113:0.113:0.113 0.119:0.119:0.119 0.131:0.131:0.131 0.166:0.166:0.166 0.367:0.367:0.367)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.021:0.021:0.021 0.222:0.222:0.222)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.255:0.255:0.255 0.256:0.256:0.256 0.258:0.258:0.258 0.264:0.264:0.264 0.275:0.275:0.275 0.311:0.311:0.311 0.511:0.511:0.511)
	    (0.251:0.251:0.251 0.252:0.252:0.252 0.253:0.253:0.253 0.259:0.259:0.259 0.271:0.271:0.271 0.306:0.306:0.306 0.507:0.507:0.507)
	    (0.246:0.246:0.246 0.247:0.247:0.247 0.248:0.248:0.248 0.254:0.254:0.254 0.266:0.266:0.266 0.301:0.301:0.301 0.502:0.502:0.502)
	    (0.225:0.225:0.225 0.226:0.226:0.226 0.227:0.227:0.227 0.233:0.233:0.233 0.245:0.245:0.245 0.281:0.281:0.281 0.481:0.481:0.481)
	    (0.183:0.183:0.183 0.184:0.184:0.184 0.186:0.186:0.186 0.192:0.192:0.192 0.204:0.204:0.204 0.239:0.239:0.239 0.440:0.440:0.440)
	    (0.111:0.111:0.111 0.112:0.112:0.112 0.113:0.113:0.113 0.119:0.119:0.119 0.131:0.131:0.131 0.166:0.166:0.166 0.367:0.367:0.367)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.021:0.021:0.021 0.222:0.222:0.222)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.011:0.011:0.011 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.015:0.015:0.015 0.009:0.009:0.009 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.020:0.020:0.020 0.014:0.014:0.014 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.041:0.041:0.041 0.035:0.035:0.035 0.028:0.028:0.028 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.082:0.082:0.082 0.077:0.077:0.077 0.069:0.069:0.069 0.041:0.041:0.041 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.155:0.155:0.155 0.149:0.149:0.149 0.142:0.142:0.142 0.113:0.113:0.113 0.056:0.056:0.056 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.300:0.300:0.300 0.295:0.295:0.295 0.287:0.287:0.287 0.259:0.259:0.259 0.201:0.201:0.201 0.126:0.126:0.126 0.084:0.084:0.084)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.011:0.011:0.011 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.015:0.015:0.015 0.009:0.009:0.009 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.020:0.020:0.020 0.014:0.014:0.014 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.041:0.041:0.041 0.035:0.035:0.035 0.028:0.028:0.028 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.082:0.082:0.082 0.077:0.077:0.077 0.069:0.069:0.069 0.041:0.041:0.041 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.155:0.155:0.155 0.149:0.149:0.149 0.142:0.142:0.142 0.113:0.113:0.113 0.056:0.056:0.056 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.300:0.300:0.300 0.295:0.295:0.295 0.287:0.287:0.287 0.259:0.259:0.259 0.201:0.201:0.201 0.126:0.126:0.126 0.084:0.084:0.084)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.248:0.248:0.248 0.250:0.250:0.250 0.252:0.252:0.252 0.261:0.261:0.261 0.299:0.299:0.299 0.384:0.384:0.384 0.553:0.553:0.553)
	    (0.244:0.244:0.244 0.246:0.246:0.246 0.248:0.248:0.248 0.257:0.257:0.257 0.295:0.295:0.295 0.380:0.380:0.380 0.549:0.549:0.549)
	    (0.239:0.239:0.239 0.240:0.240:0.240 0.243:0.243:0.243 0.252:0.252:0.252 0.290:0.290:0.290 0.375:0.375:0.375 0.544:0.544:0.544)
	    (0.218:0.218:0.218 0.220:0.220:0.220 0.222:0.222:0.222 0.231:0.231:0.231 0.269:0.269:0.269 0.354:0.354:0.354 0.523:0.523:0.523)
	    (0.176:0.176:0.176 0.178:0.178:0.178 0.180:0.180:0.180 0.190:0.190:0.190 0.228:0.228:0.228 0.312:0.312:0.312 0.481:0.481:0.481)
	    (0.120:0.120:0.120 0.122:0.122:0.122 0.124:0.124:0.124 0.133:0.133:0.133 0.155:0.155:0.155 0.240:0.240:0.240 0.409:0.409:0.409)
	    (0.120:0.120:0.120 0.122:0.122:0.122 0.124:0.124:0.124 0.133:0.133:0.133 0.151:0.151:0.151 0.212:0.212:0.212 0.381:0.381:0.381)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.248:0.248:0.248 0.250:0.250:0.250 0.252:0.252:0.252 0.261:0.261:0.261 0.299:0.299:0.299 0.384:0.384:0.384 0.553:0.553:0.553)
	    (0.244:0.244:0.244 0.246:0.246:0.246 0.248:0.248:0.248 0.257:0.257:0.257 0.295:0.295:0.295 0.380:0.380:0.380 0.549:0.549:0.549)
	    (0.239:0.239:0.239 0.240:0.240:0.240 0.243:0.243:0.243 0.252:0.252:0.252 0.290:0.290:0.290 0.375:0.375:0.375 0.544:0.544:0.544)
	    (0.218:0.218:0.218 0.220:0.220:0.220 0.222:0.222:0.222 0.231:0.231:0.231 0.269:0.269:0.269 0.354:0.354:0.354 0.523:0.523:0.523)
	    (0.176:0.176:0.176 0.178:0.178:0.178 0.180:0.180:0.180 0.190:0.190:0.190 0.228:0.228:0.228 0.312:0.312:0.312 0.481:0.481:0.481)
	    (0.120:0.120:0.120 0.122:0.122:0.122 0.124:0.124:0.124 0.133:0.133:0.133 0.155:0.155:0.155 0.240:0.240:0.240 0.409:0.409:0.409)
	    (0.120:0.120:0.120 0.122:0.122:0.122 0.124:0.124:0.124 0.133:0.133:0.133 0.151:0.151:0.151 0.212:0.212:0.212 0.381:0.381:0.381)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.125:0.125:0.125 0.120:0.120:0.120 0.114:0.114:0.114 0.093:0.093:0.093 0.074:0.074:0.074 0.043:0.043:0.043 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.125:0.125:0.125 0.120:0.120:0.120 0.114:0.114:0.114 0.093:0.093:0.093 0.074:0.074:0.074 0.043:0.043:0.043 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (1.58679959975312)))
TIMING_model (tpw_tckl (const (0.180025641025642)))
TIMING_model (tpw_tckh (const (0.1183)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.048 0.055 0.076 0.112 0.218 0.417 0.615))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.046 0.050 0.062 0.081 0.138 0.245 0.353))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.621:1.621:1.621 1.625:1.625:1.625 1.635:1.635:1.635 1.653:1.653:1.653 1.706:1.706:1.706 1.805:1.805:1.805 1.904:1.904:1.904)
	    (1.625:1.625:1.625 1.629:1.629:1.629 1.639:1.639:1.639 1.657:1.657:1.657 1.710:1.710:1.710 1.809:1.809:1.809 1.908:1.908:1.908)
	    (1.630:1.630:1.630 1.634:1.634:1.634 1.645:1.645:1.645 1.662:1.662:1.662 1.715:1.715:1.715 1.814:1.814:1.814 1.914:1.914:1.914)
	    (1.651:1.651:1.651 1.655:1.655:1.655 1.665:1.665:1.665 1.683:1.683:1.683 1.736:1.736:1.736 1.835:1.835:1.835 1.934:1.934:1.934)
	    (1.693:1.693:1.693 1.696:1.696:1.696 1.707:1.707:1.707 1.725:1.725:1.725 1.778:1.778:1.778 1.877:1.877:1.877 1.976:1.976:1.976)
	    (1.765:1.765:1.765 1.769:1.769:1.769 1.779:1.779:1.779 1.797:1.797:1.797 1.850:1.850:1.850 1.949:1.949:1.949 2.049:2.049:2.049)
	    (1.911:1.911:1.911 1.914:1.914:1.914 1.925:1.925:1.925 1.943:1.943:1.943 1.996:1.996:1.996 2.095:2.095:2.095 2.194:2.194:2.194)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.616:1.616:1.616 1.619:1.619:1.619 1.626:1.626:1.626 1.638:1.638:1.638 1.674:1.674:1.674 1.741:1.741:1.741 1.808:1.808:1.808)
	    (1.621:1.621:1.621 1.623:1.623:1.623 1.630:1.630:1.630 1.642:1.642:1.642 1.678:1.678:1.678 1.745:1.745:1.745 1.812:1.812:1.812)
	    (1.626:1.626:1.626 1.628:1.628:1.628 1.635:1.635:1.635 1.647:1.647:1.647 1.683:1.683:1.683 1.750:1.750:1.750 1.817:1.817:1.817)
	    (1.646:1.646:1.646 1.649:1.649:1.649 1.656:1.656:1.656 1.668:1.668:1.668 1.704:1.704:1.704 1.771:1.771:1.771 1.838:1.838:1.838)
	    (1.688:1.688:1.688 1.690:1.690:1.690 1.698:1.698:1.698 1.710:1.710:1.710 1.745:1.745:1.745 1.813:1.813:1.813 1.880:1.880:1.880)
	    (1.761:1.761:1.761 1.763:1.763:1.763 1.770:1.770:1.770 1.782:1.782:1.782 1.818:1.818:1.818 1.885:1.885:1.885 1.952:1.952:1.952)
	    (1.906:1.906:1.906 1.908:1.908:1.908 1.916:1.916:1.916 1.928:1.928:1.928 1.963:1.963:1.963 2.031:2.031:2.031 2.098:2.098:2.098)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.730:0.730:0.730 0.829:0.829:0.829)
	    (0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.735:0.735:0.735 0.835:0.835:0.835)
	    (0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.742:0.742:0.742 0.841:0.841:0.841)
	    (0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.770:0.770:0.770 0.869:0.869:0.869)
	    (0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.726:0.726:0.726 0.825:0.825:0.825 0.924:0.924:0.924)
	    (0.744:0.744:0.744 0.744:0.744:0.744 0.752:0.752:0.752 0.770:0.770:0.770 0.823:0.823:0.823 0.922:0.922:0.922 1.021:1.021:1.021)
	    (0.931:0.931:0.931 0.935:0.935:0.935 0.945:0.945:0.945 0.963:0.963:0.963 1.016:1.016:1.016 1.115:1.115:1.115 1.215:1.215:1.215)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.682:0.682:0.682)
	    (0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.688:0.688:0.688)
	    (0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.695:0.695:0.695)
	    (0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.722:0.722:0.722)
	    (0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.711:0.711:0.711 0.778:0.778:0.778)
	    (0.744:0.744:0.744 0.744:0.744:0.744 0.744:0.744:0.744 0.744:0.744:0.744 0.744:0.744:0.744 0.807:0.807:0.807 0.874:0.874:0.874)
	    (0.876:0.876:0.876 0.879:0.879:0.879 0.886:0.886:0.886 0.898:0.898:0.898 0.934:0.934:0.934 1.001:1.001:1.001 1.068:1.068:1.068)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[12:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.800) error(2.800))
 capacitance(0.274)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.122)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.090))
pin(VSS pintype(ground) vdrop_limit(0.090))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (A[11] => CLK 01 posedge tch_tas_rise)
setup (A[11] => CLK 10 posedge tch_tas_fall)
hold (A[11] => CLK 01 posedge tch_tah_rise)
hold (A[11] => CLK 10 posedge tch_tah_fall)
setup (A[12] => CLK 01 posedge tch_tas_rise)
setup (A[12] => CLK 10 posedge tch_tas_fall)
hold (A[12] => CLK 01 posedge tch_tah_rise)
hold (A[12] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
