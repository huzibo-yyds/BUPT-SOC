/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD8192X32 -words 8192 -bits 32 -frequency 20 -ring_width 2 -mux 16 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD8192X32
 *      Words:          8192
 *      Word Width:     32
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 12:47:52Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 12:48:06Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("slow")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(125.000)
  voltage(1.620)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(4.000) error(4.000))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD8192X32

Area (1548578.603)
CT_TOLERANCE(0.162)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.676:0.676:0.676 0.678:0.678:0.678 0.685:0.685:0.685 0.699:0.699:0.699 0.730:0.730:0.730 0.793:0.793:0.793 0.856:0.856:0.856)
	    (0.670:0.670:0.670 0.672:0.672:0.672 0.679:0.679:0.679 0.692:0.692:0.692 0.724:0.724:0.724 0.787:0.787:0.787 0.850:0.850:0.850)
	    (0.646:0.646:0.646 0.648:0.648:0.648 0.654:0.654:0.654 0.668:0.668:0.668 0.699:0.699:0.699 0.763:0.763:0.763 0.826:0.826:0.826)
	    (0.598:0.598:0.598 0.599:0.599:0.599 0.606:0.606:0.606 0.620:0.620:0.620 0.651:0.651:0.651 0.714:0.714:0.714 0.777:0.777:0.777)
	    (0.485:0.485:0.485 0.487:0.487:0.487 0.493:0.493:0.493 0.507:0.507:0.507 0.538:0.538:0.538 0.602:0.602:0.602 0.665:0.665:0.665)
	    (0.259:0.259:0.259 0.261:0.261:0.261 0.268:0.268:0.268 0.281:0.281:0.281 0.313:0.313:0.313 0.376:0.376:0.376 0.439:0.439:0.439)
	    (0.034:0.034:0.034 0.036:0.036:0.036 0.042:0.042:0.042 0.056:0.056:0.056 0.087:0.087:0.087 0.151:0.151:0.151 0.214:0.214:0.214)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.676:0.676:0.676 0.678:0.678:0.678 0.685:0.685:0.685 0.699:0.699:0.699 0.730:0.730:0.730 0.793:0.793:0.793 0.856:0.856:0.856)
	    (0.670:0.670:0.670 0.672:0.672:0.672 0.679:0.679:0.679 0.692:0.692:0.692 0.724:0.724:0.724 0.787:0.787:0.787 0.850:0.850:0.850)
	    (0.646:0.646:0.646 0.648:0.648:0.648 0.654:0.654:0.654 0.668:0.668:0.668 0.699:0.699:0.699 0.763:0.763:0.763 0.826:0.826:0.826)
	    (0.598:0.598:0.598 0.599:0.599:0.599 0.606:0.606:0.606 0.620:0.620:0.620 0.651:0.651:0.651 0.714:0.714:0.714 0.777:0.777:0.777)
	    (0.485:0.485:0.485 0.487:0.487:0.487 0.493:0.493:0.493 0.507:0.507:0.507 0.538:0.538:0.538 0.602:0.602:0.602 0.665:0.665:0.665)
	    (0.259:0.259:0.259 0.261:0.261:0.261 0.268:0.268:0.268 0.281:0.281:0.281 0.313:0.313:0.313 0.376:0.376:0.376 0.439:0.439:0.439)
	    (0.034:0.034:0.034 0.036:0.036:0.036 0.042:0.042:0.042 0.056:0.056:0.056 0.087:0.087:0.087 0.151:0.151:0.151 0.214:0.214:0.214)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.072:0.072:0.072 0.070:0.070:0.070 0.064:0.064:0.064 0.050:0.050:0.050 0.019:0.019:0.019 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.079:0.079:0.079 0.077:0.077:0.077 0.070:0.070:0.070 0.057:0.057:0.057 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.103:0.103:0.103 0.101:0.101:0.101 0.094:0.094:0.094 0.081:0.081:0.081 0.049:0.049:0.049 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.151:0.151:0.151 0.149:0.149:0.149 0.143:0.143:0.143 0.129:0.129:0.129 0.097:0.097:0.097 0.034:0.034:0.034 0.000:0.000:0.000)
	    (0.264:0.264:0.264 0.262:0.262:0.262 0.255:0.255:0.255 0.242:0.242:0.242 0.210:0.210:0.210 0.147:0.147:0.147 0.084:0.084:0.084)
	    (0.489:0.489:0.489 0.488:0.488:0.488 0.481:0.481:0.481 0.467:0.467:0.467 0.436:0.436:0.436 0.373:0.373:0.373 0.309:0.309:0.309)
	    (0.715:0.715:0.715 0.713:0.713:0.713 0.706:0.706:0.706 0.693:0.693:0.693 0.661:0.661:0.661 0.598:0.598:0.598 0.535:0.535:0.535)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.029:0.029:0.029 0.026:0.026:0.026 0.015:0.015:0.015 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.035:0.035:0.035 0.033:0.033:0.033 0.022:0.022:0.022 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.060:0.060:0.060 0.057:0.057:0.057 0.046:0.046:0.046 0.024:0.024:0.024 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.108:0.108:0.108 0.105:0.105:0.105 0.094:0.094:0.094 0.073:0.073:0.073 0.022:0.022:0.022 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.221:0.221:0.221 0.218:0.218:0.218 0.207:0.207:0.207 0.185:0.185:0.185 0.135:0.135:0.135 0.034:0.034:0.034 0.000:0.000:0.000)
	    (0.446:0.446:0.446 0.443:0.443:0.443 0.432:0.432:0.432 0.411:0.411:0.411 0.360:0.360:0.360 0.260:0.260:0.260 0.159:0.159:0.159)
	    (0.672:0.672:0.672 0.669:0.669:0.669 0.658:0.658:0.658 0.636:0.636:0.636 0.586:0.586:0.586 0.485:0.485:0.485 0.384:0.384:0.384)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.662:0.662:0.662 0.664:0.664:0.664 0.672:0.672:0.672 0.688:0.688:0.688 0.726:0.726:0.726 0.801:0.801:0.801 0.885:0.885:0.885)
	    (0.655:0.655:0.655 0.657:0.657:0.657 0.665:0.665:0.665 0.682:0.682:0.682 0.719:0.719:0.719 0.795:0.795:0.795 0.879:0.879:0.879)
	    (0.631:0.631:0.631 0.633:0.633:0.633 0.641:0.641:0.641 0.657:0.657:0.657 0.695:0.695:0.695 0.771:0.771:0.771 0.855:0.855:0.855)
	    (0.583:0.583:0.583 0.585:0.585:0.585 0.593:0.593:0.593 0.609:0.609:0.609 0.647:0.647:0.647 0.722:0.722:0.722 0.806:0.806:0.806)
	    (0.470:0.470:0.470 0.472:0.472:0.472 0.480:0.480:0.480 0.496:0.496:0.496 0.534:0.534:0.534 0.610:0.610:0.610 0.694:0.694:0.694)
	    (0.244:0.244:0.244 0.247:0.247:0.247 0.255:0.255:0.255 0.271:0.271:0.271 0.309:0.309:0.309 0.384:0.384:0.384 0.468:0.468:0.468)
	    (0.019:0.019:0.019 0.021:0.021:0.021 0.029:0.029:0.029 0.045:0.045:0.045 0.083:0.083:0.083 0.159:0.159:0.159 0.243:0.243:0.243)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.662:0.662:0.662 0.664:0.664:0.664 0.672:0.672:0.672 0.688:0.688:0.688 0.726:0.726:0.726 0.801:0.801:0.801 0.885:0.885:0.885)
	    (0.655:0.655:0.655 0.657:0.657:0.657 0.665:0.665:0.665 0.682:0.682:0.682 0.719:0.719:0.719 0.795:0.795:0.795 0.879:0.879:0.879)
	    (0.631:0.631:0.631 0.633:0.633:0.633 0.641:0.641:0.641 0.657:0.657:0.657 0.695:0.695:0.695 0.771:0.771:0.771 0.855:0.855:0.855)
	    (0.583:0.583:0.583 0.585:0.585:0.585 0.593:0.593:0.593 0.609:0.609:0.609 0.647:0.647:0.647 0.722:0.722:0.722 0.806:0.806:0.806)
	    (0.470:0.470:0.470 0.472:0.472:0.472 0.480:0.480:0.480 0.496:0.496:0.496 0.534:0.534:0.534 0.610:0.610:0.610 0.694:0.694:0.694)
	    (0.244:0.244:0.244 0.247:0.247:0.247 0.255:0.255:0.255 0.271:0.271:0.271 0.309:0.309:0.309 0.384:0.384:0.384 0.468:0.468:0.468)
	    (0.019:0.019:0.019 0.021:0.021:0.021 0.029:0.029:0.029 0.045:0.045:0.045 0.083:0.083:0.083 0.159:0.159:0.159 0.243:0.243:0.243)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.003:0.003:0.003 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.116:0.116:0.116 0.114:0.114:0.114 0.106:0.106:0.106 0.090:0.090:0.090 0.052:0.052:0.052 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.341:0.341:0.341 0.339:0.339:0.339 0.331:0.331:0.331 0.315:0.315:0.315 0.277:0.277:0.277 0.202:0.202:0.202 0.126:0.126:0.126)
	    (0.567:0.567:0.567 0.565:0.565:0.565 0.557:0.557:0.557 0.541:0.541:0.541 0.503:0.503:0.503 0.427:0.427:0.427 0.352:0.352:0.352)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.003:0.003:0.003 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.116:0.116:0.116 0.114:0.114:0.114 0.106:0.106:0.106 0.090:0.090:0.090 0.052:0.052:0.052 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.341:0.341:0.341 0.339:0.339:0.339 0.331:0.331:0.331 0.315:0.315:0.315 0.277:0.277:0.277 0.202:0.202:0.202 0.126:0.126:0.126)
	    (0.567:0.567:0.567 0.565:0.565:0.565 0.557:0.557:0.557 0.541:0.541:0.541 0.503:0.503:0.503 0.427:0.427:0.427 0.352:0.352:0.352)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.446:0.446:0.446 0.449:0.449:0.449 0.458:0.458:0.458 0.478:0.478:0.478 0.524:0.524:0.524 0.616:0.616:0.616 0.731:0.731:0.731)
	    (0.440:0.440:0.440 0.442:0.442:0.442 0.452:0.452:0.452 0.472:0.472:0.472 0.518:0.518:0.518 0.609:0.609:0.609 0.724:0.724:0.724)
	    (0.415:0.415:0.415 0.418:0.418:0.418 0.428:0.428:0.428 0.447:0.447:0.447 0.493:0.493:0.493 0.585:0.585:0.585 0.700:0.700:0.700)
	    (0.367:0.367:0.367 0.370:0.370:0.370 0.379:0.379:0.379 0.399:0.399:0.399 0.445:0.445:0.445 0.537:0.537:0.537 0.652:0.652:0.652)
	    (0.254:0.254:0.254 0.257:0.257:0.257 0.267:0.267:0.267 0.286:0.286:0.286 0.332:0.332:0.332 0.424:0.424:0.424 0.539:0.539:0.539)
	    (0.029:0.029:0.029 0.031:0.031:0.031 0.041:0.041:0.041 0.061:0.061:0.061 0.107:0.107:0.107 0.199:0.199:0.199 0.313:0.313:0.313)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.088:0.088:0.088)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.446:0.446:0.446 0.449:0.449:0.449 0.458:0.458:0.458 0.478:0.478:0.478 0.524:0.524:0.524 0.616:0.616:0.616 0.731:0.731:0.731)
	    (0.440:0.440:0.440 0.442:0.442:0.442 0.452:0.452:0.452 0.472:0.472:0.472 0.518:0.518:0.518 0.609:0.609:0.609 0.724:0.724:0.724)
	    (0.415:0.415:0.415 0.418:0.418:0.418 0.428:0.428:0.428 0.447:0.447:0.447 0.493:0.493:0.493 0.585:0.585:0.585 0.700:0.700:0.700)
	    (0.367:0.367:0.367 0.370:0.370:0.370 0.379:0.379:0.379 0.399:0.399:0.399 0.445:0.445:0.445 0.537:0.537:0.537 0.652:0.652:0.652)
	    (0.254:0.254:0.254 0.257:0.257:0.257 0.267:0.267:0.267 0.286:0.286:0.286 0.332:0.332:0.332 0.424:0.424:0.424 0.539:0.539:0.539)
	    (0.029:0.029:0.029 0.031:0.031:0.031 0.041:0.041:0.041 0.061:0.061:0.061 0.107:0.107:0.107 0.199:0.199:0.199 0.313:0.313:0.313)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.088:0.088:0.088)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.026:0.026:0.026 0.020:0.020:0.020 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.074:0.074:0.074 0.069:0.069:0.069 0.049:0.049:0.049 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.187:0.187:0.187 0.181:0.181:0.181 0.162:0.162:0.162 0.122:0.122:0.122 0.029:0.029:0.029 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.412:0.412:0.412 0.407:0.407:0.407 0.387:0.387:0.387 0.347:0.347:0.347 0.255:0.255:0.255 0.070:0.070:0.070 0.000:0.000:0.000)
	    (0.638:0.638:0.638 0.632:0.632:0.632 0.613:0.613:0.613 0.573:0.573:0.573 0.480:0.480:0.480 0.295:0.295:0.295 0.149:0.149:0.149)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.026:0.026:0.026 0.020:0.020:0.020 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.074:0.074:0.074 0.069:0.069:0.069 0.049:0.049:0.049 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.187:0.187:0.187 0.181:0.181:0.181 0.162:0.162:0.162 0.122:0.122:0.122 0.029:0.029:0.029 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.412:0.412:0.412 0.407:0.407:0.407 0.387:0.387:0.387 0.347:0.347:0.347 0.255:0.255:0.255 0.070:0.070:0.070 0.000:0.000:0.000)
	    (0.638:0.638:0.638 0.632:0.632:0.632 0.613:0.613:0.613 0.573:0.573:0.573 0.480:0.480:0.480 0.295:0.295:0.295 0.149:0.149:0.149)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.438:0.438:0.438 0.441:0.441:0.441 0.453:0.453:0.453 0.477:0.477:0.477 0.533:0.533:0.533 0.673:0.673:0.673 0.823:0.823:0.823)
	    (0.431:0.431:0.431 0.435:0.435:0.435 0.447:0.447:0.447 0.471:0.471:0.471 0.527:0.527:0.527 0.666:0.666:0.666 0.816:0.816:0.816)
	    (0.407:0.407:0.407 0.410:0.410:0.410 0.422:0.422:0.422 0.446:0.446:0.446 0.502:0.502:0.502 0.642:0.642:0.642 0.792:0.792:0.792)
	    (0.359:0.359:0.359 0.362:0.362:0.362 0.374:0.374:0.374 0.398:0.398:0.398 0.454:0.454:0.454 0.594:0.594:0.594 0.744:0.744:0.744)
	    (0.246:0.246:0.246 0.249:0.249:0.249 0.261:0.261:0.261 0.285:0.285:0.285 0.341:0.341:0.341 0.481:0.481:0.481 0.631:0.631:0.631)
	    (0.206:0.206:0.206 0.210:0.210:0.210 0.222:0.222:0.222 0.246:0.246:0.246 0.302:0.302:0.302 0.414:0.414:0.414 0.526:0.526:0.526)
	    (0.206:0.206:0.206 0.210:0.210:0.210 0.222:0.222:0.222 0.246:0.246:0.246 0.302:0.302:0.302 0.414:0.414:0.414 0.526:0.526:0.526)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.438:0.438:0.438 0.441:0.441:0.441 0.453:0.453:0.453 0.477:0.477:0.477 0.533:0.533:0.533 0.673:0.673:0.673 0.823:0.823:0.823)
	    (0.431:0.431:0.431 0.435:0.435:0.435 0.447:0.447:0.447 0.471:0.471:0.471 0.527:0.527:0.527 0.666:0.666:0.666 0.816:0.816:0.816)
	    (0.407:0.407:0.407 0.410:0.410:0.410 0.422:0.422:0.422 0.446:0.446:0.446 0.502:0.502:0.502 0.642:0.642:0.642 0.792:0.792:0.792)
	    (0.359:0.359:0.359 0.362:0.362:0.362 0.374:0.374:0.374 0.398:0.398:0.398 0.454:0.454:0.454 0.594:0.594:0.594 0.744:0.744:0.744)
	    (0.246:0.246:0.246 0.249:0.249:0.249 0.261:0.261:0.261 0.285:0.285:0.285 0.341:0.341:0.341 0.481:0.481:0.481 0.631:0.631:0.631)
	    (0.206:0.206:0.206 0.210:0.210:0.210 0.222:0.222:0.222 0.246:0.246:0.246 0.302:0.302:0.302 0.414:0.414:0.414 0.526:0.526:0.526)
	    (0.206:0.206:0.206 0.210:0.210:0.210 0.222:0.222:0.222 0.246:0.246:0.246 0.302:0.302:0.302 0.414:0.414:0.414 0.526:0.526:0.526)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.098:0.098:0.098 0.093:0.093:0.093 0.077:0.077:0.077 0.052:0.052:0.052 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.323:0.323:0.323 0.319:0.319:0.319 0.303:0.303:0.303 0.277:0.277:0.277 0.221:0.221:0.221 0.109:0.109:0.109 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.098:0.098:0.098 0.093:0.093:0.093 0.077:0.077:0.077 0.052:0.052:0.052 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.323:0.323:0.323 0.319:0.319:0.319 0.303:0.303:0.303 0.277:0.277:0.277 0.221:0.221:0.221 0.109:0.109:0.109 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (2.72443334154573)))
TIMING_model (tpw_tckl (const (0.31093141025641)))
TIMING_model (tpw_tckh (const (0.2087)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.105 0.116 0.148 0.201 0.361 0.659 0.958))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.083 0.088 0.106 0.136 0.225 0.392 0.558))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.759:2.759:2.759 2.764:2.764:2.764 2.780:2.780:2.780 2.806:2.806:2.806 2.885:2.885:2.885 3.032:3.032:3.032 3.180:3.180:3.180)
	    (2.765:2.765:2.765 2.771:2.771:2.771 2.786:2.786:2.786 2.813:2.813:2.813 2.892:2.892:2.892 3.039:3.039:3.039 3.186:3.186:3.186)
	    (2.789:2.789:2.789 2.795:2.795:2.795 2.811:2.811:2.811 2.837:2.837:2.837 2.916:2.916:2.916 3.063:3.063:3.063 3.210:3.210:3.210)
	    (2.838:2.838:2.838 2.843:2.843:2.843 2.859:2.859:2.859 2.885:2.885:2.885 2.964:2.964:2.964 3.111:3.111:3.111 3.259:3.259:3.259)
	    (2.951:2.951:2.951 2.956:2.956:2.956 2.972:2.972:2.972 2.998:2.998:2.998 3.077:3.077:3.077 3.224:3.224:3.224 3.371:3.371:3.371)
	    (3.176:3.176:3.176 3.181:3.181:3.181 3.197:3.197:3.197 3.223:3.223:3.223 3.302:3.302:3.302 3.449:3.449:3.449 3.597:3.597:3.597)
	    (3.401:3.401:3.401 3.407:3.407:3.407 3.423:3.423:3.423 3.449:3.449:3.449 3.528:3.528:3.528 3.675:3.675:3.675 3.822:3.822:3.822)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.754:2.754:2.754 2.758:2.758:2.758 2.769:2.769:2.769 2.788:2.788:2.788 2.844:2.844:2.844 2.949:2.949:2.949 3.054:3.054:3.054)
	    (2.760:2.760:2.760 2.764:2.764:2.764 2.775:2.775:2.775 2.794:2.794:2.794 2.850:2.850:2.850 2.956:2.956:2.956 3.061:3.061:3.061)
	    (2.784:2.784:2.784 2.788:2.788:2.788 2.799:2.799:2.799 2.818:2.818:2.818 2.875:2.875:2.875 2.980:2.980:2.980 3.085:3.085:3.085)
	    (2.833:2.833:2.833 2.836:2.836:2.836 2.848:2.848:2.848 2.866:2.866:2.866 2.923:2.923:2.923 3.028:3.028:3.028 3.133:3.133:3.133)
	    (2.945:2.945:2.945 2.949:2.949:2.949 2.960:2.960:2.960 2.979:2.979:2.979 3.036:3.036:3.036 3.141:3.141:3.141 3.246:3.246:3.246)
	    (3.171:3.171:3.171 3.175:3.175:3.175 3.186:3.186:3.186 3.205:3.205:3.205 3.261:3.261:3.261 3.366:3.366:3.366 3.471:3.471:3.471)
	    (3.396:3.396:3.396 3.400:3.400:3.400 3.411:3.411:3.411 3.430:3.430:3.430 3.487:3.487:3.487 3.592:3.592:3.592 3.697:3.697:3.697)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.161:1.161:1.161 1.308:1.308:1.308)
	    (1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.166:1.166:1.166 1.313:1.313:1.313)
	    (1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.185:1.185:1.185 1.333:1.333:1.333)
	    (1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.224:1.224:1.224 1.371:1.371:1.371)
	    (1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.314:1.314:1.314 1.461:1.461:1.461)
	    (1.341:1.341:1.341 1.341:1.341:1.341 1.341:1.341:1.341 1.341:1.341:1.341 1.346:1.346:1.346 1.493:1.493:1.493 1.641:1.641:1.641)
	    (1.480:1.480:1.480 1.480:1.480:1.480 1.480:1.480:1.480 1.480:1.480:1.480 1.526:1.526:1.526 1.673:1.673:1.673 1.820:1.820:1.820)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.084:1.084:1.084 1.100:1.100:1.100)
	    (1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.087:1.087:1.087 1.106:1.106:1.106)
	    (1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.102:1.102:1.102 1.125:1.125:1.125)
	    (1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.132:1.132:1.132 1.163:1.163:1.163)
	    (1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.202:1.202:1.202 1.253:1.253:1.253)
	    (1.341:1.341:1.341 1.341:1.341:1.341 1.341:1.341:1.341 1.341:1.341:1.341 1.341:1.341:1.341 1.341:1.341:1.341 1.433:1.433:1.433)
	    (1.480:1.480:1.480 1.480:1.480:1.480 1.480:1.480:1.480 1.480:1.480:1.480 1.480:1.480:1.480 1.507:1.507:1.507 1.613:1.613:1.613)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[12:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(4.000) error(4.000))
 capacitance(0.267)
)
bus(D[31:0] bustype(input)
 capacitance(0.003)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.121)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.081))
pin(VSS pintype(ground) vdrop_limit(0.081))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (A[11] => CLK 01 posedge tch_tas_rise)
setup (A[11] => CLK 10 posedge tch_tas_fall)
hold (A[11] => CLK 01 posedge tch_tah_rise)
hold (A[11] => CLK 10 posedge tch_tah_fall)
setup (A[12] => CLK 01 posedge tch_tas_rise)
setup (A[12] => CLK 10 posedge tch_tas_fall)
hold (A[12] => CLK 01 posedge tch_tah_rise)
hold (A[12] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
