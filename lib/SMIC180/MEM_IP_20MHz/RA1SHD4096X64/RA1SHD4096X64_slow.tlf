/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD4096X64 -words 4096 -bits 64 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD4096X64
 *      Words:          4096
 *      Word Width:     64
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 12:01:57Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 12:02:10Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("slow")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(125.000)
  voltage(1.620)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(4.000) error(4.000))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD4096X64

Area (1548578.603)
CT_TOLERANCE(0.162)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.677:0.677:0.677 0.679:0.679:0.679 0.686:0.686:0.686 0.699:0.699:0.699 0.731:0.731:0.731 0.794:0.794:0.794 0.857:0.857:0.857)
	    (0.671:0.671:0.671 0.673:0.673:0.673 0.679:0.679:0.679 0.693:0.693:0.693 0.725:0.725:0.725 0.788:0.788:0.788 0.851:0.851:0.851)
	    (0.647:0.647:0.647 0.648:0.648:0.648 0.655:0.655:0.655 0.669:0.669:0.669 0.700:0.700:0.700 0.763:0.763:0.763 0.827:0.827:0.827)
	    (0.598:0.598:0.598 0.600:0.600:0.600 0.607:0.607:0.607 0.620:0.620:0.620 0.652:0.652:0.652 0.715:0.715:0.715 0.778:0.778:0.778)
	    (0.485:0.485:0.485 0.487:0.487:0.487 0.493:0.493:0.493 0.507:0.507:0.507 0.538:0.538:0.538 0.602:0.602:0.602 0.665:0.665:0.665)
	    (0.258:0.258:0.258 0.260:0.260:0.260 0.267:0.267:0.267 0.280:0.280:0.280 0.312:0.312:0.312 0.375:0.375:0.375 0.438:0.438:0.438)
	    (0.032:0.032:0.032 0.033:0.033:0.033 0.040:0.040:0.040 0.054:0.054:0.054 0.085:0.085:0.085 0.149:0.149:0.149 0.212:0.212:0.212)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.677:0.677:0.677 0.679:0.679:0.679 0.686:0.686:0.686 0.699:0.699:0.699 0.731:0.731:0.731 0.794:0.794:0.794 0.857:0.857:0.857)
	    (0.671:0.671:0.671 0.673:0.673:0.673 0.679:0.679:0.679 0.693:0.693:0.693 0.725:0.725:0.725 0.788:0.788:0.788 0.851:0.851:0.851)
	    (0.647:0.647:0.647 0.648:0.648:0.648 0.655:0.655:0.655 0.669:0.669:0.669 0.700:0.700:0.700 0.763:0.763:0.763 0.827:0.827:0.827)
	    (0.598:0.598:0.598 0.600:0.600:0.600 0.607:0.607:0.607 0.620:0.620:0.620 0.652:0.652:0.652 0.715:0.715:0.715 0.778:0.778:0.778)
	    (0.485:0.485:0.485 0.487:0.487:0.487 0.493:0.493:0.493 0.507:0.507:0.507 0.538:0.538:0.538 0.602:0.602:0.602 0.665:0.665:0.665)
	    (0.258:0.258:0.258 0.260:0.260:0.260 0.267:0.267:0.267 0.280:0.280:0.280 0.312:0.312:0.312 0.375:0.375:0.375 0.438:0.438:0.438)
	    (0.032:0.032:0.032 0.033:0.033:0.033 0.040:0.040:0.040 0.054:0.054:0.054 0.085:0.085:0.085 0.149:0.149:0.149 0.212:0.212:0.212)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.059:0.059:0.059 0.057:0.057:0.057 0.050:0.050:0.050 0.037:0.037:0.037 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.065:0.065:0.065 0.063:0.063:0.063 0.057:0.057:0.057 0.043:0.043:0.043 0.011:0.011:0.011 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.089:0.089:0.089 0.088:0.088:0.088 0.081:0.081:0.081 0.067:0.067:0.067 0.036:0.036:0.036 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.138:0.138:0.138 0.136:0.136:0.136 0.129:0.129:0.129 0.116:0.116:0.116 0.084:0.084:0.084 0.021:0.021:0.021 0.000:0.000:0.000)
	    (0.251:0.251:0.251 0.249:0.249:0.249 0.243:0.243:0.243 0.229:0.229:0.229 0.198:0.198:0.198 0.134:0.134:0.134 0.071:0.071:0.071)
	    (0.478:0.478:0.478 0.476:0.476:0.476 0.469:0.469:0.469 0.456:0.456:0.456 0.424:0.424:0.424 0.361:0.361:0.361 0.298:0.298:0.298)
	    (0.704:0.704:0.704 0.703:0.703:0.703 0.696:0.696:0.696 0.682:0.682:0.682 0.651:0.651:0.651 0.588:0.588:0.588 0.524:0.524:0.524)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.016:0.016:0.016 0.014:0.014:0.014 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.020:0.020:0.020 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.047:0.047:0.047 0.044:0.044:0.044 0.033:0.033:0.033 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.093:0.093:0.093 0.082:0.082:0.082 0.060:0.060:0.060 0.010:0.010:0.010 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.209:0.209:0.209 0.206:0.206:0.206 0.195:0.195:0.195 0.174:0.174:0.174 0.123:0.123:0.123 0.022:0.022:0.022 0.000:0.000:0.000)
	    (0.436:0.436:0.436 0.433:0.433:0.433 0.422:0.422:0.422 0.400:0.400:0.400 0.350:0.350:0.350 0.249:0.249:0.249 0.148:0.148:0.148)
	    (0.662:0.662:0.662 0.659:0.659:0.659 0.648:0.648:0.648 0.627:0.627:0.627 0.576:0.576:0.576 0.476:0.476:0.476 0.375:0.375:0.375)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.661:0.661:0.661 0.663:0.663:0.663 0.671:0.671:0.671 0.687:0.687:0.687 0.725:0.725:0.725 0.800:0.800:0.800 0.888:0.888:0.888)
	    (0.654:0.654:0.654 0.656:0.656:0.656 0.664:0.664:0.664 0.681:0.681:0.681 0.718:0.718:0.718 0.794:0.794:0.794 0.882:0.882:0.882)
	    (0.630:0.630:0.630 0.632:0.632:0.632 0.640:0.640:0.640 0.656:0.656:0.656 0.694:0.694:0.694 0.770:0.770:0.770 0.858:0.858:0.858)
	    (0.581:0.581:0.581 0.583:0.583:0.583 0.592:0.592:0.592 0.608:0.608:0.608 0.645:0.645:0.645 0.721:0.721:0.721 0.809:0.809:0.809)
	    (0.468:0.468:0.468 0.470:0.470:0.470 0.478:0.478:0.478 0.494:0.494:0.494 0.532:0.532:0.532 0.608:0.608:0.608 0.696:0.696:0.696)
	    (0.241:0.241:0.241 0.244:0.244:0.244 0.252:0.252:0.252 0.268:0.268:0.268 0.306:0.306:0.306 0.381:0.381:0.381 0.469:0.469:0.469)
	    (0.015:0.015:0.015 0.017:0.017:0.017 0.025:0.025:0.025 0.041:0.041:0.041 0.079:0.079:0.079 0.155:0.155:0.155 0.243:0.243:0.243)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.661:0.661:0.661 0.663:0.663:0.663 0.671:0.671:0.671 0.687:0.687:0.687 0.725:0.725:0.725 0.800:0.800:0.800 0.888:0.888:0.888)
	    (0.654:0.654:0.654 0.656:0.656:0.656 0.664:0.664:0.664 0.681:0.681:0.681 0.718:0.718:0.718 0.794:0.794:0.794 0.882:0.882:0.882)
	    (0.630:0.630:0.630 0.632:0.632:0.632 0.640:0.640:0.640 0.656:0.656:0.656 0.694:0.694:0.694 0.770:0.770:0.770 0.858:0.858:0.858)
	    (0.581:0.581:0.581 0.583:0.583:0.583 0.592:0.592:0.592 0.608:0.608:0.608 0.645:0.645:0.645 0.721:0.721:0.721 0.809:0.809:0.809)
	    (0.468:0.468:0.468 0.470:0.470:0.470 0.478:0.478:0.478 0.494:0.494:0.494 0.532:0.532:0.532 0.608:0.608:0.608 0.696:0.696:0.696)
	    (0.241:0.241:0.241 0.244:0.244:0.244 0.252:0.252:0.252 0.268:0.268:0.268 0.306:0.306:0.306 0.381:0.381:0.381 0.469:0.469:0.469)
	    (0.015:0.015:0.015 0.017:0.017:0.017 0.025:0.025:0.025 0.041:0.041:0.041 0.079:0.079:0.079 0.155:0.155:0.155 0.243:0.243:0.243)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.117:0.117:0.117 0.115:0.115:0.115 0.107:0.107:0.107 0.090:0.090:0.090 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.343:0.343:0.343 0.341:0.341:0.341 0.333:0.333:0.333 0.317:0.317:0.317 0.279:0.279:0.279 0.204:0.204:0.204 0.128:0.128:0.128)
	    (0.570:0.570:0.570 0.568:0.568:0.568 0.560:0.560:0.560 0.544:0.544:0.544 0.506:0.506:0.506 0.430:0.430:0.430 0.355:0.355:0.355)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.117:0.117:0.117 0.115:0.115:0.115 0.107:0.107:0.107 0.090:0.090:0.090 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.343:0.343:0.343 0.341:0.341:0.341 0.333:0.333:0.333 0.317:0.317:0.317 0.279:0.279:0.279 0.204:0.204:0.204 0.128:0.128:0.128)
	    (0.570:0.570:0.570 0.568:0.568:0.568 0.560:0.560:0.560 0.544:0.544:0.544 0.506:0.506:0.506 0.430:0.430:0.430 0.355:0.355:0.355)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.456:0.456:0.456 0.459:0.459:0.459 0.469:0.469:0.469 0.488:0.488:0.488 0.534:0.534:0.534 0.626:0.626:0.626 0.730:0.730:0.730)
	    (0.450:0.450:0.450 0.452:0.452:0.452 0.462:0.462:0.462 0.482:0.482:0.482 0.528:0.528:0.528 0.620:0.620:0.620 0.723:0.723:0.723)
	    (0.426:0.426:0.426 0.428:0.428:0.428 0.438:0.438:0.438 0.458:0.458:0.458 0.504:0.504:0.504 0.595:0.595:0.595 0.699:0.699:0.699)
	    (0.377:0.377:0.377 0.380:0.380:0.380 0.390:0.390:0.390 0.409:0.409:0.409 0.455:0.455:0.455 0.547:0.547:0.547 0.650:0.650:0.650)
	    (0.264:0.264:0.264 0.266:0.266:0.266 0.276:0.276:0.276 0.296:0.296:0.296 0.342:0.342:0.342 0.434:0.434:0.434 0.537:0.537:0.537)
	    (0.037:0.037:0.037 0.040:0.040:0.040 0.050:0.050:0.050 0.069:0.069:0.069 0.115:0.115:0.115 0.207:0.207:0.207 0.311:0.311:0.311)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.084:0.084:0.084)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.456:0.456:0.456 0.459:0.459:0.459 0.469:0.469:0.469 0.488:0.488:0.488 0.534:0.534:0.534 0.626:0.626:0.626 0.730:0.730:0.730)
	    (0.450:0.450:0.450 0.452:0.452:0.452 0.462:0.462:0.462 0.482:0.482:0.482 0.528:0.528:0.528 0.620:0.620:0.620 0.723:0.723:0.723)
	    (0.426:0.426:0.426 0.428:0.428:0.428 0.438:0.438:0.438 0.458:0.458:0.458 0.504:0.504:0.504 0.595:0.595:0.595 0.699:0.699:0.699)
	    (0.377:0.377:0.377 0.380:0.380:0.380 0.390:0.390:0.390 0.409:0.409:0.409 0.455:0.455:0.455 0.547:0.547:0.547 0.650:0.650:0.650)
	    (0.264:0.264:0.264 0.266:0.266:0.266 0.276:0.276:0.276 0.296:0.296:0.296 0.342:0.342:0.342 0.434:0.434:0.434 0.537:0.537:0.537)
	    (0.037:0.037:0.037 0.040:0.040:0.040 0.050:0.050:0.050 0.069:0.069:0.069 0.115:0.115:0.115 0.207:0.207:0.207 0.311:0.311:0.311)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.084:0.084:0.084)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.007:0.007:0.007 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.013:0.013:0.013 0.008:0.008:0.008 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.037:0.037:0.037 0.032:0.032:0.032 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.086:0.086:0.086 0.081:0.081:0.081 0.061:0.061:0.061 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.199:0.199:0.199 0.194:0.194:0.194 0.174:0.174:0.174 0.134:0.134:0.134 0.042:0.042:0.042 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.426:0.426:0.426 0.421:0.421:0.421 0.401:0.401:0.401 0.361:0.361:0.361 0.268:0.268:0.268 0.083:0.083:0.083 0.000:0.000:0.000)
	    (0.652:0.652:0.652 0.647:0.647:0.647 0.627:0.627:0.627 0.588:0.588:0.588 0.495:0.495:0.495 0.310:0.310:0.310 0.156:0.156:0.156)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.007:0.007:0.007 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.013:0.013:0.013 0.008:0.008:0.008 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.037:0.037:0.037 0.032:0.032:0.032 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.086:0.086:0.086 0.081:0.081:0.081 0.061:0.061:0.061 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.199:0.199:0.199 0.194:0.194:0.194 0.174:0.174:0.174 0.134:0.134:0.134 0.042:0.042:0.042 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.426:0.426:0.426 0.421:0.421:0.421 0.401:0.401:0.401 0.361:0.361:0.361 0.268:0.268:0.268 0.083:0.083:0.083 0.000:0.000:0.000)
	    (0.652:0.652:0.652 0.647:0.647:0.647 0.627:0.627:0.627 0.588:0.588:0.588 0.495:0.495:0.495 0.310:0.310:0.310 0.156:0.156:0.156)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.418:0.418:0.418 0.421:0.421:0.421 0.433:0.433:0.433 0.457:0.457:0.457 0.513:0.513:0.513 0.663:0.663:0.663 0.813:0.813:0.813)
	    (0.412:0.412:0.412 0.415:0.415:0.415 0.427:0.427:0.427 0.451:0.451:0.451 0.507:0.507:0.507 0.657:0.657:0.657 0.806:0.806:0.806)
	    (0.387:0.387:0.387 0.391:0.391:0.391 0.403:0.403:0.403 0.427:0.427:0.427 0.483:0.483:0.483 0.632:0.632:0.632 0.782:0.782:0.782)
	    (0.339:0.339:0.339 0.342:0.342:0.342 0.354:0.354:0.354 0.378:0.378:0.378 0.434:0.434:0.434 0.584:0.584:0.584 0.734:0.734:0.734)
	    (0.226:0.226:0.226 0.229:0.229:0.229 0.241:0.241:0.241 0.265:0.265:0.265 0.321:0.321:0.321 0.471:0.471:0.471 0.620:0.620:0.620)
	    (0.090:0.090:0.090 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.186:0.186:0.186 0.298:0.298:0.298 0.410:0.410:0.410)
	    (0.090:0.090:0.090 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.186:0.186:0.186 0.298:0.298:0.298 0.410:0.410:0.410)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.418:0.418:0.418 0.421:0.421:0.421 0.433:0.433:0.433 0.457:0.457:0.457 0.513:0.513:0.513 0.663:0.663:0.663 0.813:0.813:0.813)
	    (0.412:0.412:0.412 0.415:0.415:0.415 0.427:0.427:0.427 0.451:0.451:0.451 0.507:0.507:0.507 0.657:0.657:0.657 0.806:0.806:0.806)
	    (0.387:0.387:0.387 0.391:0.391:0.391 0.403:0.403:0.403 0.427:0.427:0.427 0.483:0.483:0.483 0.632:0.632:0.632 0.782:0.782:0.782)
	    (0.339:0.339:0.339 0.342:0.342:0.342 0.354:0.354:0.354 0.378:0.378:0.378 0.434:0.434:0.434 0.584:0.584:0.584 0.734:0.734:0.734)
	    (0.226:0.226:0.226 0.229:0.229:0.229 0.241:0.241:0.241 0.265:0.265:0.265 0.321:0.321:0.321 0.471:0.471:0.471 0.620:0.620:0.620)
	    (0.090:0.090:0.090 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.186:0.186:0.186 0.298:0.298:0.298 0.410:0.410:0.410)
	    (0.090:0.090:0.090 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.186:0.186:0.186 0.298:0.298:0.298 0.410:0.410:0.410)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.122:0.122:0.122 0.117:0.117:0.117 0.101:0.101:0.101 0.069:0.069:0.069 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.348:0.348:0.348 0.344:0.344:0.344 0.328:0.328:0.328 0.296:0.296:0.296 0.233:0.233:0.233 0.121:0.121:0.121 0.009:0.009:0.009)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.122:0.122:0.122 0.117:0.117:0.117 0.101:0.101:0.101 0.069:0.069:0.069 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.348:0.348:0.348 0.344:0.344:0.344 0.328:0.328:0.328 0.296:0.296:0.296 0.233:0.233:0.233 0.121:0.121:0.121 0.009:0.009:0.009)
	  )))
TIMING_model (period_tcyc (const (2.75001944407068)))
TIMING_model (tpw_tckl (const (0.3115275)))
TIMING_model (tpw_tckh (const (0.2091)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.105 0.116 0.148 0.201 0.361 0.659 0.958))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.083 0.088 0.106 0.136 0.225 0.392 0.558))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.786:2.786:2.786 2.791:2.791:2.791 2.807:2.807:2.807 2.833:2.833:2.833 2.912:2.912:2.912 3.059:3.059:3.059 3.206:3.206:3.206)
	    (2.792:2.792:2.792 2.797:2.797:2.797 2.813:2.813:2.813 2.839:2.839:2.839 2.918:2.918:2.918 3.066:3.066:3.066 3.213:3.213:3.213)
	    (2.816:2.816:2.816 2.822:2.822:2.822 2.837:2.837:2.837 2.864:2.864:2.864 2.943:2.943:2.943 3.090:3.090:3.090 3.237:3.237:3.237)
	    (2.865:2.865:2.865 2.870:2.870:2.870 2.886:2.886:2.886 2.912:2.912:2.912 2.991:2.991:2.991 3.138:3.138:3.138 3.286:3.286:3.286)
	    (2.978:2.978:2.978 2.983:2.983:2.983 2.999:2.999:2.999 3.025:3.025:3.025 3.104:3.104:3.104 3.252:3.252:3.252 3.399:3.399:3.399)
	    (3.205:3.205:3.205 3.210:3.210:3.210 3.226:3.226:3.226 3.252:3.252:3.252 3.331:3.331:3.331 3.478:3.478:3.478 3.625:3.625:3.625)
	    (3.431:3.431:3.431 3.437:3.437:3.437 3.452:3.452:3.452 3.479:3.479:3.479 3.557:3.557:3.557 3.705:3.705:3.705 3.852:3.852:3.852)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.782:2.782:2.782 2.786:2.786:2.786 2.797:2.797:2.797 2.816:2.816:2.816 2.873:2.873:2.873 2.978:2.978:2.978 3.083:3.083:3.083)
	    (2.789:2.789:2.789 2.793:2.793:2.793 2.804:2.804:2.804 2.823:2.823:2.823 2.879:2.879:2.879 2.984:2.984:2.984 3.090:3.090:3.090)
	    (2.813:2.813:2.813 2.817:2.817:2.817 2.828:2.828:2.828 2.847:2.847:2.847 2.903:2.903:2.903 3.009:3.009:3.009 3.114:3.114:3.114)
	    (2.862:2.862:2.862 2.865:2.865:2.865 2.877:2.877:2.877 2.896:2.896:2.896 2.952:2.952:2.952 3.057:3.057:3.057 3.162:3.162:3.162)
	    (2.975:2.975:2.975 2.979:2.979:2.979 2.990:2.990:2.990 3.009:3.009:3.009 3.065:3.065:3.065 3.170:3.170:3.170 3.276:3.276:3.276)
	    (3.202:3.202:3.202 3.205:3.205:3.205 3.217:3.217:3.217 3.235:3.235:3.235 3.292:3.292:3.292 3.397:3.397:3.397 3.502:3.502:3.502)
	    (3.428:3.428:3.428 3.432:3.432:3.432 3.443:3.443:3.443 3.462:3.462:3.462 3.518:3.518:3.518 3.624:3.624:3.624 3.729:3.729:3.729)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.131:1.131:1.131 1.278:1.278:1.278)
	    (1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.136:1.136:1.136 1.283:1.283:1.283)
	    (1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.155:1.155:1.155 1.302:1.302:1.302)
	    (1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.194:1.194:1.194 1.341:1.341:1.341)
	    (1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.283:1.283:1.283 1.431:1.431:1.431)
	    (1.305:1.305:1.305 1.305:1.305:1.305 1.305:1.305:1.305 1.305:1.305:1.305 1.316:1.316:1.316 1.463:1.463:1.463 1.610:1.610:1.610)
	    (1.445:1.445:1.445 1.445:1.445:1.445 1.445:1.445:1.445 1.445:1.445:1.445 1.495:1.495:1.495 1.643:1.643:1.643 1.790:1.790:1.790)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.048:1.048:1.048 1.079:1.079:1.079)
	    (1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.052:1.052:1.052 1.084:1.084:1.084)
	    (1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.067:1.067:1.067 1.103:1.103:1.103)
	    (1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.097:1.097:1.097 1.142:1.142:1.142)
	    (1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.166:1.166:1.166 1.232:1.232:1.232)
	    (1.305:1.305:1.305 1.305:1.305:1.305 1.305:1.305:1.305 1.305:1.305:1.305 1.305:1.305:1.305 1.306:1.306:1.306 1.411:1.411:1.411)
	    (1.445:1.445:1.445 1.445:1.445:1.445 1.445:1.445:1.445 1.445:1.445:1.445 1.445:1.445:1.445 1.486:1.486:1.486 1.591:1.591:1.591)
	  )))

bus(Q[63:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[11:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(4.000) error(4.000))
 capacitance(0.269)
)
bus(D[63:0] bustype(input)
 capacitance(0.003)
)
bus(WEN[7:0] bustype(input)
 capacitance(0.121)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.081))
pin(VSS pintype(ground) vdrop_limit(0.081))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (A[11] => CLK 01 posedge tch_tas_rise)
setup (A[11] => CLK 10 posedge tch_tas_fall)
hold (A[11] => CLK 01 posedge tch_tah_rise)
hold (A[11] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (D[32] => CLK 01 posedge tch_tds_rise)
setup (D[32] => CLK 10 posedge tch_tds_fall)
hold (D[32] => CLK 01 posedge tch_tdh_rise)
hold (D[32] => CLK 10 posedge tch_tdh_fall)
setup (D[33] => CLK 01 posedge tch_tds_rise)
setup (D[33] => CLK 10 posedge tch_tds_fall)
hold (D[33] => CLK 01 posedge tch_tdh_rise)
hold (D[33] => CLK 10 posedge tch_tdh_fall)
setup (D[34] => CLK 01 posedge tch_tds_rise)
setup (D[34] => CLK 10 posedge tch_tds_fall)
hold (D[34] => CLK 01 posedge tch_tdh_rise)
hold (D[34] => CLK 10 posedge tch_tdh_fall)
setup (D[35] => CLK 01 posedge tch_tds_rise)
setup (D[35] => CLK 10 posedge tch_tds_fall)
hold (D[35] => CLK 01 posedge tch_tdh_rise)
hold (D[35] => CLK 10 posedge tch_tdh_fall)
setup (D[36] => CLK 01 posedge tch_tds_rise)
setup (D[36] => CLK 10 posedge tch_tds_fall)
hold (D[36] => CLK 01 posedge tch_tdh_rise)
hold (D[36] => CLK 10 posedge tch_tdh_fall)
setup (D[37] => CLK 01 posedge tch_tds_rise)
setup (D[37] => CLK 10 posedge tch_tds_fall)
hold (D[37] => CLK 01 posedge tch_tdh_rise)
hold (D[37] => CLK 10 posedge tch_tdh_fall)
setup (D[38] => CLK 01 posedge tch_tds_rise)
setup (D[38] => CLK 10 posedge tch_tds_fall)
hold (D[38] => CLK 01 posedge tch_tdh_rise)
hold (D[38] => CLK 10 posedge tch_tdh_fall)
setup (D[39] => CLK 01 posedge tch_tds_rise)
setup (D[39] => CLK 10 posedge tch_tds_fall)
hold (D[39] => CLK 01 posedge tch_tdh_rise)
hold (D[39] => CLK 10 posedge tch_tdh_fall)
setup (D[40] => CLK 01 posedge tch_tds_rise)
setup (D[40] => CLK 10 posedge tch_tds_fall)
hold (D[40] => CLK 01 posedge tch_tdh_rise)
hold (D[40] => CLK 10 posedge tch_tdh_fall)
setup (D[41] => CLK 01 posedge tch_tds_rise)
setup (D[41] => CLK 10 posedge tch_tds_fall)
hold (D[41] => CLK 01 posedge tch_tdh_rise)
hold (D[41] => CLK 10 posedge tch_tdh_fall)
setup (D[42] => CLK 01 posedge tch_tds_rise)
setup (D[42] => CLK 10 posedge tch_tds_fall)
hold (D[42] => CLK 01 posedge tch_tdh_rise)
hold (D[42] => CLK 10 posedge tch_tdh_fall)
setup (D[43] => CLK 01 posedge tch_tds_rise)
setup (D[43] => CLK 10 posedge tch_tds_fall)
hold (D[43] => CLK 01 posedge tch_tdh_rise)
hold (D[43] => CLK 10 posedge tch_tdh_fall)
setup (D[44] => CLK 01 posedge tch_tds_rise)
setup (D[44] => CLK 10 posedge tch_tds_fall)
hold (D[44] => CLK 01 posedge tch_tdh_rise)
hold (D[44] => CLK 10 posedge tch_tdh_fall)
setup (D[45] => CLK 01 posedge tch_tds_rise)
setup (D[45] => CLK 10 posedge tch_tds_fall)
hold (D[45] => CLK 01 posedge tch_tdh_rise)
hold (D[45] => CLK 10 posedge tch_tdh_fall)
setup (D[46] => CLK 01 posedge tch_tds_rise)
setup (D[46] => CLK 10 posedge tch_tds_fall)
hold (D[46] => CLK 01 posedge tch_tdh_rise)
hold (D[46] => CLK 10 posedge tch_tdh_fall)
setup (D[47] => CLK 01 posedge tch_tds_rise)
setup (D[47] => CLK 10 posedge tch_tds_fall)
hold (D[47] => CLK 01 posedge tch_tdh_rise)
hold (D[47] => CLK 10 posedge tch_tdh_fall)
setup (D[48] => CLK 01 posedge tch_tds_rise)
setup (D[48] => CLK 10 posedge tch_tds_fall)
hold (D[48] => CLK 01 posedge tch_tdh_rise)
hold (D[48] => CLK 10 posedge tch_tdh_fall)
setup (D[49] => CLK 01 posedge tch_tds_rise)
setup (D[49] => CLK 10 posedge tch_tds_fall)
hold (D[49] => CLK 01 posedge tch_tdh_rise)
hold (D[49] => CLK 10 posedge tch_tdh_fall)
setup (D[50] => CLK 01 posedge tch_tds_rise)
setup (D[50] => CLK 10 posedge tch_tds_fall)
hold (D[50] => CLK 01 posedge tch_tdh_rise)
hold (D[50] => CLK 10 posedge tch_tdh_fall)
setup (D[51] => CLK 01 posedge tch_tds_rise)
setup (D[51] => CLK 10 posedge tch_tds_fall)
hold (D[51] => CLK 01 posedge tch_tdh_rise)
hold (D[51] => CLK 10 posedge tch_tdh_fall)
setup (D[52] => CLK 01 posedge tch_tds_rise)
setup (D[52] => CLK 10 posedge tch_tds_fall)
hold (D[52] => CLK 01 posedge tch_tdh_rise)
hold (D[52] => CLK 10 posedge tch_tdh_fall)
setup (D[53] => CLK 01 posedge tch_tds_rise)
setup (D[53] => CLK 10 posedge tch_tds_fall)
hold (D[53] => CLK 01 posedge tch_tdh_rise)
hold (D[53] => CLK 10 posedge tch_tdh_fall)
setup (D[54] => CLK 01 posedge tch_tds_rise)
setup (D[54] => CLK 10 posedge tch_tds_fall)
hold (D[54] => CLK 01 posedge tch_tdh_rise)
hold (D[54] => CLK 10 posedge tch_tdh_fall)
setup (D[55] => CLK 01 posedge tch_tds_rise)
setup (D[55] => CLK 10 posedge tch_tds_fall)
hold (D[55] => CLK 01 posedge tch_tdh_rise)
hold (D[55] => CLK 10 posedge tch_tdh_fall)
setup (D[56] => CLK 01 posedge tch_tds_rise)
setup (D[56] => CLK 10 posedge tch_tds_fall)
hold (D[56] => CLK 01 posedge tch_tdh_rise)
hold (D[56] => CLK 10 posedge tch_tdh_fall)
setup (D[57] => CLK 01 posedge tch_tds_rise)
setup (D[57] => CLK 10 posedge tch_tds_fall)
hold (D[57] => CLK 01 posedge tch_tdh_rise)
hold (D[57] => CLK 10 posedge tch_tdh_fall)
setup (D[58] => CLK 01 posedge tch_tds_rise)
setup (D[58] => CLK 10 posedge tch_tds_fall)
hold (D[58] => CLK 01 posedge tch_tdh_rise)
hold (D[58] => CLK 10 posedge tch_tdh_fall)
setup (D[59] => CLK 01 posedge tch_tds_rise)
setup (D[59] => CLK 10 posedge tch_tds_fall)
hold (D[59] => CLK 01 posedge tch_tdh_rise)
hold (D[59] => CLK 10 posedge tch_tdh_fall)
setup (D[60] => CLK 01 posedge tch_tds_rise)
setup (D[60] => CLK 10 posedge tch_tds_fall)
hold (D[60] => CLK 01 posedge tch_tdh_rise)
hold (D[60] => CLK 10 posedge tch_tdh_fall)
setup (D[61] => CLK 01 posedge tch_tds_rise)
setup (D[61] => CLK 10 posedge tch_tds_fall)
hold (D[61] => CLK 01 posedge tch_tdh_rise)
hold (D[61] => CLK 10 posedge tch_tdh_fall)
setup (D[62] => CLK 01 posedge tch_tds_rise)
setup (D[62] => CLK 10 posedge tch_tds_fall)
hold (D[62] => CLK 01 posedge tch_tdh_rise)
hold (D[62] => CLK 10 posedge tch_tdh_fall)
setup (D[63] => CLK 01 posedge tch_tds_rise)
setup (D[63] => CLK 10 posedge tch_tds_fall)
hold (D[63] => CLK 01 posedge tch_tdh_rise)
hold (D[63] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
setup (WEN[4] => CLK 01 posedge tch_tws_rise)
setup (WEN[4] => CLK 10 posedge tch_tws_fall)
hold (WEN[4] => CLK 01 posedge tch_twh_rise)
hold (WEN[4] => CLK 10 posedge tch_twh_fall)
setup (WEN[5] => CLK 01 posedge tch_tws_rise)
setup (WEN[5] => CLK 10 posedge tch_tws_fall)
hold (WEN[5] => CLK 01 posedge tch_twh_rise)
hold (WEN[5] => CLK 10 posedge tch_twh_fall)
setup (WEN[6] => CLK 01 posedge tch_tws_rise)
setup (WEN[6] => CLK 10 posedge tch_tws_fall)
hold (WEN[6] => CLK 01 posedge tch_twh_rise)
hold (WEN[6] => CLK 10 posedge tch_twh_fall)
setup (WEN[7] => CLK 01 posedge tch_tws_rise)
setup (WEN[7] => CLK 10 posedge tch_tws_fall)
hold (WEN[7] => CLK 01 posedge tch_twh_rise)
hold (WEN[7] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[32] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[32] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[33] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[33] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[34] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[34] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[35] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[35] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[36] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[36] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[37] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[37] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[38] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[38] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[39] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[39] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[40] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[40] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[41] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[41] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[42] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[42] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[43] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[43] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[44] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[44] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[45] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[45] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[46] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[46] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[47] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[47] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[48] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[48] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[49] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[49] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[50] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[50] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[51] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[51] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[52] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[52] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[53] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[53] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[54] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[54] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[55] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[55] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[56] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[56] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[57] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[57] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[58] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[58] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[59] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[59] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[60] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[60] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[61] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[61] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[62] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[62] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[63] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[63] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[32] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[32] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[32] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[32] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[33] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[33] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[33] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[33] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[34] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[34] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[34] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[34] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[35] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[35] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[35] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[35] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[36] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[36] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[36] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[36] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[37] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[37] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[37] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[37] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[38] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[38] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[38] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[38] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[39] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[39] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[39] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[39] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[40] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[40] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[40] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[40] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[41] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[41] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[41] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[41] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[42] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[42] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[42] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[42] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[43] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[43] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[43] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[43] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[44] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[44] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[44] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[44] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[45] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[45] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[45] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[45] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[46] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[46] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[46] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[46] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[47] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[47] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[47] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[47] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[48] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[48] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[48] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[48] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[49] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[49] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[49] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[49] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[50] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[50] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[50] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[50] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[51] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[51] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[51] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[51] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[52] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[52] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[52] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[52] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[53] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[53] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[53] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[53] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[54] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[54] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[54] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[54] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[55] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[55] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[55] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[55] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[56] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[56] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[56] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[56] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[57] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[57] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[57] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[57] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[58] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[58] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[58] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[58] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[59] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[59] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[59] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[59] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[60] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[60] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[60] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[60] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[61] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[61] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[61] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[61] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[62] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[62] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[62] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[62] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[63] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[63] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[63] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[63] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
