/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD4096X32 -words 4096 -bits 32 -frequency 20 -ring_width 2 -mux 16 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD4096X32
 *      Words:          4096
 *      Word Width:     32
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        typical
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 13:03:18Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:03:31Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("typical")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(25.000)
  voltage(1.800)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.800) error(2.800))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD4096X32

Area (835512.042)
CT_TOLERANCE(0.180)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.393:0.393:0.393 0.393:0.393:0.393 0.394:0.394:0.394 0.397:0.397:0.397 0.402:0.402:0.402 0.412:0.412:0.412 0.462:0.462:0.462)
	    (0.388:0.388:0.388 0.389:0.389:0.389 0.390:0.390:0.390 0.393:0.393:0.393 0.398:0.398:0.398 0.408:0.408:0.408 0.458:0.458:0.458)
	    (0.383:0.383:0.383 0.384:0.384:0.384 0.385:0.385:0.385 0.387:0.387:0.387 0.393:0.393:0.393 0.403:0.403:0.403 0.453:0.453:0.453)
	    (0.362:0.362:0.362 0.363:0.363:0.363 0.364:0.364:0.364 0.367:0.367:0.367 0.372:0.372:0.372 0.382:0.382:0.382 0.432:0.432:0.432)
	    (0.321:0.321:0.321 0.321:0.321:0.321 0.322:0.322:0.322 0.325:0.325:0.325 0.331:0.331:0.331 0.341:0.341:0.341 0.391:0.391:0.391)
	    (0.248:0.248:0.248 0.249:0.249:0.249 0.250:0.250:0.250 0.252:0.252:0.252 0.258:0.258:0.258 0.268:0.268:0.268 0.318:0.318:0.318)
	    (0.103:0.103:0.103 0.103:0.103:0.103 0.104:0.104:0.104 0.107:0.107:0.107 0.113:0.113:0.113 0.123:0.123:0.123 0.173:0.173:0.173)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.393:0.393:0.393 0.393:0.393:0.393 0.394:0.394:0.394 0.397:0.397:0.397 0.402:0.402:0.402 0.412:0.412:0.412 0.462:0.462:0.462)
	    (0.388:0.388:0.388 0.389:0.389:0.389 0.390:0.390:0.390 0.393:0.393:0.393 0.398:0.398:0.398 0.408:0.408:0.408 0.458:0.458:0.458)
	    (0.383:0.383:0.383 0.384:0.384:0.384 0.385:0.385:0.385 0.387:0.387:0.387 0.393:0.393:0.393 0.403:0.403:0.403 0.453:0.453:0.453)
	    (0.362:0.362:0.362 0.363:0.363:0.363 0.364:0.364:0.364 0.367:0.367:0.367 0.372:0.372:0.372 0.382:0.382:0.382 0.432:0.432:0.432)
	    (0.321:0.321:0.321 0.321:0.321:0.321 0.322:0.322:0.322 0.325:0.325:0.325 0.331:0.331:0.331 0.341:0.341:0.341 0.391:0.391:0.391)
	    (0.248:0.248:0.248 0.249:0.249:0.249 0.250:0.250:0.250 0.252:0.252:0.252 0.258:0.258:0.258 0.268:0.268:0.268 0.318:0.318:0.318)
	    (0.103:0.103:0.103 0.103:0.103:0.103 0.104:0.104:0.104 0.107:0.107:0.107 0.113:0.113:0.113 0.123:0.123:0.123 0.173:0.173:0.173)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.050:0.050:0.050 0.049:0.049:0.049 0.049:0.049:0.049 0.046:0.046:0.046 0.040:0.040:0.040 0.030:0.030:0.030 0.010:0.010:0.010)
	    (0.054:0.054:0.054 0.053:0.053:0.053 0.053:0.053:0.053 0.050:0.050:0.050 0.044:0.044:0.044 0.034:0.034:0.034 0.014:0.014:0.014)
	    (0.059:0.059:0.059 0.059:0.059:0.059 0.058:0.058:0.058 0.055:0.055:0.055 0.049:0.049:0.049 0.039:0.039:0.039 0.019:0.019:0.019)
	    (0.080:0.080:0.080 0.079:0.079:0.079 0.079:0.079:0.079 0.076:0.076:0.076 0.070:0.070:0.070 0.060:0.060:0.060 0.040:0.040:0.040)
	    (0.121:0.121:0.121 0.121:0.121:0.121 0.120:0.120:0.120 0.117:0.117:0.117 0.112:0.112:0.112 0.102:0.102:0.102 0.082:0.082:0.082)
	    (0.194:0.194:0.194 0.194:0.194:0.194 0.193:0.193:0.193 0.190:0.190:0.190 0.184:0.184:0.184 0.174:0.174:0.174 0.154:0.154:0.154)
	    (0.339:0.339:0.339 0.339:0.339:0.339 0.338:0.338:0.338 0.335:0.335:0.335 0.330:0.330:0.330 0.320:0.320:0.320 0.300:0.300:0.300)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.027:0.027:0.027 0.023:0.023:0.023 0.019:0.019:0.019 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.031:0.031:0.031 0.027:0.027:0.027 0.023:0.023:0.023 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.036:0.036:0.036 0.033:0.033:0.033 0.028:0.028:0.028 0.011:0.011:0.011 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.057:0.057:0.057 0.053:0.053:0.053 0.049:0.049:0.049 0.031:0.031:0.031 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.098:0.098:0.098 0.095:0.095:0.095 0.090:0.090:0.090 0.073:0.073:0.073 0.038:0.038:0.038 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.171:0.171:0.171 0.168:0.168:0.168 0.163:0.163:0.163 0.146:0.146:0.146 0.111:0.111:0.111 0.049:0.049:0.049 0.000:0.000:0.000)
	    (0.316:0.316:0.316 0.313:0.313:0.313 0.308:0.308:0.308 0.291:0.291:0.291 0.256:0.256:0.256 0.195:0.195:0.195 0.072:0.072:0.072)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.409:0.409:0.409 0.410:0.410:0.410 0.411:0.411:0.411 0.415:0.415:0.415 0.424:0.424:0.424 0.442:0.442:0.442 0.595:0.595:0.595)
	    (0.405:0.405:0.405 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.420:0.420:0.420 0.438:0.438:0.438 0.591:0.591:0.591)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.414:0.414:0.414 0.432:0.432:0.432 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.394:0.394:0.394 0.412:0.412:0.412 0.565:0.565:0.565)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.297:0.297:0.297 0.451:0.451:0.451)
	    (0.120:0.120:0.120 0.121:0.121:0.121 0.122:0.122:0.122 0.126:0.126:0.126 0.134:0.134:0.134 0.152:0.152:0.152 0.306:0.306:0.306)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.409:0.409:0.409 0.410:0.410:0.410 0.411:0.411:0.411 0.415:0.415:0.415 0.424:0.424:0.424 0.442:0.442:0.442 0.595:0.595:0.595)
	    (0.405:0.405:0.405 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.420:0.420:0.420 0.438:0.438:0.438 0.591:0.591:0.591)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.414:0.414:0.414 0.432:0.432:0.432 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.394:0.394:0.394 0.412:0.412:0.412 0.565:0.565:0.565)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.297:0.297:0.297 0.451:0.451:0.451)
	    (0.120:0.120:0.120 0.121:0.121:0.121 0.122:0.122:0.122 0.126:0.126:0.126 0.134:0.134:0.134 0.152:0.152:0.152 0.306:0.306:0.306)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.081:0.081:0.081 0.067:0.067:0.067 0.038:0.038:0.038)
	    (0.241:0.241:0.241 0.240:0.240:0.240 0.239:0.239:0.239 0.235:0.235:0.235 0.227:0.227:0.227 0.212:0.212:0.212 0.183:0.183:0.183)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.081:0.081:0.081 0.067:0.067:0.067 0.038:0.038:0.038)
	    (0.241:0.241:0.241 0.240:0.240:0.240 0.239:0.239:0.239 0.235:0.235:0.235 0.227:0.227:0.227 0.212:0.212:0.212 0.183:0.183:0.183)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.238:0.238:0.238 0.239:0.239:0.239 0.241:0.241:0.241 0.247:0.247:0.247 0.259:0.259:0.259 0.312:0.312:0.312 0.513:0.513:0.513)
	    (0.234:0.234:0.234 0.235:0.235:0.235 0.237:0.237:0.237 0.243:0.243:0.243 0.255:0.255:0.255 0.308:0.308:0.308 0.509:0.509:0.509)
	    (0.229:0.229:0.229 0.230:0.230:0.230 0.232:0.232:0.232 0.237:0.237:0.237 0.249:0.249:0.249 0.303:0.303:0.303 0.504:0.504:0.504)
	    (0.208:0.208:0.208 0.209:0.209:0.209 0.211:0.211:0.211 0.217:0.217:0.217 0.229:0.229:0.229 0.282:0.282:0.282 0.483:0.483:0.483)
	    (0.167:0.167:0.167 0.168:0.168:0.168 0.169:0.169:0.169 0.175:0.175:0.175 0.187:0.187:0.187 0.241:0.241:0.241 0.441:0.441:0.441)
	    (0.094:0.094:0.094 0.095:0.095:0.095 0.097:0.097:0.097 0.102:0.102:0.102 0.114:0.114:0.114 0.168:0.168:0.168 0.369:0.369:0.369)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.023:0.023:0.023 0.223:0.223:0.223)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.238:0.238:0.238 0.239:0.239:0.239 0.241:0.241:0.241 0.247:0.247:0.247 0.259:0.259:0.259 0.312:0.312:0.312 0.513:0.513:0.513)
	    (0.234:0.234:0.234 0.235:0.235:0.235 0.237:0.237:0.237 0.243:0.243:0.243 0.255:0.255:0.255 0.308:0.308:0.308 0.509:0.509:0.509)
	    (0.229:0.229:0.229 0.230:0.230:0.230 0.232:0.232:0.232 0.237:0.237:0.237 0.249:0.249:0.249 0.303:0.303:0.303 0.504:0.504:0.504)
	    (0.208:0.208:0.208 0.209:0.209:0.209 0.211:0.211:0.211 0.217:0.217:0.217 0.229:0.229:0.229 0.282:0.282:0.282 0.483:0.483:0.483)
	    (0.167:0.167:0.167 0.168:0.168:0.168 0.169:0.169:0.169 0.175:0.175:0.175 0.187:0.187:0.187 0.241:0.241:0.241 0.441:0.441:0.441)
	    (0.094:0.094:0.094 0.095:0.095:0.095 0.097:0.097:0.097 0.102:0.102:0.102 0.114:0.114:0.114 0.168:0.168:0.168 0.369:0.369:0.369)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.023:0.023:0.023 0.223:0.223:0.223)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.008:0.008:0.008 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.013:0.013:0.013 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.034:0.034:0.034 0.028:0.028:0.028 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.075:0.075:0.075 0.070:0.070:0.070 0.062:0.062:0.062 0.034:0.034:0.034 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.148:0.148:0.148 0.142:0.142:0.142 0.135:0.135:0.135 0.107:0.107:0.107 0.049:0.049:0.049 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.293:0.293:0.293 0.288:0.288:0.288 0.281:0.281:0.281 0.252:0.252:0.252 0.195:0.195:0.195 0.130:0.130:0.130 0.088:0.088:0.088)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.008:0.008:0.008 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.013:0.013:0.013 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.034:0.034:0.034 0.028:0.028:0.028 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.075:0.075:0.075 0.070:0.070:0.070 0.062:0.062:0.062 0.034:0.034:0.034 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.148:0.148:0.148 0.142:0.142:0.142 0.135:0.135:0.135 0.107:0.107:0.107 0.049:0.049:0.049 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.293:0.293:0.293 0.288:0.288:0.288 0.281:0.281:0.281 0.252:0.252:0.252 0.195:0.195:0.195 0.130:0.130:0.130 0.088:0.088:0.088)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.253:0.253:0.253 0.255:0.255:0.255 0.257:0.257:0.257 0.266:0.266:0.266 0.306:0.306:0.306 0.390:0.390:0.390 0.559:0.559:0.559)
	    (0.249:0.249:0.249 0.251:0.251:0.251 0.253:0.253:0.253 0.262:0.262:0.262 0.302:0.302:0.302 0.386:0.386:0.386 0.555:0.555:0.555)
	    (0.244:0.244:0.244 0.245:0.245:0.245 0.248:0.248:0.248 0.257:0.257:0.257 0.296:0.296:0.296 0.381:0.381:0.381 0.550:0.550:0.550)
	    (0.223:0.223:0.223 0.225:0.225:0.225 0.227:0.227:0.227 0.236:0.236:0.236 0.276:0.276:0.276 0.360:0.360:0.360 0.529:0.529:0.529)
	    (0.181:0.181:0.181 0.183:0.183:0.183 0.185:0.185:0.185 0.195:0.195:0.195 0.234:0.234:0.234 0.319:0.319:0.319 0.488:0.488:0.488)
	    (0.136:0.136:0.136 0.137:0.137:0.137 0.140:0.140:0.140 0.149:0.149:0.149 0.167:0.167:0.167 0.246:0.246:0.246 0.415:0.415:0.415)
	    (0.136:0.136:0.136 0.137:0.137:0.137 0.140:0.140:0.140 0.149:0.149:0.149 0.167:0.167:0.167 0.227:0.227:0.227 0.396:0.396:0.396)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.253:0.253:0.253 0.255:0.255:0.255 0.257:0.257:0.257 0.266:0.266:0.266 0.306:0.306:0.306 0.390:0.390:0.390 0.559:0.559:0.559)
	    (0.249:0.249:0.249 0.251:0.251:0.251 0.253:0.253:0.253 0.262:0.262:0.262 0.302:0.302:0.302 0.386:0.386:0.386 0.555:0.555:0.555)
	    (0.244:0.244:0.244 0.245:0.245:0.245 0.248:0.248:0.248 0.257:0.257:0.257 0.296:0.296:0.296 0.381:0.381:0.381 0.550:0.550:0.550)
	    (0.223:0.223:0.223 0.225:0.225:0.225 0.227:0.227:0.227 0.236:0.236:0.236 0.276:0.276:0.276 0.360:0.360:0.360 0.529:0.529:0.529)
	    (0.181:0.181:0.181 0.183:0.183:0.183 0.185:0.185:0.185 0.195:0.195:0.195 0.234:0.234:0.234 0.319:0.319:0.319 0.488:0.488:0.488)
	    (0.136:0.136:0.136 0.137:0.137:0.137 0.140:0.140:0.140 0.149:0.149:0.149 0.167:0.167:0.167 0.246:0.246:0.246 0.415:0.415:0.415)
	    (0.136:0.136:0.136 0.137:0.137:0.137 0.140:0.140:0.140 0.149:0.149:0.149 0.167:0.167:0.167 0.227:0.227:0.227 0.396:0.396:0.396)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.114:0.114:0.114 0.108:0.108:0.108 0.086:0.086:0.086 0.068:0.068:0.068 0.036:0.036:0.036 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.114:0.114:0.114 0.108:0.108:0.108 0.086:0.086:0.086 0.068:0.068:0.068 0.036:0.036:0.036 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (1.3552775358444)))
TIMING_model (tpw_tckl (const (0.180025641025642)))
TIMING_model (tpw_tckh (const (0.1183)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.048 0.055 0.076 0.112 0.218 0.417 0.615))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.046 0.050 0.062 0.081 0.138 0.245 0.353))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.374:1.374:1.374 1.378:1.378:1.378 1.388:1.388:1.388 1.406:1.406:1.406 1.459:1.459:1.459 1.558:1.558:1.558 1.657:1.657:1.657)
	    (1.378:1.378:1.378 1.382:1.382:1.382 1.393:1.393:1.393 1.410:1.410:1.410 1.463:1.463:1.463 1.562:1.562:1.562 1.662:1.662:1.662)
	    (1.384:1.384:1.384 1.387:1.387:1.387 1.398:1.398:1.398 1.415:1.415:1.415 1.468:1.468:1.468 1.568:1.568:1.568 1.667:1.667:1.667)
	    (1.404:1.404:1.404 1.408:1.408:1.408 1.418:1.418:1.418 1.436:1.436:1.436 1.489:1.489:1.489 1.588:1.588:1.588 1.688:1.688:1.688)
	    (1.446:1.446:1.446 1.449:1.449:1.449 1.460:1.460:1.460 1.478:1.478:1.478 1.531:1.531:1.531 1.630:1.630:1.630 1.729:1.729:1.729)
	    (1.518:1.518:1.518 1.522:1.522:1.522 1.533:1.533:1.533 1.550:1.550:1.550 1.603:1.603:1.603 1.703:1.703:1.703 1.802:1.802:1.802)
	    (1.664:1.664:1.664 1.667:1.667:1.667 1.678:1.678:1.678 1.696:1.696:1.696 1.749:1.749:1.749 1.848:1.848:1.848 1.947:1.947:1.947)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.366:1.366:1.366 1.368:1.368:1.368 1.375:1.375:1.375 1.387:1.387:1.387 1.423:1.423:1.423 1.490:1.490:1.490 1.557:1.557:1.557)
	    (1.370:1.370:1.370 1.372:1.372:1.372 1.379:1.379:1.379 1.391:1.391:1.391 1.427:1.427:1.427 1.494:1.494:1.494 1.561:1.561:1.561)
	    (1.375:1.375:1.375 1.377:1.377:1.377 1.385:1.385:1.385 1.397:1.397:1.397 1.433:1.433:1.433 1.500:1.500:1.500 1.567:1.567:1.567)
	    (1.396:1.396:1.396 1.398:1.398:1.398 1.405:1.405:1.405 1.417:1.417:1.417 1.453:1.453:1.453 1.520:1.520:1.520 1.587:1.587:1.587)
	    (1.437:1.437:1.437 1.440:1.440:1.440 1.447:1.447:1.447 1.459:1.459:1.459 1.495:1.495:1.495 1.562:1.562:1.562 1.629:1.629:1.629)
	    (1.510:1.510:1.510 1.512:1.512:1.512 1.520:1.520:1.520 1.532:1.532:1.532 1.568:1.568:1.568 1.635:1.635:1.635 1.702:1.702:1.702)
	    (1.655:1.655:1.655 1.658:1.658:1.658 1.665:1.665:1.665 1.677:1.677:1.677 1.713:1.713:1.713 1.780:1.780:1.780 1.847:1.847:1.847)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.730:0.730:0.730 0.829:0.829:0.829)
	    (0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.735:0.735:0.735 0.835:0.835:0.835)
	    (0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.742:0.742:0.742 0.841:0.841:0.841)
	    (0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.770:0.770:0.770 0.869:0.869:0.869)
	    (0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.726:0.726:0.726 0.825:0.825:0.825 0.924:0.924:0.924)
	    (0.744:0.744:0.744 0.744:0.744:0.744 0.752:0.752:0.752 0.770:0.770:0.770 0.823:0.823:0.823 0.922:0.922:0.922 1.021:1.021:1.021)
	    (0.931:0.931:0.931 0.935:0.935:0.935 0.945:0.945:0.945 0.963:0.963:0.963 1.016:1.016:1.016 1.115:1.115:1.115 1.215:1.215:1.215)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.657:0.657:0.657 0.682:0.682:0.682)
	    (0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.659:0.659:0.659 0.688:0.688:0.688)
	    (0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.662:0.662:0.662 0.695:0.695:0.695)
	    (0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.675:0.675:0.675 0.722:0.722:0.722)
	    (0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.700:0.700:0.700 0.711:0.711:0.711 0.778:0.778:0.778)
	    (0.744:0.744:0.744 0.744:0.744:0.744 0.744:0.744:0.744 0.744:0.744:0.744 0.744:0.744:0.744 0.807:0.807:0.807 0.874:0.874:0.874)
	    (0.876:0.876:0.876 0.879:0.879:0.879 0.886:0.886:0.886 0.898:0.898:0.898 0.934:0.934:0.934 1.001:1.001:1.001 1.068:1.068:1.068)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[11:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.800) error(2.800))
 capacitance(0.274)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.122)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.090))
pin(VSS pintype(ground) vdrop_limit(0.090))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (A[11] => CLK 01 posedge tch_tas_rise)
setup (A[11] => CLK 10 posedge tch_tas_fall)
hold (A[11] => CLK 01 posedge tch_tah_rise)
hold (A[11] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
