/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD8192X64 -words 8192 -bits 64 -frequency 20 -ring_width 2 -mux 16 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD8192X64
 *      Words:          8192
 *      Word Width:     64
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        fast@-40C
 *      Delays:         min
 *
 *      Creation Date:  2002-06-03 11:40:19Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 11:40:32Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("fast@-40C")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(-40.000)
  voltage(1.980)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.200) error(2.200))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD8192X64

Area (2927339.854)
CT_TOLERANCE(0.198)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.491:0.491:0.491 0.491:0.491:0.491 0.491:0.491:0.491 0.490:0.490:0.490 0.489:0.489:0.489 0.495:0.495:0.495 0.578:0.578:0.578)
	    (0.489:0.489:0.489 0.489:0.489:0.489 0.489:0.489:0.489 0.489:0.489:0.489 0.488:0.488:0.488 0.493:0.493:0.493 0.577:0.577:0.577)
	    (0.483:0.483:0.483 0.483:0.483:0.483 0.483:0.483:0.483 0.482:0.482:0.482 0.481:0.481:0.481 0.487:0.487:0.487 0.570:0.570:0.570)
	    (0.475:0.475:0.475 0.475:0.475:0.475 0.474:0.474:0.474 0.474:0.474:0.474 0.473:0.473:0.473 0.478:0.478:0.478 0.562:0.562:0.562)
	    (0.454:0.454:0.454 0.453:0.453:0.453 0.453:0.453:0.453 0.453:0.453:0.453 0.452:0.452:0.452 0.457:0.457:0.457 0.541:0.541:0.541)
	    (0.437:0.437:0.437 0.437:0.437:0.437 0.436:0.436:0.436 0.436:0.436:0.436 0.435:0.435:0.435 0.440:0.440:0.440 0.524:0.524:0.524)
	    (0.399:0.399:0.399 0.399:0.399:0.399 0.398:0.398:0.398 0.398:0.398:0.398 0.397:0.397:0.397 0.402:0.402:0.402 0.486:0.486:0.486)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.491:0.491:0.491 0.491:0.491:0.491 0.491:0.491:0.491 0.490:0.490:0.490 0.489:0.489:0.489 0.495:0.495:0.495 0.578:0.578:0.578)
	    (0.489:0.489:0.489 0.489:0.489:0.489 0.489:0.489:0.489 0.489:0.489:0.489 0.488:0.488:0.488 0.493:0.493:0.493 0.577:0.577:0.577)
	    (0.483:0.483:0.483 0.483:0.483:0.483 0.483:0.483:0.483 0.482:0.482:0.482 0.481:0.481:0.481 0.487:0.487:0.487 0.570:0.570:0.570)
	    (0.475:0.475:0.475 0.475:0.475:0.475 0.474:0.474:0.474 0.474:0.474:0.474 0.473:0.473:0.473 0.478:0.478:0.478 0.562:0.562:0.562)
	    (0.454:0.454:0.454 0.453:0.453:0.453 0.453:0.453:0.453 0.453:0.453:0.453 0.452:0.452:0.452 0.457:0.457:0.457 0.541:0.541:0.541)
	    (0.437:0.437:0.437 0.437:0.437:0.437 0.436:0.436:0.436 0.436:0.436:0.436 0.435:0.435:0.435 0.440:0.440:0.440 0.524:0.524:0.524)
	    (0.399:0.399:0.399 0.399:0.399:0.399 0.398:0.398:0.398 0.398:0.398:0.398 0.397:0.397:0.397 0.402:0.402:0.402 0.486:0.486:0.486)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.045:0.045:0.045 0.045:0.045:0.045 0.046:0.046:0.046 0.046:0.046:0.046 0.047:0.047:0.047 0.048:0.048:0.048 0.050:0.050:0.050)
	    (0.047:0.047:0.047 0.047:0.047:0.047 0.047:0.047:0.047 0.048:0.048:0.048 0.049:0.049:0.049 0.050:0.050:0.050 0.051:0.051:0.051)
	    (0.053:0.053:0.053 0.053:0.053:0.053 0.054:0.054:0.054 0.054:0.054:0.054 0.055:0.055:0.055 0.056:0.056:0.056 0.058:0.058:0.058)
	    (0.062:0.062:0.062 0.062:0.062:0.062 0.062:0.062:0.062 0.063:0.063:0.063 0.064:0.064:0.064 0.064:0.064:0.064 0.066:0.066:0.066)
	    (0.083:0.083:0.083 0.083:0.083:0.083 0.083:0.083:0.083 0.084:0.084:0.084 0.085:0.085:0.085 0.086:0.086:0.086 0.087:0.087:0.087)
	    (0.100:0.100:0.100 0.100:0.100:0.100 0.100:0.100:0.100 0.101:0.101:0.101 0.102:0.102:0.102 0.102:0.102:0.102 0.104:0.104:0.104)
	    (0.138:0.138:0.138 0.138:0.138:0.138 0.138:0.138:0.138 0.139:0.139:0.139 0.140:0.140:0.140 0.140:0.140:0.140 0.142:0.142:0.142)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.032:0.032:0.032 0.028:0.028:0.028 0.014:0.014:0.014 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.034:0.034:0.034 0.030:0.030:0.030 0.016:0.016:0.016 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.040:0.040:0.040 0.036:0.036:0.036 0.022:0.022:0.022 0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.048:0.048:0.048 0.045:0.045:0.045 0.031:0.031:0.031 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.070:0.070:0.070 0.066:0.066:0.066 0.052:0.052:0.052 0.033:0.033:0.033 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.086:0.086:0.086 0.083:0.083:0.083 0.069:0.069:0.069 0.050:0.050:0.050 0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.124:0.124:0.124 0.121:0.121:0.121 0.107:0.107:0.107 0.088:0.088:0.088 0.042:0.042:0.042 0.004:0.004:0.004 0.000:0.000:0.000)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.279:0.279:0.279 0.279:0.279:0.279 0.279:0.279:0.279 0.279:0.279:0.279 0.283:0.283:0.283 0.328:0.328:0.328 0.430:0.430:0.430)
	    (0.277:0.277:0.277 0.277:0.277:0.277 0.277:0.277:0.277 0.278:0.278:0.278 0.281:0.281:0.281 0.326:0.326:0.326 0.428:0.428:0.428)
	    (0.271:0.271:0.271 0.271:0.271:0.271 0.271:0.271:0.271 0.271:0.271:0.271 0.275:0.275:0.275 0.320:0.320:0.320 0.422:0.422:0.422)
	    (0.262:0.262:0.262 0.262:0.262:0.262 0.262:0.262:0.262 0.263:0.263:0.263 0.266:0.266:0.266 0.311:0.311:0.311 0.413:0.413:0.413)
	    (0.241:0.241:0.241 0.241:0.241:0.241 0.241:0.241:0.241 0.242:0.242:0.242 0.245:0.245:0.245 0.290:0.290:0.290 0.392:0.392:0.392)
	    (0.224:0.224:0.224 0.224:0.224:0.224 0.224:0.224:0.224 0.225:0.225:0.225 0.228:0.228:0.228 0.273:0.273:0.273 0.375:0.375:0.375)
	    (0.186:0.186:0.186 0.186:0.186:0.186 0.186:0.186:0.186 0.187:0.187:0.187 0.190:0.190:0.190 0.235:0.235:0.235 0.337:0.337:0.337)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.279:0.279:0.279 0.279:0.279:0.279 0.279:0.279:0.279 0.279:0.279:0.279 0.283:0.283:0.283 0.328:0.328:0.328 0.430:0.430:0.430)
	    (0.277:0.277:0.277 0.277:0.277:0.277 0.277:0.277:0.277 0.278:0.278:0.278 0.281:0.281:0.281 0.326:0.326:0.326 0.428:0.428:0.428)
	    (0.271:0.271:0.271 0.271:0.271:0.271 0.271:0.271:0.271 0.271:0.271:0.271 0.275:0.275:0.275 0.320:0.320:0.320 0.422:0.422:0.422)
	    (0.262:0.262:0.262 0.262:0.262:0.262 0.262:0.262:0.262 0.263:0.263:0.263 0.266:0.266:0.266 0.311:0.311:0.311 0.413:0.413:0.413)
	    (0.241:0.241:0.241 0.241:0.241:0.241 0.241:0.241:0.241 0.242:0.242:0.242 0.245:0.245:0.245 0.290:0.290:0.290 0.392:0.392:0.392)
	    (0.224:0.224:0.224 0.224:0.224:0.224 0.224:0.224:0.224 0.225:0.225:0.225 0.228:0.228:0.228 0.273:0.273:0.273 0.375:0.375:0.375)
	    (0.186:0.186:0.186 0.186:0.186:0.186 0.186:0.186:0.186 0.187:0.187:0.187 0.190:0.190:0.190 0.235:0.235:0.235 0.337:0.337:0.337)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.007:0.007:0.007 0.007:0.007:0.007 0.007:0.007:0.007 0.007:0.007:0.007 0.006:0.006:0.006 0.005:0.005:0.005 0.003:0.003:0.003)
	    (0.024:0.024:0.024 0.024:0.024:0.024 0.024:0.024:0.024 0.024:0.024:0.024 0.022:0.022:0.022 0.022:0.022:0.022 0.020:0.020:0.020)
	    (0.062:0.062:0.062 0.062:0.062:0.062 0.062:0.062:0.062 0.062:0.062:0.062 0.060:0.060:0.060 0.060:0.060:0.060 0.058:0.058:0.058)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.007:0.007:0.007 0.007:0.007:0.007 0.007:0.007:0.007 0.007:0.007:0.007 0.006:0.006:0.006 0.005:0.005:0.005 0.003:0.003:0.003)
	    (0.024:0.024:0.024 0.024:0.024:0.024 0.024:0.024:0.024 0.024:0.024:0.024 0.022:0.022:0.022 0.022:0.022:0.022 0.020:0.020:0.020)
	    (0.062:0.062:0.062 0.062:0.062:0.062 0.062:0.062:0.062 0.062:0.062:0.062 0.060:0.060:0.060 0.060:0.060:0.060 0.058:0.058:0.058)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.128:0.128:0.128 0.128:0.128:0.128 0.129:0.129:0.129 0.131:0.131:0.131 0.170:0.170:0.170 0.228:0.228:0.228 0.359:0.359:0.359)
	    (0.126:0.126:0.126 0.127:0.127:0.127 0.128:0.128:0.128 0.129:0.129:0.129 0.168:0.168:0.168 0.226:0.226:0.226 0.358:0.358:0.358)
	    (0.120:0.120:0.120 0.120:0.120:0.120 0.121:0.121:0.121 0.123:0.123:0.123 0.162:0.162:0.162 0.220:0.220:0.220 0.351:0.351:0.351)
	    (0.112:0.112:0.112 0.112:0.112:0.112 0.113:0.113:0.113 0.114:0.114:0.114 0.153:0.153:0.153 0.212:0.212:0.212 0.343:0.343:0.343)
	    (0.091:0.091:0.091 0.091:0.091:0.091 0.092:0.092:0.092 0.093:0.093:0.093 0.132:0.132:0.132 0.190:0.190:0.190 0.322:0.322:0.322)
	    (0.074:0.074:0.074 0.074:0.074:0.074 0.075:0.075:0.075 0.076:0.076:0.076 0.115:0.115:0.115 0.174:0.174:0.174 0.305:0.305:0.305)
	    (0.036:0.036:0.036 0.036:0.036:0.036 0.037:0.037:0.037 0.038:0.038:0.038 0.077:0.077:0.077 0.136:0.136:0.136 0.267:0.267:0.267)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.128:0.128:0.128 0.128:0.128:0.128 0.129:0.129:0.129 0.131:0.131:0.131 0.170:0.170:0.170 0.228:0.228:0.228 0.359:0.359:0.359)
	    (0.126:0.126:0.126 0.127:0.127:0.127 0.128:0.128:0.128 0.129:0.129:0.129 0.168:0.168:0.168 0.226:0.226:0.226 0.358:0.358:0.358)
	    (0.120:0.120:0.120 0.120:0.120:0.120 0.121:0.121:0.121 0.123:0.123:0.123 0.162:0.162:0.162 0.220:0.220:0.220 0.351:0.351:0.351)
	    (0.112:0.112:0.112 0.112:0.112:0.112 0.113:0.113:0.113 0.114:0.114:0.114 0.153:0.153:0.153 0.212:0.212:0.212 0.343:0.343:0.343)
	    (0.091:0.091:0.091 0.091:0.091:0.091 0.092:0.092:0.092 0.093:0.093:0.093 0.132:0.132:0.132 0.190:0.190:0.190 0.322:0.322:0.322)
	    (0.074:0.074:0.074 0.074:0.074:0.074 0.075:0.075:0.075 0.076:0.076:0.076 0.115:0.115:0.115 0.174:0.174:0.174 0.305:0.305:0.305)
	    (0.036:0.036:0.036 0.036:0.036:0.036 0.037:0.037:0.037 0.038:0.038:0.038 0.077:0.077:0.077 0.136:0.136:0.136 0.267:0.267:0.267)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.051:0.051:0.051 0.045:0.045:0.045 0.023:0.023:0.023 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.053:0.053:0.053 0.047:0.047:0.047 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.059:0.059:0.059 0.053:0.053:0.053 0.031:0.031:0.031 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.067:0.067:0.067 0.062:0.062:0.062 0.040:0.040:0.040 0.011:0.011:0.011 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.089:0.089:0.089 0.083:0.083:0.083 0.061:0.061:0.061 0.032:0.032:0.032 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.105:0.105:0.105 0.100:0.100:0.100 0.078:0.078:0.078 0.049:0.049:0.049 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.143:0.143:0.143 0.138:0.138:0.138 0.116:0.116:0.116 0.087:0.087:0.087 0.041:0.041:0.041 0.038:0.038:0.038 0.033:0.033:0.033)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.051:0.051:0.051 0.045:0.045:0.045 0.023:0.023:0.023 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.053:0.053:0.053 0.047:0.047:0.047 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.059:0.059:0.059 0.053:0.053:0.053 0.031:0.031:0.031 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.067:0.067:0.067 0.062:0.062:0.062 0.040:0.040:0.040 0.011:0.011:0.011 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.089:0.089:0.089 0.083:0.083:0.083 0.061:0.061:0.061 0.032:0.032:0.032 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.105:0.105:0.105 0.100:0.100:0.100 0.078:0.078:0.078 0.049:0.049:0.049 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.143:0.143:0.143 0.138:0.138:0.138 0.116:0.116:0.116 0.087:0.087:0.087 0.041:0.041:0.041 0.038:0.038:0.038 0.033:0.033:0.033)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.146:0.146:0.146 0.147:0.147:0.147 0.151:0.151:0.151 0.156:0.156:0.156 0.214:0.214:0.214 0.263:0.263:0.263 0.374:0.374:0.374)
	    (0.144:0.144:0.144 0.145:0.145:0.145 0.149:0.149:0.149 0.154:0.154:0.154 0.213:0.213:0.213 0.262:0.262:0.262 0.372:0.372:0.372)
	    (0.138:0.138:0.138 0.139:0.139:0.139 0.143:0.143:0.143 0.148:0.148:0.148 0.206:0.206:0.206 0.255:0.255:0.255 0.366:0.366:0.366)
	    (0.129:0.129:0.129 0.130:0.130:0.130 0.134:0.134:0.134 0.139:0.139:0.139 0.198:0.198:0.198 0.247:0.247:0.247 0.358:0.358:0.358)
	    (0.108:0.108:0.108 0.109:0.109:0.109 0.113:0.113:0.113 0.118:0.118:0.118 0.177:0.177:0.177 0.226:0.226:0.226 0.337:0.337:0.337)
	    (0.091:0.091:0.091 0.092:0.092:0.092 0.096:0.096:0.096 0.101:0.101:0.101 0.160:0.160:0.160 0.209:0.209:0.209 0.320:0.320:0.320)
	    (0.091:0.091:0.091 0.092:0.092:0.092 0.096:0.096:0.096 0.101:0.101:0.101 0.160:0.160:0.160 0.209:0.209:0.209 0.320:0.320:0.320)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.146:0.146:0.146 0.147:0.147:0.147 0.151:0.151:0.151 0.156:0.156:0.156 0.214:0.214:0.214 0.263:0.263:0.263 0.374:0.374:0.374)
	    (0.144:0.144:0.144 0.145:0.145:0.145 0.149:0.149:0.149 0.154:0.154:0.154 0.213:0.213:0.213 0.262:0.262:0.262 0.372:0.372:0.372)
	    (0.138:0.138:0.138 0.139:0.139:0.139 0.143:0.143:0.143 0.148:0.148:0.148 0.206:0.206:0.206 0.255:0.255:0.255 0.366:0.366:0.366)
	    (0.129:0.129:0.129 0.130:0.130:0.130 0.134:0.134:0.134 0.139:0.139:0.139 0.198:0.198:0.198 0.247:0.247:0.247 0.358:0.358:0.358)
	    (0.108:0.108:0.108 0.109:0.109:0.109 0.113:0.113:0.113 0.118:0.118:0.118 0.177:0.177:0.177 0.226:0.226:0.226 0.337:0.337:0.337)
	    (0.091:0.091:0.091 0.092:0.092:0.092 0.096:0.096:0.096 0.101:0.101:0.101 0.160:0.160:0.160 0.209:0.209:0.209 0.320:0.320:0.320)
	    (0.091:0.091:0.091 0.092:0.092:0.092 0.096:0.096:0.096 0.101:0.101:0.101 0.160:0.160:0.160 0.209:0.209:0.209 0.320:0.320:0.320)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.018:0.018:0.018 0.007:0.007:0.007 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.018:0.018:0.018 0.007:0.007:0.007 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (1.39059621582943)))
TIMING_model (tpw_tckl (const (0.1122)))
TIMING_model (tpw_tckh (const (0.07948)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.033 0.038 0.053 0.079 0.154 0.294 0.434))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.037 0.039 0.048 0.061 0.102 0.178 0.254))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.110:1.110:1.110 1.112:1.112:1.112 1.120:1.120:1.120 1.129:1.129:1.129 1.155:1.155:1.155 1.205:1.205:1.205 1.255:1.255:1.255)
	    (1.112:1.112:1.112 1.114:1.114:1.114 1.122:1.122:1.122 1.131:1.131:1.131 1.157:1.157:1.157 1.207:1.207:1.207 1.257:1.257:1.257)
	    (1.118:1.118:1.118 1.120:1.120:1.120 1.128:1.128:1.128 1.137:1.137:1.137 1.164:1.164:1.164 1.213:1.213:1.213 1.263:1.263:1.263)
	    (1.126:1.126:1.126 1.129:1.129:1.129 1.136:1.136:1.136 1.145:1.145:1.145 1.172:1.172:1.172 1.222:1.222:1.222 1.271:1.271:1.271)
	    (1.148:1.148:1.148 1.150:1.150:1.150 1.157:1.157:1.157 1.166:1.166:1.166 1.193:1.193:1.193 1.243:1.243:1.243 1.292:1.292:1.292)
	    (1.164:1.164:1.164 1.167:1.167:1.167 1.174:1.174:1.174 1.183:1.183:1.183 1.210:1.210:1.210 1.260:1.260:1.260 1.309:1.309:1.309)
	    (1.202:1.202:1.202 1.205:1.205:1.205 1.212:1.212:1.212 1.221:1.221:1.221 1.248:1.248:1.248 1.298:1.298:1.298 1.347:1.347:1.347)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.110:1.110:1.110 1.112:1.112:1.112 1.120:1.120:1.120 1.129:1.129:1.129 1.155:1.155:1.155 1.205:1.205:1.205 1.255:1.255:1.255)
	    (1.112:1.112:1.112 1.114:1.114:1.114 1.122:1.122:1.122 1.131:1.131:1.131 1.157:1.157:1.157 1.207:1.207:1.207 1.257:1.257:1.257)
	    (1.118:1.118:1.118 1.120:1.120:1.120 1.128:1.128:1.128 1.137:1.137:1.137 1.164:1.164:1.164 1.213:1.213:1.213 1.263:1.263:1.263)
	    (1.126:1.126:1.126 1.129:1.129:1.129 1.136:1.136:1.136 1.145:1.145:1.145 1.172:1.172:1.172 1.222:1.222:1.222 1.271:1.271:1.271)
	    (1.148:1.148:1.148 1.150:1.150:1.150 1.157:1.157:1.157 1.166:1.166:1.166 1.193:1.193:1.193 1.243:1.243:1.243 1.292:1.292:1.292)
	    (1.164:1.164:1.164 1.167:1.167:1.167 1.174:1.174:1.174 1.183:1.183:1.183 1.210:1.210:1.210 1.260:1.260:1.260 1.309:1.309:1.309)
	    (1.202:1.202:1.202 1.205:1.205:1.205 1.212:1.212:1.212 1.221:1.221:1.221 1.248:1.248:1.248 1.298:1.298:1.298 1.347:1.347:1.347)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.424:0.424:0.424 0.427:0.427:0.427 0.434:0.434:0.434 0.447:0.447:0.447 0.484:0.484:0.484 0.512:0.512:0.512 0.512:0.512:0.512)
	    (0.430:0.430:0.430 0.432:0.432:0.432 0.440:0.440:0.440 0.452:0.452:0.452 0.490:0.490:0.490 0.514:0.514:0.514 0.514:0.514:0.514)
	    (0.451:0.451:0.451 0.453:0.453:0.453 0.461:0.461:0.461 0.473:0.473:0.473 0.510:0.510:0.510 0.520:0.520:0.520 0.520:0.520:0.520)
	    (0.479:0.479:0.479 0.481:0.481:0.481 0.489:0.489:0.489 0.501:0.501:0.501 0.527:0.527:0.527 0.527:0.527:0.527 0.527:0.527:0.527)
	    (0.547:0.547:0.547 0.547:0.547:0.547 0.547:0.547:0.547 0.547:0.547:0.547 0.547:0.547:0.547 0.547:0.547:0.547 0.547:0.547:0.547)
	    (0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563)
	    (0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.388:0.388:0.388 0.390:0.390:0.390 0.395:0.395:0.395 0.404:0.404:0.404 0.430:0.430:0.430 0.480:0.480:0.480 0.512:0.512:0.512)
	    (0.393:0.393:0.393 0.395:0.395:0.395 0.400:0.400:0.400 0.409:0.409:0.409 0.436:0.436:0.436 0.486:0.486:0.486 0.514:0.514:0.514)
	    (0.414:0.414:0.414 0.416:0.416:0.416 0.421:0.421:0.421 0.430:0.430:0.430 0.457:0.457:0.457 0.506:0.506:0.506 0.520:0.520:0.520)
	    (0.442:0.442:0.442 0.444:0.444:0.444 0.449:0.449:0.449 0.458:0.458:0.458 0.485:0.485:0.485 0.527:0.527:0.527 0.527:0.527:0.527)
	    (0.511:0.511:0.511 0.513:0.513:0.513 0.519:0.519:0.519 0.527:0.527:0.527 0.547:0.547:0.547 0.547:0.547:0.547 0.547:0.547:0.547)
	    (0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563 0.563:0.563:0.563)
	    (0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598 0.598:0.598:0.598)
	  )))

bus(Q[63:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[12:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.200) error(2.200))
 capacitance(0.277)
)
bus(D[63:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[7:0] bustype(input)
 capacitance(0.123)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.099))
pin(VSS pintype(ground) vdrop_limit(0.099))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (A[11] => CLK 01 posedge tch_tas_rise)
setup (A[11] => CLK 10 posedge tch_tas_fall)
hold (A[11] => CLK 01 posedge tch_tah_rise)
hold (A[11] => CLK 10 posedge tch_tah_fall)
setup (A[12] => CLK 01 posedge tch_tas_rise)
setup (A[12] => CLK 10 posedge tch_tas_fall)
hold (A[12] => CLK 01 posedge tch_tah_rise)
hold (A[12] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (D[32] => CLK 01 posedge tch_tds_rise)
setup (D[32] => CLK 10 posedge tch_tds_fall)
hold (D[32] => CLK 01 posedge tch_tdh_rise)
hold (D[32] => CLK 10 posedge tch_tdh_fall)
setup (D[33] => CLK 01 posedge tch_tds_rise)
setup (D[33] => CLK 10 posedge tch_tds_fall)
hold (D[33] => CLK 01 posedge tch_tdh_rise)
hold (D[33] => CLK 10 posedge tch_tdh_fall)
setup (D[34] => CLK 01 posedge tch_tds_rise)
setup (D[34] => CLK 10 posedge tch_tds_fall)
hold (D[34] => CLK 01 posedge tch_tdh_rise)
hold (D[34] => CLK 10 posedge tch_tdh_fall)
setup (D[35] => CLK 01 posedge tch_tds_rise)
setup (D[35] => CLK 10 posedge tch_tds_fall)
hold (D[35] => CLK 01 posedge tch_tdh_rise)
hold (D[35] => CLK 10 posedge tch_tdh_fall)
setup (D[36] => CLK 01 posedge tch_tds_rise)
setup (D[36] => CLK 10 posedge tch_tds_fall)
hold (D[36] => CLK 01 posedge tch_tdh_rise)
hold (D[36] => CLK 10 posedge tch_tdh_fall)
setup (D[37] => CLK 01 posedge tch_tds_rise)
setup (D[37] => CLK 10 posedge tch_tds_fall)
hold (D[37] => CLK 01 posedge tch_tdh_rise)
hold (D[37] => CLK 10 posedge tch_tdh_fall)
setup (D[38] => CLK 01 posedge tch_tds_rise)
setup (D[38] => CLK 10 posedge tch_tds_fall)
hold (D[38] => CLK 01 posedge tch_tdh_rise)
hold (D[38] => CLK 10 posedge tch_tdh_fall)
setup (D[39] => CLK 01 posedge tch_tds_rise)
setup (D[39] => CLK 10 posedge tch_tds_fall)
hold (D[39] => CLK 01 posedge tch_tdh_rise)
hold (D[39] => CLK 10 posedge tch_tdh_fall)
setup (D[40] => CLK 01 posedge tch_tds_rise)
setup (D[40] => CLK 10 posedge tch_tds_fall)
hold (D[40] => CLK 01 posedge tch_tdh_rise)
hold (D[40] => CLK 10 posedge tch_tdh_fall)
setup (D[41] => CLK 01 posedge tch_tds_rise)
setup (D[41] => CLK 10 posedge tch_tds_fall)
hold (D[41] => CLK 01 posedge tch_tdh_rise)
hold (D[41] => CLK 10 posedge tch_tdh_fall)
setup (D[42] => CLK 01 posedge tch_tds_rise)
setup (D[42] => CLK 10 posedge tch_tds_fall)
hold (D[42] => CLK 01 posedge tch_tdh_rise)
hold (D[42] => CLK 10 posedge tch_tdh_fall)
setup (D[43] => CLK 01 posedge tch_tds_rise)
setup (D[43] => CLK 10 posedge tch_tds_fall)
hold (D[43] => CLK 01 posedge tch_tdh_rise)
hold (D[43] => CLK 10 posedge tch_tdh_fall)
setup (D[44] => CLK 01 posedge tch_tds_rise)
setup (D[44] => CLK 10 posedge tch_tds_fall)
hold (D[44] => CLK 01 posedge tch_tdh_rise)
hold (D[44] => CLK 10 posedge tch_tdh_fall)
setup (D[45] => CLK 01 posedge tch_tds_rise)
setup (D[45] => CLK 10 posedge tch_tds_fall)
hold (D[45] => CLK 01 posedge tch_tdh_rise)
hold (D[45] => CLK 10 posedge tch_tdh_fall)
setup (D[46] => CLK 01 posedge tch_tds_rise)
setup (D[46] => CLK 10 posedge tch_tds_fall)
hold (D[46] => CLK 01 posedge tch_tdh_rise)
hold (D[46] => CLK 10 posedge tch_tdh_fall)
setup (D[47] => CLK 01 posedge tch_tds_rise)
setup (D[47] => CLK 10 posedge tch_tds_fall)
hold (D[47] => CLK 01 posedge tch_tdh_rise)
hold (D[47] => CLK 10 posedge tch_tdh_fall)
setup (D[48] => CLK 01 posedge tch_tds_rise)
setup (D[48] => CLK 10 posedge tch_tds_fall)
hold (D[48] => CLK 01 posedge tch_tdh_rise)
hold (D[48] => CLK 10 posedge tch_tdh_fall)
setup (D[49] => CLK 01 posedge tch_tds_rise)
setup (D[49] => CLK 10 posedge tch_tds_fall)
hold (D[49] => CLK 01 posedge tch_tdh_rise)
hold (D[49] => CLK 10 posedge tch_tdh_fall)
setup (D[50] => CLK 01 posedge tch_tds_rise)
setup (D[50] => CLK 10 posedge tch_tds_fall)
hold (D[50] => CLK 01 posedge tch_tdh_rise)
hold (D[50] => CLK 10 posedge tch_tdh_fall)
setup (D[51] => CLK 01 posedge tch_tds_rise)
setup (D[51] => CLK 10 posedge tch_tds_fall)
hold (D[51] => CLK 01 posedge tch_tdh_rise)
hold (D[51] => CLK 10 posedge tch_tdh_fall)
setup (D[52] => CLK 01 posedge tch_tds_rise)
setup (D[52] => CLK 10 posedge tch_tds_fall)
hold (D[52] => CLK 01 posedge tch_tdh_rise)
hold (D[52] => CLK 10 posedge tch_tdh_fall)
setup (D[53] => CLK 01 posedge tch_tds_rise)
setup (D[53] => CLK 10 posedge tch_tds_fall)
hold (D[53] => CLK 01 posedge tch_tdh_rise)
hold (D[53] => CLK 10 posedge tch_tdh_fall)
setup (D[54] => CLK 01 posedge tch_tds_rise)
setup (D[54] => CLK 10 posedge tch_tds_fall)
hold (D[54] => CLK 01 posedge tch_tdh_rise)
hold (D[54] => CLK 10 posedge tch_tdh_fall)
setup (D[55] => CLK 01 posedge tch_tds_rise)
setup (D[55] => CLK 10 posedge tch_tds_fall)
hold (D[55] => CLK 01 posedge tch_tdh_rise)
hold (D[55] => CLK 10 posedge tch_tdh_fall)
setup (D[56] => CLK 01 posedge tch_tds_rise)
setup (D[56] => CLK 10 posedge tch_tds_fall)
hold (D[56] => CLK 01 posedge tch_tdh_rise)
hold (D[56] => CLK 10 posedge tch_tdh_fall)
setup (D[57] => CLK 01 posedge tch_tds_rise)
setup (D[57] => CLK 10 posedge tch_tds_fall)
hold (D[57] => CLK 01 posedge tch_tdh_rise)
hold (D[57] => CLK 10 posedge tch_tdh_fall)
setup (D[58] => CLK 01 posedge tch_tds_rise)
setup (D[58] => CLK 10 posedge tch_tds_fall)
hold (D[58] => CLK 01 posedge tch_tdh_rise)
hold (D[58] => CLK 10 posedge tch_tdh_fall)
setup (D[59] => CLK 01 posedge tch_tds_rise)
setup (D[59] => CLK 10 posedge tch_tds_fall)
hold (D[59] => CLK 01 posedge tch_tdh_rise)
hold (D[59] => CLK 10 posedge tch_tdh_fall)
setup (D[60] => CLK 01 posedge tch_tds_rise)
setup (D[60] => CLK 10 posedge tch_tds_fall)
hold (D[60] => CLK 01 posedge tch_tdh_rise)
hold (D[60] => CLK 10 posedge tch_tdh_fall)
setup (D[61] => CLK 01 posedge tch_tds_rise)
setup (D[61] => CLK 10 posedge tch_tds_fall)
hold (D[61] => CLK 01 posedge tch_tdh_rise)
hold (D[61] => CLK 10 posedge tch_tdh_fall)
setup (D[62] => CLK 01 posedge tch_tds_rise)
setup (D[62] => CLK 10 posedge tch_tds_fall)
hold (D[62] => CLK 01 posedge tch_tdh_rise)
hold (D[62] => CLK 10 posedge tch_tdh_fall)
setup (D[63] => CLK 01 posedge tch_tds_rise)
setup (D[63] => CLK 10 posedge tch_tds_fall)
hold (D[63] => CLK 01 posedge tch_tdh_rise)
hold (D[63] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
setup (WEN[4] => CLK 01 posedge tch_tws_rise)
setup (WEN[4] => CLK 10 posedge tch_tws_fall)
hold (WEN[4] => CLK 01 posedge tch_twh_rise)
hold (WEN[4] => CLK 10 posedge tch_twh_fall)
setup (WEN[5] => CLK 01 posedge tch_tws_rise)
setup (WEN[5] => CLK 10 posedge tch_tws_fall)
hold (WEN[5] => CLK 01 posedge tch_twh_rise)
hold (WEN[5] => CLK 10 posedge tch_twh_fall)
setup (WEN[6] => CLK 01 posedge tch_tws_rise)
setup (WEN[6] => CLK 10 posedge tch_tws_fall)
hold (WEN[6] => CLK 01 posedge tch_twh_rise)
hold (WEN[6] => CLK 10 posedge tch_twh_fall)
setup (WEN[7] => CLK 01 posedge tch_tws_rise)
setup (WEN[7] => CLK 10 posedge tch_tws_fall)
hold (WEN[7] => CLK 01 posedge tch_twh_rise)
hold (WEN[7] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[32] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[32] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[33] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[33] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[34] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[34] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[35] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[35] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[36] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[36] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[37] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[37] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[38] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[38] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[39] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[39] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[40] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[40] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[41] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[41] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[42] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[42] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[43] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[43] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[44] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[44] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[45] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[45] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[46] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[46] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[47] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[47] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[48] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[48] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[49] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[49] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[50] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[50] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[51] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[51] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[52] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[52] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[53] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[53] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[54] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[54] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[55] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[55] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[56] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[56] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[57] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[57] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[58] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[58] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[59] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[59] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[60] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[60] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[61] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[61] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[62] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[62] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[63] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[63] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[32] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[32] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[32] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[32] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[33] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[33] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[33] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[33] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[34] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[34] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[34] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[34] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[35] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[35] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[35] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[35] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[36] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[36] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[36] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[36] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[37] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[37] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[37] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[37] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[38] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[38] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[38] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[38] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[39] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[39] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[39] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[39] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[40] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[40] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[40] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[40] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[41] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[41] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[41] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[41] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[42] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[42] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[42] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[42] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[43] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[43] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[43] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[43] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[44] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[44] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[44] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[44] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[45] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[45] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[45] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[45] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[46] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[46] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[46] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[46] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[47] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[47] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[47] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[47] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[48] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[48] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[48] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[48] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[49] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[49] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[49] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[49] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[50] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[50] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[50] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[50] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[51] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[51] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[51] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[51] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[52] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[52] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[52] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[52] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[53] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[53] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[53] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[53] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[54] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[54] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[54] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[54] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[55] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[55] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[55] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[55] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[56] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[56] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[56] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[56] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[57] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[57] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[57] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[57] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[58] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[58] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[58] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[58] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[59] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[59] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[59] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[59] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[60] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[60] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[60] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[60] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[61] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[61] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[61] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[61] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[62] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[62] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[62] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[62] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[63] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[63] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[63] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[63] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
