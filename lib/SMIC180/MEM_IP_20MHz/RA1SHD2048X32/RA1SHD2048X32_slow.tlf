/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD2048X32 -words 2048 -bits 32 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD2048X32
 *      Words:          2048
 *      Word Width:     32
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 12:59:11Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 12:59:27Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("slow")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(125.000)
  voltage(1.620)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(4.000) error(4.000))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD2048X32

Area (460541.196)
CT_TOLERANCE(0.162)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.729:0.729:0.729 0.730:0.730:0.730 0.737:0.737:0.737 0.751:0.751:0.751 0.782:0.782:0.782 0.845:0.845:0.845 0.908:0.908:0.908)
	    (0.722:0.722:0.722 0.724:0.724:0.724 0.731:0.731:0.731 0.744:0.744:0.744 0.776:0.776:0.776 0.839:0.839:0.839 0.902:0.902:0.902)
	    (0.698:0.698:0.698 0.700:0.700:0.700 0.706:0.706:0.706 0.720:0.720:0.720 0.751:0.751:0.751 0.815:0.815:0.815 0.878:0.878:0.878)
	    (0.649:0.649:0.649 0.651:0.651:0.651 0.658:0.658:0.658 0.671:0.671:0.671 0.703:0.703:0.703 0.766:0.766:0.766 0.829:0.829:0.829)
	    (0.536:0.536:0.536 0.538:0.538:0.538 0.544:0.544:0.544 0.558:0.558:0.558 0.590:0.590:0.590 0.653:0.653:0.653 0.716:0.716:0.716)
	    (0.309:0.309:0.309 0.311:0.311:0.311 0.318:0.318:0.318 0.331:0.331:0.331 0.363:0.363:0.363 0.426:0.426:0.426 0.489:0.489:0.489)
	    (0.083:0.083:0.083 0.085:0.085:0.085 0.091:0.091:0.091 0.105:0.105:0.105 0.136:0.136:0.136 0.200:0.200:0.200 0.263:0.263:0.263)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.729:0.729:0.729 0.730:0.730:0.730 0.737:0.737:0.737 0.751:0.751:0.751 0.782:0.782:0.782 0.845:0.845:0.845 0.908:0.908:0.908)
	    (0.722:0.722:0.722 0.724:0.724:0.724 0.731:0.731:0.731 0.744:0.744:0.744 0.776:0.776:0.776 0.839:0.839:0.839 0.902:0.902:0.902)
	    (0.698:0.698:0.698 0.700:0.700:0.700 0.706:0.706:0.706 0.720:0.720:0.720 0.751:0.751:0.751 0.815:0.815:0.815 0.878:0.878:0.878)
	    (0.649:0.649:0.649 0.651:0.651:0.651 0.658:0.658:0.658 0.671:0.671:0.671 0.703:0.703:0.703 0.766:0.766:0.766 0.829:0.829:0.829)
	    (0.536:0.536:0.536 0.538:0.538:0.538 0.544:0.544:0.544 0.558:0.558:0.558 0.590:0.590:0.590 0.653:0.653:0.653 0.716:0.716:0.716)
	    (0.309:0.309:0.309 0.311:0.311:0.311 0.318:0.318:0.318 0.331:0.331:0.331 0.363:0.363:0.363 0.426:0.426:0.426 0.489:0.489:0.489)
	    (0.083:0.083:0.083 0.085:0.085:0.085 0.091:0.091:0.091 0.105:0.105:0.105 0.136:0.136:0.136 0.200:0.200:0.200 0.263:0.263:0.263)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.052:0.052:0.052 0.050:0.050:0.050 0.044:0.044:0.044 0.030:0.030:0.030 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.059:0.059:0.059 0.057:0.057:0.057 0.050:0.050:0.050 0.037:0.037:0.037 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.083:0.083:0.083 0.081:0.081:0.081 0.074:0.074:0.074 0.061:0.061:0.061 0.029:0.029:0.029 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.132:0.132:0.132 0.130:0.130:0.130 0.123:0.123:0.123 0.109:0.109:0.109 0.078:0.078:0.078 0.015:0.015:0.015 0.000:0.000:0.000)
	    (0.245:0.245:0.245 0.243:0.243:0.243 0.236:0.236:0.236 0.223:0.223:0.223 0.191:0.191:0.191 0.128:0.128:0.128 0.065:0.065:0.065)
	    (0.471:0.471:0.471 0.470:0.470:0.470 0.463:0.463:0.463 0.449:0.449:0.449 0.418:0.418:0.418 0.355:0.355:0.355 0.291:0.291:0.291)
	    (0.698:0.698:0.698 0.696:0.696:0.696 0.689:0.689:0.689 0.676:0.676:0.676 0.644:0.644:0.644 0.581:0.581:0.581 0.518:0.518:0.518)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.012:0.012:0.012 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.019:0.019:0.019 0.016:0.016:0.016 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.043:0.043:0.043 0.040:0.040:0.040 0.029:0.029:0.029 0.008:0.008:0.008 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.091:0.091:0.091 0.088:0.088:0.088 0.078:0.078:0.078 0.056:0.056:0.056 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.205:0.205:0.205 0.202:0.202:0.202 0.191:0.191:0.191 0.169:0.169:0.169 0.119:0.119:0.119 0.018:0.018:0.018 0.000:0.000:0.000)
	    (0.431:0.431:0.431 0.428:0.428:0.428 0.417:0.417:0.417 0.396:0.396:0.396 0.345:0.345:0.345 0.245:0.245:0.245 0.144:0.144:0.144)
	    (0.658:0.658:0.658 0.655:0.655:0.655 0.644:0.644:0.644 0.622:0.622:0.622 0.572:0.572:0.572 0.471:0.471:0.471 0.370:0.370:0.370)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.661:0.661:0.661 0.663:0.663:0.663 0.671:0.671:0.671 0.687:0.687:0.687 0.725:0.725:0.725 0.801:0.801:0.801 0.889:0.889:0.889)
	    (0.654:0.654:0.654 0.657:0.657:0.657 0.665:0.665:0.665 0.681:0.681:0.681 0.719:0.719:0.719 0.794:0.794:0.794 0.883:0.883:0.883)
	    (0.630:0.630:0.630 0.632:0.632:0.632 0.640:0.640:0.640 0.657:0.657:0.657 0.694:0.694:0.694 0.770:0.770:0.770 0.858:0.858:0.858)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.721:0.721:0.721 0.810:0.810:0.810)
	    (0.468:0.468:0.468 0.470:0.470:0.470 0.479:0.479:0.479 0.495:0.495:0.495 0.532:0.532:0.532 0.608:0.608:0.608 0.697:0.697:0.697)
	    (0.242:0.242:0.242 0.244:0.244:0.244 0.252:0.252:0.252 0.268:0.268:0.268 0.306:0.306:0.306 0.381:0.381:0.381 0.470:0.470:0.470)
	    (0.015:0.015:0.015 0.017:0.017:0.017 0.025:0.025:0.025 0.042:0.042:0.042 0.079:0.079:0.079 0.155:0.155:0.155 0.243:0.243:0.243)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.661:0.661:0.661 0.663:0.663:0.663 0.671:0.671:0.671 0.687:0.687:0.687 0.725:0.725:0.725 0.801:0.801:0.801 0.889:0.889:0.889)
	    (0.654:0.654:0.654 0.657:0.657:0.657 0.665:0.665:0.665 0.681:0.681:0.681 0.719:0.719:0.719 0.794:0.794:0.794 0.883:0.883:0.883)
	    (0.630:0.630:0.630 0.632:0.632:0.632 0.640:0.640:0.640 0.657:0.657:0.657 0.694:0.694:0.694 0.770:0.770:0.770 0.858:0.858:0.858)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.721:0.721:0.721 0.810:0.810:0.810)
	    (0.468:0.468:0.468 0.470:0.470:0.470 0.479:0.479:0.479 0.495:0.495:0.495 0.532:0.532:0.532 0.608:0.608:0.608 0.697:0.697:0.697)
	    (0.242:0.242:0.242 0.244:0.244:0.244 0.252:0.252:0.252 0.268:0.268:0.268 0.306:0.306:0.306 0.381:0.381:0.381 0.470:0.470:0.470)
	    (0.015:0.015:0.015 0.017:0.017:0.017 0.025:0.025:0.025 0.042:0.042:0.042 0.079:0.079:0.079 0.155:0.155:0.155 0.243:0.243:0.243)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.117:0.117:0.117 0.115:0.115:0.115 0.107:0.107:0.107 0.090:0.090:0.090 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.343:0.343:0.343 0.341:0.341:0.341 0.333:0.333:0.333 0.317:0.317:0.317 0.279:0.279:0.279 0.204:0.204:0.204 0.128:0.128:0.128)
	    (0.570:0.570:0.570 0.568:0.568:0.568 0.560:0.560:0.560 0.544:0.544:0.544 0.506:0.506:0.506 0.430:0.430:0.430 0.355:0.355:0.355)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.117:0.117:0.117 0.115:0.115:0.115 0.107:0.107:0.107 0.090:0.090:0.090 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.343:0.343:0.343 0.341:0.341:0.341 0.333:0.333:0.333 0.317:0.317:0.317 0.279:0.279:0.279 0.204:0.204:0.204 0.128:0.128:0.128)
	    (0.570:0.570:0.570 0.568:0.568:0.568 0.560:0.560:0.560 0.544:0.544:0.544 0.506:0.506:0.506 0.430:0.430:0.430 0.355:0.355:0.355)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.414:0.414:0.414 0.417:0.417:0.417 0.426:0.426:0.426 0.446:0.446:0.446 0.492:0.492:0.492 0.584:0.584:0.584 0.745:0.745:0.745)
	    (0.408:0.408:0.408 0.410:0.410:0.410 0.420:0.420:0.420 0.440:0.440:0.440 0.486:0.486:0.486 0.577:0.577:0.577 0.739:0.739:0.739)
	    (0.383:0.383:0.383 0.386:0.386:0.386 0.396:0.396:0.396 0.415:0.415:0.415 0.461:0.461:0.461 0.553:0.553:0.553 0.715:0.715:0.715)
	    (0.335:0.335:0.335 0.337:0.337:0.337 0.347:0.347:0.347 0.367:0.367:0.367 0.413:0.413:0.413 0.504:0.504:0.504 0.666:0.666:0.666)
	    (0.221:0.221:0.221 0.224:0.224:0.224 0.234:0.234:0.234 0.254:0.254:0.254 0.299:0.299:0.299 0.391:0.391:0.391 0.553:0.553:0.553)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.007:0.007:0.007 0.027:0.027:0.027 0.073:0.073:0.073 0.165:0.165:0.165 0.326:0.326:0.326)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.100:0.100:0.100)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.414:0.414:0.414 0.417:0.417:0.417 0.426:0.426:0.426 0.446:0.446:0.446 0.492:0.492:0.492 0.584:0.584:0.584 0.745:0.745:0.745)
	    (0.408:0.408:0.408 0.410:0.410:0.410 0.420:0.420:0.420 0.440:0.440:0.440 0.486:0.486:0.486 0.577:0.577:0.577 0.739:0.739:0.739)
	    (0.383:0.383:0.383 0.386:0.386:0.386 0.396:0.396:0.396 0.415:0.415:0.415 0.461:0.461:0.461 0.553:0.553:0.553 0.715:0.715:0.715)
	    (0.335:0.335:0.335 0.337:0.337:0.337 0.347:0.347:0.347 0.367:0.367:0.367 0.413:0.413:0.413 0.504:0.504:0.504 0.666:0.666:0.666)
	    (0.221:0.221:0.221 0.224:0.224:0.224 0.234:0.234:0.234 0.254:0.254:0.254 0.299:0.299:0.299 0.391:0.391:0.391 0.553:0.553:0.553)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.007:0.007:0.007 0.027:0.027:0.027 0.073:0.073:0.073 0.165:0.165:0.165 0.326:0.326:0.326)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.100:0.100:0.100)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.030:0.030:0.030 0.025:0.025:0.025 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.144:0.144:0.144 0.138:0.138:0.138 0.118:0.118:0.118 0.079:0.079:0.079 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.370:0.370:0.370 0.365:0.365:0.365 0.345:0.345:0.345 0.305:0.305:0.305 0.213:0.213:0.213 0.027:0.027:0.027 0.000:0.000:0.000)
	    (0.597:0.597:0.597 0.591:0.591:0.591 0.572:0.572:0.572 0.532:0.532:0.532 0.439:0.439:0.439 0.254:0.254:0.254 0.145:0.145:0.145)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.030:0.030:0.030 0.025:0.025:0.025 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.144:0.144:0.144 0.138:0.138:0.138 0.118:0.118:0.118 0.079:0.079:0.079 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.370:0.370:0.370 0.365:0.365:0.365 0.345:0.345:0.345 0.305:0.305:0.305 0.213:0.213:0.213 0.027:0.027:0.027 0.000:0.000:0.000)
	    (0.597:0.597:0.597 0.591:0.591:0.591 0.572:0.572:0.572 0.532:0.532:0.532 0.439:0.439:0.439 0.254:0.254:0.254 0.145:0.145:0.145)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.421:0.421:0.421 0.424:0.424:0.424 0.436:0.436:0.436 0.467:0.467:0.467 0.542:0.542:0.542 0.692:0.692:0.692 0.842:0.842:0.842)
	    (0.414:0.414:0.414 0.418:0.418:0.418 0.430:0.430:0.430 0.461:0.461:0.461 0.536:0.536:0.536 0.685:0.685:0.685 0.835:0.835:0.835)
	    (0.390:0.390:0.390 0.393:0.393:0.393 0.405:0.405:0.405 0.436:0.436:0.436 0.511:0.511:0.511 0.661:0.661:0.661 0.811:0.811:0.811)
	    (0.342:0.342:0.342 0.345:0.345:0.345 0.357:0.357:0.357 0.388:0.388:0.388 0.463:0.463:0.463 0.613:0.613:0.613 0.762:0.762:0.762)
	    (0.228:0.228:0.228 0.232:0.232:0.232 0.244:0.244:0.244 0.275:0.275:0.275 0.349:0.349:0.349 0.499:0.499:0.499 0.649:0.649:0.649)
	    (0.126:0.126:0.126 0.129:0.129:0.129 0.141:0.141:0.141 0.165:0.165:0.165 0.221:0.221:0.221 0.333:0.333:0.333 0.455:0.455:0.455)
	    (0.126:0.126:0.126 0.129:0.129:0.129 0.141:0.141:0.141 0.165:0.165:0.165 0.221:0.221:0.221 0.333:0.333:0.333 0.455:0.455:0.455)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.421:0.421:0.421 0.424:0.424:0.424 0.436:0.436:0.436 0.467:0.467:0.467 0.542:0.542:0.542 0.692:0.692:0.692 0.842:0.842:0.842)
	    (0.414:0.414:0.414 0.418:0.418:0.418 0.430:0.430:0.430 0.461:0.461:0.461 0.536:0.536:0.536 0.685:0.685:0.685 0.835:0.835:0.835)
	    (0.390:0.390:0.390 0.393:0.393:0.393 0.405:0.405:0.405 0.436:0.436:0.436 0.511:0.511:0.511 0.661:0.661:0.661 0.811:0.811:0.811)
	    (0.342:0.342:0.342 0.345:0.345:0.345 0.357:0.357:0.357 0.388:0.388:0.388 0.463:0.463:0.463 0.613:0.613:0.613 0.762:0.762:0.762)
	    (0.228:0.228:0.228 0.232:0.232:0.232 0.244:0.244:0.244 0.275:0.275:0.275 0.349:0.349:0.349 0.499:0.499:0.499 0.649:0.649:0.649)
	    (0.126:0.126:0.126 0.129:0.129:0.129 0.141:0.141:0.141 0.165:0.165:0.165 0.221:0.221:0.221 0.333:0.333:0.333 0.455:0.455:0.455)
	    (0.126:0.126:0.126 0.129:0.129:0.129 0.141:0.141:0.141 0.165:0.165:0.165 0.221:0.221:0.221 0.333:0.333:0.333 0.455:0.455:0.455)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.088:0.088:0.088 0.083:0.083:0.083 0.067:0.067:0.067 0.035:0.035:0.035 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.314:0.314:0.314 0.310:0.310:0.310 0.294:0.294:0.294 0.262:0.262:0.262 0.187:0.187:0.187 0.067:0.067:0.067 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.088:0.088:0.088 0.083:0.083:0.083 0.067:0.067:0.067 0.035:0.035:0.035 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.314:0.314:0.314 0.310:0.310:0.310 0.294:0.294:0.294 0.262:0.262:0.262 0.187:0.187:0.187 0.067:0.067:0.067 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (2.20520017946938)))
TIMING_model (tpw_tckl (const (0.3115275)))
TIMING_model (tpw_tckh (const (0.2091)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.105 0.116 0.148 0.201 0.361 0.659 0.958))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.083 0.088 0.106 0.136 0.225 0.392 0.558))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.143:2.143:2.143 2.149:2.149:2.149 2.164:2.164:2.164 2.191:2.191:2.191 2.270:2.270:2.270 2.417:2.417:2.417 2.564:2.564:2.564)
	    (2.150:2.150:2.150 2.155:2.155:2.155 2.171:2.171:2.171 2.197:2.197:2.197 2.276:2.276:2.276 2.423:2.423:2.423 2.571:2.571:2.571)
	    (2.174:2.174:2.174 2.179:2.179:2.179 2.195:2.195:2.195 2.221:2.221:2.221 2.300:2.300:2.300 2.448:2.448:2.448 2.595:2.595:2.595)
	    (2.223:2.223:2.223 2.228:2.228:2.228 2.244:2.244:2.244 2.270:2.270:2.270 2.349:2.349:2.349 2.496:2.496:2.496 2.643:2.643:2.643)
	    (2.336:2.336:2.336 2.341:2.341:2.341 2.357:2.357:2.357 2.383:2.383:2.383 2.462:2.462:2.462 2.609:2.609:2.609 2.757:2.757:2.757)
	    (2.562:2.562:2.562 2.568:2.568:2.568 2.584:2.584:2.584 2.610:2.610:2.610 2.689:2.689:2.689 2.836:2.836:2.836 2.983:2.983:2.983)
	    (2.789:2.789:2.789 2.794:2.794:2.794 2.810:2.810:2.810 2.836:2.836:2.836 2.915:2.915:2.915 3.063:3.063:3.063 3.210:3.210:3.210)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.130:2.130:2.130 2.134:2.134:2.134 2.145:2.145:2.145 2.164:2.164:2.164 2.220:2.220:2.220 2.325:2.325:2.325 2.431:2.431:2.431)
	    (2.136:2.136:2.136 2.140:2.140:2.140 2.151:2.151:2.151 2.170:2.170:2.170 2.227:2.227:2.227 2.332:2.332:2.332 2.437:2.437:2.437)
	    (2.161:2.161:2.161 2.164:2.164:2.164 2.176:2.176:2.176 2.195:2.195:2.195 2.251:2.251:2.251 2.356:2.356:2.356 2.461:2.461:2.461)
	    (2.209:2.209:2.209 2.213:2.213:2.213 2.224:2.224:2.224 2.243:2.243:2.243 2.299:2.299:2.299 2.405:2.405:2.405 2.510:2.510:2.510)
	    (2.323:2.323:2.323 2.326:2.326:2.326 2.338:2.338:2.338 2.356:2.356:2.356 2.413:2.413:2.413 2.518:2.518:2.518 2.623:2.623:2.623)
	    (2.549:2.549:2.549 2.553:2.553:2.553 2.564:2.564:2.564 2.583:2.583:2.583 2.639:2.639:2.639 2.745:2.745:2.745 2.850:2.850:2.850)
	    (2.776:2.776:2.776 2.779:2.779:2.779 2.791:2.791:2.791 2.810:2.810:2.810 2.866:2.866:2.866 2.971:2.971:2.971 3.076:3.076:3.076)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.084:1.084:1.084 1.232:1.232:1.232)
	    (1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.089:1.089:1.089 1.237:1.237:1.237)
	    (1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.109:1.109:1.109 1.256:1.256:1.256)
	    (1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.147:1.147:1.147 1.294:1.294:1.294)
	    (1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.237:1.237:1.237 1.384:1.384:1.384)
	    (1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.417:1.417:1.417 1.564:1.564:1.564)
	    (1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.449:1.449:1.449 1.596:1.596:1.596 1.744:1.744:1.744)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.030:1.030:1.030)
	    (1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.035:1.035:1.035)
	    (1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.054:1.054:1.054)
	    (1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.092:1.092:1.092)
	    (1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.182:1.182:1.182)
	    (1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.362:1.362:1.362)
	    (1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.436:1.436:1.436 1.542:1.542:1.542)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[10:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(4.000) error(4.000))
 capacitance(0.269)
)
bus(D[31:0] bustype(input)
 capacitance(0.003)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.121)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.081))
pin(VSS pintype(ground) vdrop_limit(0.081))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
