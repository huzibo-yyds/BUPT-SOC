/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD2048X32 -words 2048 -bits 32 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD2048X32
 *      Words:          2048
 *      Word Width:     32
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        fast@0C
 *      Delays:         min
 *
 *      Creation Date:  2002-06-03 12:58:14Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 12:58:35Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("fast@0C")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(0.000)
  voltage(1.980)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.200) error(2.200))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD2048X32

Area (460541.196)
CT_TOLERANCE(0.198)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.255:0.255:0.255 0.255:0.255:0.255 0.255:0.255:0.255 0.256:0.256:0.256 0.258:0.258:0.258 0.278:0.278:0.278 0.360:0.360:0.360)
	    (0.253:0.253:0.253 0.253:0.253:0.253 0.254:0.254:0.254 0.254:0.254:0.254 0.256:0.256:0.256 0.277:0.277:0.277 0.358:0.358:0.358)
	    (0.246:0.246:0.246 0.246:0.246:0.246 0.247:0.247:0.247 0.248:0.248:0.248 0.249:0.249:0.249 0.270:0.270:0.270 0.352:0.352:0.352)
	    (0.237:0.237:0.237 0.238:0.238:0.238 0.238:0.238:0.238 0.239:0.239:0.239 0.240:0.240:0.240 0.261:0.261:0.261 0.343:0.343:0.343)
	    (0.215:0.215:0.215 0.215:0.215:0.215 0.216:0.216:0.216 0.216:0.216:0.216 0.218:0.218:0.218 0.239:0.239:0.239 0.321:0.321:0.321)
	    (0.197:0.197:0.197 0.198:0.198:0.198 0.198:0.198:0.198 0.199:0.199:0.199 0.200:0.200:0.200 0.221:0.221:0.221 0.303:0.303:0.303)
	    (0.157:0.157:0.157 0.158:0.158:0.158 0.158:0.158:0.158 0.159:0.159:0.159 0.160:0.160:0.160 0.181:0.181:0.181 0.263:0.263:0.263)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.255:0.255:0.255 0.255:0.255:0.255 0.255:0.255:0.255 0.256:0.256:0.256 0.258:0.258:0.258 0.278:0.278:0.278 0.360:0.360:0.360)
	    (0.253:0.253:0.253 0.253:0.253:0.253 0.254:0.254:0.254 0.254:0.254:0.254 0.256:0.256:0.256 0.277:0.277:0.277 0.358:0.358:0.358)
	    (0.246:0.246:0.246 0.246:0.246:0.246 0.247:0.247:0.247 0.248:0.248:0.248 0.249:0.249:0.249 0.270:0.270:0.270 0.352:0.352:0.352)
	    (0.237:0.237:0.237 0.238:0.238:0.238 0.238:0.238:0.238 0.239:0.239:0.239 0.240:0.240:0.240 0.261:0.261:0.261 0.343:0.343:0.343)
	    (0.215:0.215:0.215 0.215:0.215:0.215 0.216:0.216:0.216 0.216:0.216:0.216 0.218:0.218:0.218 0.239:0.239:0.239 0.321:0.321:0.321)
	    (0.197:0.197:0.197 0.198:0.198:0.198 0.198:0.198:0.198 0.199:0.199:0.199 0.200:0.200:0.200 0.221:0.221:0.221 0.303:0.303:0.303)
	    (0.157:0.157:0.157 0.158:0.158:0.158 0.158:0.158:0.158 0.159:0.159:0.159 0.160:0.160:0.160 0.181:0.181:0.181 0.263:0.263:0.263)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.040:0.040:0.040 0.040:0.040:0.040 0.039:0.039:0.039 0.039:0.039:0.039 0.037:0.037:0.037 0.036:0.036:0.036 0.033:0.033:0.033)
	    (0.042:0.042:0.042 0.042:0.042:0.042 0.041:0.041:0.041 0.041:0.041:0.041 0.039:0.039:0.039 0.038:0.038:0.038 0.035:0.035:0.035)
	    (0.049:0.049:0.049 0.048:0.048:0.048 0.048:0.048:0.048 0.047:0.047:0.047 0.046:0.046:0.046 0.044:0.044:0.044 0.042:0.042:0.042)
	    (0.057:0.057:0.057 0.057:0.057:0.057 0.057:0.057:0.057 0.056:0.056:0.056 0.055:0.055:0.055 0.053:0.053:0.053 0.050:0.050:0.050)
	    (0.080:0.080:0.080 0.079:0.079:0.079 0.079:0.079:0.079 0.078:0.078:0.078 0.077:0.077:0.077 0.075:0.075:0.075 0.073:0.073:0.073)
	    (0.097:0.097:0.097 0.097:0.097:0.097 0.097:0.097:0.097 0.096:0.096:0.096 0.095:0.095:0.095 0.093:0.093:0.093 0.090:0.090:0.090)
	    (0.137:0.137:0.137 0.137:0.137:0.137 0.137:0.137:0.137 0.136:0.136:0.136 0.134:0.134:0.134 0.133:0.133:0.133 0.130:0.130:0.130)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.024:0.024:0.024 0.020:0.020:0.020 0.007:0.007:0.007 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.026:0.026:0.026 0.022:0.022:0.022 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.032:0.032:0.032 0.029:0.029:0.029 0.015:0.015:0.015 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.041:0.041:0.041 0.038:0.038:0.038 0.024:0.024:0.024 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.064:0.064:0.064 0.060:0.060:0.060 0.046:0.046:0.046 0.028:0.028:0.028 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.081:0.081:0.081 0.078:0.078:0.078 0.064:0.064:0.064 0.046:0.046:0.046 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.121:0.121:0.121 0.118:0.118:0.118 0.104:0.104:0.104 0.086:0.086:0.086 0.040:0.040:0.040 0.004:0.004:0.004 0.000:0.000:0.000)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.301:0.301:0.301 0.301:0.301:0.301 0.302:0.302:0.302 0.304:0.304:0.304 0.307:0.307:0.307 0.340:0.340:0.340 0.440:0.440:0.440)
	    (0.299:0.299:0.299 0.299:0.299:0.299 0.300:0.300:0.300 0.302:0.302:0.302 0.306:0.306:0.306 0.338:0.338:0.338 0.438:0.438:0.438)
	    (0.292:0.292:0.292 0.293:0.293:0.293 0.294:0.294:0.294 0.295:0.295:0.295 0.299:0.299:0.299 0.331:0.331:0.331 0.431:0.431:0.431)
	    (0.283:0.283:0.283 0.284:0.284:0.284 0.285:0.285:0.285 0.286:0.286:0.286 0.290:0.290:0.290 0.322:0.322:0.322 0.422:0.422:0.422)
	    (0.261:0.261:0.261 0.262:0.262:0.262 0.263:0.263:0.263 0.264:0.264:0.264 0.268:0.268:0.268 0.300:0.300:0.300 0.400:0.400:0.400)
	    (0.244:0.244:0.244 0.244:0.244:0.244 0.245:0.245:0.245 0.246:0.246:0.246 0.250:0.250:0.250 0.282:0.282:0.282 0.382:0.382:0.382)
	    (0.204:0.204:0.204 0.204:0.204:0.204 0.205:0.205:0.205 0.206:0.206:0.206 0.210:0.210:0.210 0.242:0.242:0.242 0.342:0.342:0.342)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.301:0.301:0.301 0.301:0.301:0.301 0.302:0.302:0.302 0.304:0.304:0.304 0.307:0.307:0.307 0.340:0.340:0.340 0.440:0.440:0.440)
	    (0.299:0.299:0.299 0.299:0.299:0.299 0.300:0.300:0.300 0.302:0.302:0.302 0.306:0.306:0.306 0.338:0.338:0.338 0.438:0.438:0.438)
	    (0.292:0.292:0.292 0.293:0.293:0.293 0.294:0.294:0.294 0.295:0.295:0.295 0.299:0.299:0.299 0.331:0.331:0.331 0.431:0.431:0.431)
	    (0.283:0.283:0.283 0.284:0.284:0.284 0.285:0.285:0.285 0.286:0.286:0.286 0.290:0.290:0.290 0.322:0.322:0.322 0.422:0.422:0.422)
	    (0.261:0.261:0.261 0.262:0.262:0.262 0.263:0.263:0.263 0.264:0.264:0.264 0.268:0.268:0.268 0.300:0.300:0.300 0.400:0.400:0.400)
	    (0.244:0.244:0.244 0.244:0.244:0.244 0.245:0.245:0.245 0.246:0.246:0.246 0.250:0.250:0.250 0.282:0.282:0.282 0.382:0.382:0.382)
	    (0.204:0.204:0.204 0.204:0.204:0.204 0.205:0.205:0.205 0.206:0.206:0.206 0.210:0.210:0.210 0.242:0.242:0.242 0.342:0.342:0.342)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.011:0.011:0.011 0.011:0.011:0.011 0.010:0.010:0.010 0.008:0.008:0.008 0.004:0.004:0.004 0.002:0.002:0.002 0.000:0.000:0.000)
	    (0.029:0.029:0.029 0.029:0.029:0.029 0.027:0.027:0.027 0.026:0.026:0.026 0.022:0.022:0.022 0.019:0.019:0.019 0.013:0.013:0.013)
	    (0.069:0.069:0.069 0.069:0.069:0.069 0.067:0.067:0.067 0.066:0.066:0.066 0.062:0.062:0.062 0.059:0.059:0.059 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.011:0.011:0.011 0.011:0.011:0.011 0.010:0.010:0.010 0.008:0.008:0.008 0.004:0.004:0.004 0.002:0.002:0.002 0.000:0.000:0.000)
	    (0.029:0.029:0.029 0.029:0.029:0.029 0.027:0.027:0.027 0.026:0.026:0.026 0.022:0.022:0.022 0.019:0.019:0.019 0.013:0.013:0.013)
	    (0.069:0.069:0.069 0.069:0.069:0.069 0.067:0.067:0.067 0.066:0.066:0.066 0.062:0.062:0.062 0.059:0.059:0.059 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.143:0.143:0.143 0.144:0.144:0.144 0.146:0.146:0.146 0.148:0.148:0.148 0.212:0.212:0.212 0.269:0.269:0.269 0.400:0.400:0.400)
	    (0.142:0.142:0.142 0.142:0.142:0.142 0.144:0.144:0.144 0.146:0.146:0.146 0.210:0.210:0.210 0.268:0.268:0.268 0.398:0.398:0.398)
	    (0.135:0.135:0.135 0.135:0.135:0.135 0.137:0.137:0.137 0.140:0.140:0.140 0.203:0.203:0.203 0.261:0.261:0.261 0.391:0.391:0.391)
	    (0.126:0.126:0.126 0.126:0.126:0.126 0.128:0.128:0.128 0.131:0.131:0.131 0.194:0.194:0.194 0.252:0.252:0.252 0.383:0.383:0.383)
	    (0.104:0.104:0.104 0.104:0.104:0.104 0.106:0.106:0.106 0.108:0.108:0.108 0.172:0.172:0.172 0.230:0.230:0.230 0.360:0.360:0.360)
	    (0.086:0.086:0.086 0.086:0.086:0.086 0.088:0.088:0.088 0.091:0.091:0.091 0.154:0.154:0.154 0.212:0.212:0.212 0.343:0.343:0.343)
	    (0.046:0.046:0.046 0.046:0.046:0.046 0.048:0.048:0.048 0.051:0.051:0.051 0.114:0.114:0.114 0.172:0.172:0.172 0.303:0.303:0.303)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.143:0.143:0.143 0.144:0.144:0.144 0.146:0.146:0.146 0.148:0.148:0.148 0.212:0.212:0.212 0.269:0.269:0.269 0.400:0.400:0.400)
	    (0.142:0.142:0.142 0.142:0.142:0.142 0.144:0.144:0.144 0.146:0.146:0.146 0.210:0.210:0.210 0.268:0.268:0.268 0.398:0.398:0.398)
	    (0.135:0.135:0.135 0.135:0.135:0.135 0.137:0.137:0.137 0.140:0.140:0.140 0.203:0.203:0.203 0.261:0.261:0.261 0.391:0.391:0.391)
	    (0.126:0.126:0.126 0.126:0.126:0.126 0.128:0.128:0.128 0.131:0.131:0.131 0.194:0.194:0.194 0.252:0.252:0.252 0.383:0.383:0.383)
	    (0.104:0.104:0.104 0.104:0.104:0.104 0.106:0.106:0.106 0.108:0.108:0.108 0.172:0.172:0.172 0.230:0.230:0.230 0.360:0.360:0.360)
	    (0.086:0.086:0.086 0.086:0.086:0.086 0.088:0.088:0.088 0.091:0.091:0.091 0.154:0.154:0.154 0.212:0.212:0.212 0.343:0.343:0.343)
	    (0.046:0.046:0.046 0.046:0.046:0.046 0.048:0.048:0.048 0.051:0.051:0.051 0.114:0.114:0.114 0.172:0.172:0.172 0.303:0.303:0.303)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.012:0.012:0.012 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.034:0.034:0.034 0.028:0.028:0.028 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.052:0.052:0.052 0.046:0.046:0.046 0.024:0.024:0.024 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.092:0.092:0.092 0.086:0.086:0.086 0.064:0.064:0.064 0.035:0.035:0.035 0.006:0.006:0.006 0.001:0.001:0.001 0.000:0.000:0.000)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.012:0.012:0.012 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.034:0.034:0.034 0.028:0.028:0.028 0.006:0.006:0.006 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.052:0.052:0.052 0.046:0.046:0.046 0.024:0.024:0.024 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.092:0.092:0.092 0.086:0.086:0.086 0.064:0.064:0.064 0.035:0.035:0.035 0.006:0.006:0.006 0.001:0.001:0.001 0.000:0.000:0.000)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.157:0.157:0.157 0.161:0.161:0.161 0.179:0.179:0.179 0.204:0.204:0.204 0.264:0.264:0.264 0.312:0.312:0.312 0.421:0.421:0.421)
	    (0.155:0.155:0.155 0.159:0.159:0.159 0.178:0.178:0.178 0.202:0.202:0.202 0.262:0.262:0.262 0.310:0.310:0.310 0.419:0.419:0.419)
	    (0.149:0.149:0.149 0.153:0.153:0.153 0.171:0.171:0.171 0.195:0.195:0.195 0.255:0.255:0.255 0.304:0.304:0.304 0.413:0.413:0.413)
	    (0.140:0.140:0.140 0.144:0.144:0.144 0.162:0.162:0.162 0.186:0.186:0.186 0.247:0.247:0.247 0.295:0.295:0.295 0.404:0.404:0.404)
	    (0.117:0.117:0.117 0.122:0.122:0.122 0.140:0.140:0.140 0.164:0.164:0.164 0.224:0.224:0.224 0.273:0.273:0.273 0.381:0.381:0.381)
	    (0.100:0.100:0.100 0.104:0.104:0.104 0.122:0.122:0.122 0.146:0.146:0.146 0.207:0.207:0.207 0.255:0.255:0.255 0.364:0.364:0.364)
	    (0.060:0.060:0.060 0.064:0.064:0.064 0.082:0.082:0.082 0.106:0.106:0.106 0.167:0.167:0.167 0.215:0.215:0.215 0.324:0.324:0.324)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.157:0.157:0.157 0.161:0.161:0.161 0.179:0.179:0.179 0.204:0.204:0.204 0.264:0.264:0.264 0.312:0.312:0.312 0.421:0.421:0.421)
	    (0.155:0.155:0.155 0.159:0.159:0.159 0.178:0.178:0.178 0.202:0.202:0.202 0.262:0.262:0.262 0.310:0.310:0.310 0.419:0.419:0.419)
	    (0.149:0.149:0.149 0.153:0.153:0.153 0.171:0.171:0.171 0.195:0.195:0.195 0.255:0.255:0.255 0.304:0.304:0.304 0.413:0.413:0.413)
	    (0.140:0.140:0.140 0.144:0.144:0.144 0.162:0.162:0.162 0.186:0.186:0.186 0.247:0.247:0.247 0.295:0.295:0.295 0.404:0.404:0.404)
	    (0.117:0.117:0.117 0.122:0.122:0.122 0.140:0.140:0.140 0.164:0.164:0.164 0.224:0.224:0.224 0.273:0.273:0.273 0.381:0.381:0.381)
	    (0.100:0.100:0.100 0.104:0.104:0.104 0.122:0.122:0.122 0.146:0.146:0.146 0.207:0.207:0.207 0.255:0.255:0.255 0.364:0.364:0.364)
	    (0.060:0.060:0.060 0.064:0.064:0.064 0.082:0.082:0.082 0.106:0.106:0.106 0.167:0.167:0.167 0.215:0.215:0.215 0.324:0.324:0.324)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (0.874404436332376)))
TIMING_model (tpw_tckl (const (0.1214)))
TIMING_model (tpw_tckh (const (0.08738)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.037 0.042 0.058 0.085 0.164 0.313 0.462))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.034 0.037 0.046 0.061 0.106 0.189 0.273))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (0.828:0.828:0.828 0.830:0.830:0.830 0.836:0.836:0.836 0.846:0.846:0.846 0.874:0.874:0.874 0.927:0.927:0.927 0.980:0.980:0.980)
	    (0.829:0.829:0.829 0.832:0.832:0.832 0.838:0.838:0.838 0.847:0.847:0.847 0.876:0.876:0.876 0.929:0.929:0.929 0.982:0.982:0.982)
	    (0.836:0.836:0.836 0.839:0.839:0.839 0.845:0.845:0.845 0.854:0.854:0.854 0.882:0.882:0.882 0.936:0.936:0.936 0.989:0.989:0.989)
	    (0.845:0.845:0.845 0.847:0.847:0.847 0.853:0.853:0.853 0.863:0.863:0.863 0.891:0.891:0.891 0.944:0.944:0.944 0.997:0.997:0.997)
	    (0.867:0.867:0.867 0.870:0.870:0.870 0.876:0.876:0.876 0.885:0.885:0.885 0.914:0.914:0.914 0.967:0.967:0.967 1.020:1.020:1.020)
	    (0.885:0.885:0.885 0.887:0.887:0.887 0.893:0.893:0.893 0.903:0.903:0.903 0.931:0.931:0.931 0.984:0.984:0.984 1.037:1.037:1.037)
	    (0.925:0.925:0.925 0.927:0.927:0.927 0.933:0.933:0.933 0.943:0.943:0.943 0.971:0.971:0.971 1.024:1.024:1.024 1.077:1.077:1.077)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (0.828:0.828:0.828 0.830:0.830:0.830 0.836:0.836:0.836 0.846:0.846:0.846 0.874:0.874:0.874 0.927:0.927:0.927 0.980:0.980:0.980)
	    (0.829:0.829:0.829 0.832:0.832:0.832 0.838:0.838:0.838 0.847:0.847:0.847 0.876:0.876:0.876 0.929:0.929:0.929 0.982:0.982:0.982)
	    (0.836:0.836:0.836 0.839:0.839:0.839 0.845:0.845:0.845 0.854:0.854:0.854 0.882:0.882:0.882 0.936:0.936:0.936 0.989:0.989:0.989)
	    (0.845:0.845:0.845 0.847:0.847:0.847 0.853:0.853:0.853 0.863:0.863:0.863 0.891:0.891:0.891 0.944:0.944:0.944 0.997:0.997:0.997)
	    (0.867:0.867:0.867 0.870:0.870:0.870 0.876:0.876:0.876 0.885:0.885:0.885 0.914:0.914:0.914 0.967:0.967:0.967 1.020:1.020:1.020)
	    (0.885:0.885:0.885 0.887:0.887:0.887 0.893:0.893:0.893 0.903:0.903:0.903 0.931:0.931:0.931 0.984:0.984:0.984 1.037:1.037:1.037)
	    (0.925:0.925:0.925 0.927:0.927:0.927 0.933:0.933:0.933 0.943:0.943:0.943 0.971:0.971:0.971 1.024:1.024:1.024 1.077:1.077:1.077)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.359:0.359:0.359 0.362:0.362:0.362 0.370:0.370:0.370 0.383:0.383:0.383 0.422:0.422:0.422 0.496:0.496:0.496 0.502:0.502:0.502)
	    (0.365:0.365:0.365 0.368:0.368:0.368 0.375:0.375:0.375 0.388:0.388:0.388 0.428:0.428:0.428 0.501:0.501:0.501 0.504:0.504:0.504)
	    (0.385:0.385:0.385 0.388:0.388:0.388 0.396:0.396:0.396 0.409:0.409:0.409 0.448:0.448:0.448 0.511:0.511:0.511 0.511:0.511:0.511)
	    (0.413:0.413:0.413 0.415:0.415:0.415 0.423:0.423:0.423 0.436:0.436:0.436 0.476:0.476:0.476 0.520:0.520:0.520 0.520:0.520:0.520)
	    (0.481:0.481:0.481 0.484:0.484:0.484 0.492:0.492:0.492 0.505:0.505:0.505 0.543:0.543:0.543 0.543:0.543:0.543 0.543:0.543:0.543)
	    (0.536:0.536:0.536 0.538:0.538:0.538 0.546:0.546:0.546 0.559:0.559:0.559 0.562:0.562:0.562 0.562:0.562:0.562 0.562:0.562:0.562)
	    (0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.400 0.900 1.300 2.200)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.320:0.320:0.320 0.322:0.322:0.322 0.328:0.328:0.328 0.337:0.337:0.337 0.366:0.366:0.366 0.419:0.419:0.419 0.472:0.472:0.472)
	    (0.326:0.326:0.326 0.328:0.328:0.328 0.333:0.333:0.333 0.343:0.343:0.343 0.371:0.371:0.371 0.424:0.424:0.424 0.477:0.477:0.477)
	    (0.346:0.346:0.346 0.348:0.348:0.348 0.354:0.354:0.354 0.363:0.363:0.363 0.392:0.392:0.392 0.445:0.445:0.445 0.498:0.498:0.498)
	    (0.374:0.374:0.374 0.376:0.376:0.376 0.381:0.381:0.381 0.391:0.391:0.391 0.419:0.419:0.419 0.472:0.472:0.472 0.520:0.520:0.520)
	    (0.442:0.442:0.442 0.444:0.444:0.444 0.450:0.450:0.450 0.459:0.459:0.459 0.487:0.487:0.487 0.540:0.540:0.540 0.543:0.543:0.543)
	    (0.497:0.497:0.497 0.499:0.499:0.499 0.504:0.504:0.504 0.514:0.514:0.514 0.542:0.542:0.542 0.562:0.562:0.562 0.562:0.562:0.562)
	    (0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604 0.604:0.604:0.604)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[10:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.200) error(2.200))
 capacitance(0.283)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.123)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.099))
pin(VSS pintype(ground) vdrop_limit(0.099))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (A[10] => CLK 01 posedge tch_tas_rise)
setup (A[10] => CLK 10 posedge tch_tas_fall)
hold (A[10] => CLK 01 posedge tch_tah_rise)
hold (A[10] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
