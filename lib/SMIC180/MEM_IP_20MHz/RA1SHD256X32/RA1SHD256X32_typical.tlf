/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD256X32 -words 256 -bits 32 -frequency 20 -ring_width 2 -mux 4 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD256X32
 *      Words:          256
 *      Word Width:     32
 *      Mux:            4
 *      Pipeline:       No
 *      Process:        typical
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 13:16:22Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:16:35Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("typical")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(25.000)
  voltage(1.800)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.800) error(2.800))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD256X32

Area (106626.051)
CT_TOLERANCE(0.180)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.283:0.283:0.283 0.283:0.283:0.283 0.284:0.284:0.284 0.287:0.287:0.287 0.293:0.293:0.293 0.303:0.303:0.303 0.355:0.355:0.355)
	    (0.279:0.279:0.279 0.279:0.279:0.279 0.280:0.280:0.280 0.283:0.283:0.283 0.288:0.288:0.288 0.298:0.298:0.298 0.351:0.351:0.351)
	    (0.273:0.273:0.273 0.274:0.274:0.274 0.275:0.275:0.275 0.277:0.277:0.277 0.283:0.283:0.283 0.293:0.293:0.293 0.345:0.345:0.345)
	    (0.252:0.252:0.252 0.253:0.253:0.253 0.254:0.254:0.254 0.256:0.256:0.256 0.262:0.262:0.262 0.272:0.272:0.272 0.324:0.324:0.324)
	    (0.210:0.210:0.210 0.211:0.211:0.211 0.211:0.211:0.211 0.214:0.214:0.214 0.220:0.220:0.220 0.230:0.230:0.230 0.282:0.282:0.282)
	    (0.137:0.137:0.137 0.137:0.137:0.137 0.138:0.138:0.138 0.141:0.141:0.141 0.146:0.146:0.146 0.156:0.156:0.156 0.209:0.209:0.209)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.009:0.009:0.009 0.061:0.061:0.061)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.283:0.283:0.283 0.283:0.283:0.283 0.284:0.284:0.284 0.287:0.287:0.287 0.293:0.293:0.293 0.303:0.303:0.303 0.355:0.355:0.355)
	    (0.279:0.279:0.279 0.279:0.279:0.279 0.280:0.280:0.280 0.283:0.283:0.283 0.288:0.288:0.288 0.298:0.298:0.298 0.351:0.351:0.351)
	    (0.273:0.273:0.273 0.274:0.274:0.274 0.275:0.275:0.275 0.277:0.277:0.277 0.283:0.283:0.283 0.293:0.293:0.293 0.345:0.345:0.345)
	    (0.252:0.252:0.252 0.253:0.253:0.253 0.254:0.254:0.254 0.256:0.256:0.256 0.262:0.262:0.262 0.272:0.272:0.272 0.324:0.324:0.324)
	    (0.210:0.210:0.210 0.211:0.211:0.211 0.211:0.211:0.211 0.214:0.214:0.214 0.220:0.220:0.220 0.230:0.230:0.230 0.282:0.282:0.282)
	    (0.137:0.137:0.137 0.137:0.137:0.137 0.138:0.138:0.138 0.141:0.141:0.141 0.146:0.146:0.146 0.156:0.156:0.156 0.209:0.209:0.209)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.009:0.009:0.009 0.061:0.061:0.061)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.067:0.067:0.067 0.066:0.066:0.066 0.066:0.066:0.066 0.063:0.063:0.063 0.057:0.057:0.057 0.047:0.047:0.047 0.027:0.027:0.027)
	    (0.071:0.071:0.071 0.070:0.070:0.070 0.070:0.070:0.070 0.067:0.067:0.067 0.061:0.061:0.061 0.051:0.051:0.051 0.031:0.031:0.031)
	    (0.076:0.076:0.076 0.076:0.076:0.076 0.075:0.075:0.075 0.072:0.072:0.072 0.066:0.066:0.066 0.056:0.056:0.056 0.036:0.036:0.036)
	    (0.097:0.097:0.097 0.097:0.097:0.097 0.096:0.096:0.096 0.093:0.093:0.093 0.087:0.087:0.087 0.077:0.077:0.077 0.057:0.057:0.057)
	    (0.139:0.139:0.139 0.139:0.139:0.139 0.138:0.138:0.138 0.135:0.135:0.135 0.130:0.130:0.130 0.119:0.119:0.119 0.099:0.099:0.099)
	    (0.213:0.213:0.213 0.212:0.212:0.212 0.212:0.212:0.212 0.209:0.209:0.209 0.203:0.203:0.203 0.193:0.193:0.193 0.173:0.173:0.173)
	    (0.360:0.360:0.360 0.360:0.360:0.360 0.359:0.359:0.359 0.356:0.356:0.356 0.350:0.350:0.350 0.340:0.340:0.340 0.320:0.320:0.320)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.046:0.046:0.046 0.042:0.042:0.042 0.038:0.038:0.038 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.050:0.050:0.050 0.047:0.047:0.047 0.042:0.042:0.042 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.055:0.055:0.055 0.052:0.052:0.052 0.047:0.047:0.047 0.030:0.030:0.030 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.076:0.076:0.076 0.073:0.073:0.073 0.069:0.069:0.069 0.051:0.051:0.051 0.016:0.016:0.016 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.115:0.115:0.115 0.111:0.111:0.111 0.093:0.093:0.093 0.058:0.058:0.058 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.192:0.192:0.192 0.189:0.189:0.189 0.184:0.184:0.184 0.167:0.167:0.167 0.132:0.132:0.132 0.070:0.070:0.070 0.000:0.000:0.000)
	    (0.339:0.339:0.339 0.336:0.336:0.336 0.332:0.332:0.332 0.314:0.314:0.314 0.279:0.279:0.279 0.218:0.218:0.218 0.095:0.095:0.095)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.366:0.366:0.366 0.366:0.366:0.366 0.367:0.367:0.367 0.372:0.372:0.372 0.380:0.380:0.380 0.425:0.425:0.425 0.579:0.579:0.579)
	    (0.361:0.361:0.361 0.362:0.362:0.362 0.363:0.363:0.363 0.367:0.367:0.367 0.376:0.376:0.376 0.421:0.421:0.421 0.575:0.575:0.575)
	    (0.356:0.356:0.356 0.357:0.357:0.357 0.358:0.358:0.358 0.362:0.362:0.362 0.370:0.370:0.370 0.416:0.416:0.416 0.569:0.569:0.569)
	    (0.335:0.335:0.335 0.336:0.336:0.336 0.337:0.337:0.337 0.341:0.341:0.341 0.349:0.349:0.349 0.395:0.395:0.395 0.548:0.548:0.548)
	    (0.293:0.293:0.293 0.294:0.294:0.294 0.295:0.295:0.295 0.299:0.299:0.299 0.307:0.307:0.307 0.352:0.352:0.352 0.506:0.506:0.506)
	    (0.219:0.219:0.219 0.220:0.220:0.220 0.221:0.221:0.221 0.225:0.225:0.225 0.234:0.234:0.234 0.279:0.279:0.279 0.433:0.433:0.433)
	    (0.072:0.072:0.072 0.073:0.073:0.073 0.074:0.074:0.074 0.078:0.078:0.078 0.086:0.086:0.086 0.132:0.132:0.132 0.285:0.285:0.285)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.366:0.366:0.366 0.366:0.366:0.366 0.367:0.367:0.367 0.372:0.372:0.372 0.380:0.380:0.380 0.425:0.425:0.425 0.579:0.579:0.579)
	    (0.361:0.361:0.361 0.362:0.362:0.362 0.363:0.363:0.363 0.367:0.367:0.367 0.376:0.376:0.376 0.421:0.421:0.421 0.575:0.575:0.575)
	    (0.356:0.356:0.356 0.357:0.357:0.357 0.358:0.358:0.358 0.362:0.362:0.362 0.370:0.370:0.370 0.416:0.416:0.416 0.569:0.569:0.569)
	    (0.335:0.335:0.335 0.336:0.336:0.336 0.337:0.337:0.337 0.341:0.341:0.341 0.349:0.349:0.349 0.395:0.395:0.395 0.548:0.548:0.548)
	    (0.293:0.293:0.293 0.294:0.294:0.294 0.295:0.295:0.295 0.299:0.299:0.299 0.307:0.307:0.307 0.352:0.352:0.352 0.506:0.506:0.506)
	    (0.219:0.219:0.219 0.220:0.220:0.220 0.221:0.221:0.221 0.225:0.225:0.225 0.234:0.234:0.234 0.279:0.279:0.279 0.433:0.433:0.433)
	    (0.072:0.072:0.072 0.073:0.073:0.073 0.074:0.074:0.074 0.078:0.078:0.078 0.086:0.086:0.086 0.132:0.132:0.132 0.285:0.285:0.285)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.024:0.024:0.024 0.023:0.023:0.023 0.022:0.022:0.022 0.018:0.018:0.018 0.010:0.010:0.010 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.097:0.097:0.097 0.097:0.097:0.097 0.096:0.096:0.096 0.091:0.091:0.091 0.083:0.083:0.083 0.069:0.069:0.069 0.040:0.040:0.040)
	    (0.245:0.245:0.245 0.244:0.244:0.244 0.243:0.243:0.243 0.239:0.239:0.239 0.230:0.230:0.230 0.216:0.216:0.216 0.187:0.187:0.187)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.024:0.024:0.024 0.023:0.023:0.023 0.022:0.022:0.022 0.018:0.018:0.018 0.010:0.010:0.010 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.097:0.097:0.097 0.097:0.097:0.097 0.096:0.096:0.096 0.091:0.091:0.091 0.083:0.083:0.083 0.069:0.069:0.069 0.040:0.040:0.040)
	    (0.245:0.245:0.245 0.244:0.244:0.244 0.243:0.243:0.243 0.239:0.239:0.239 0.230:0.230:0.230 0.216:0.216:0.216 0.187:0.187:0.187)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.186:0.186:0.186 0.187:0.187:0.187 0.188:0.188:0.188 0.194:0.194:0.194 0.206:0.206:0.206 0.300:0.300:0.300 0.501:0.501:0.501)
	    (0.181:0.181:0.181 0.183:0.183:0.183 0.184:0.184:0.184 0.190:0.190:0.190 0.202:0.202:0.202 0.296:0.296:0.296 0.497:0.497:0.497)
	    (0.176:0.176:0.176 0.177:0.177:0.177 0.179:0.179:0.179 0.185:0.185:0.185 0.197:0.197:0.197 0.291:0.291:0.291 0.491:0.491:0.491)
	    (0.155:0.155:0.155 0.156:0.156:0.156 0.158:0.158:0.158 0.164:0.164:0.164 0.176:0.176:0.176 0.270:0.270:0.270 0.470:0.470:0.470)
	    (0.113:0.113:0.113 0.114:0.114:0.114 0.116:0.116:0.116 0.122:0.122:0.122 0.133:0.133:0.133 0.228:0.228:0.228 0.428:0.428:0.428)
	    (0.039:0.039:0.039 0.040:0.040:0.040 0.042:0.042:0.042 0.048:0.048:0.048 0.060:0.060:0.060 0.154:0.154:0.154 0.355:0.355:0.355)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.007:0.007:0.007 0.207:0.207:0.207)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.186:0.186:0.186 0.187:0.187:0.187 0.188:0.188:0.188 0.194:0.194:0.194 0.206:0.206:0.206 0.300:0.300:0.300 0.501:0.501:0.501)
	    (0.181:0.181:0.181 0.183:0.183:0.183 0.184:0.184:0.184 0.190:0.190:0.190 0.202:0.202:0.202 0.296:0.296:0.296 0.497:0.497:0.497)
	    (0.176:0.176:0.176 0.177:0.177:0.177 0.179:0.179:0.179 0.185:0.185:0.185 0.197:0.197:0.197 0.291:0.291:0.291 0.491:0.491:0.491)
	    (0.155:0.155:0.155 0.156:0.156:0.156 0.158:0.158:0.158 0.164:0.164:0.164 0.176:0.176:0.176 0.270:0.270:0.270 0.470:0.470:0.470)
	    (0.113:0.113:0.113 0.114:0.114:0.114 0.116:0.116:0.116 0.122:0.122:0.122 0.133:0.133:0.133 0.228:0.228:0.228 0.428:0.428:0.428)
	    (0.039:0.039:0.039 0.040:0.040:0.040 0.042:0.042:0.042 0.048:0.048:0.048 0.060:0.060:0.060 0.154:0.154:0.154 0.355:0.355:0.355)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.007:0.007:0.007 0.207:0.207:0.207)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.025:0.025:0.025 0.019:0.019:0.019 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.067:0.067:0.067 0.061:0.061:0.061 0.054:0.054:0.054 0.026:0.026:0.026 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.141:0.141:0.141 0.135:0.135:0.135 0.128:0.128:0.128 0.099:0.099:0.099 0.042:0.042:0.042 0.001:0.001:0.001 0.000:0.000:0.000)
	    (0.288:0.288:0.288 0.282:0.282:0.282 0.275:0.275:0.275 0.246:0.246:0.246 0.189:0.189:0.189 0.148:0.148:0.148 0.106:0.106:0.106)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.025:0.025:0.025 0.019:0.019:0.019 0.012:0.012:0.012 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.067:0.067:0.067 0.061:0.061:0.061 0.054:0.054:0.054 0.026:0.026:0.026 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.141:0.141:0.141 0.135:0.135:0.135 0.128:0.128:0.128 0.099:0.099:0.099 0.042:0.042:0.042 0.001:0.001:0.001 0.000:0.000:0.000)
	    (0.288:0.288:0.288 0.282:0.282:0.282 0.275:0.275:0.275 0.246:0.246:0.246 0.189:0.189:0.189 0.148:0.148:0.148 0.106:0.106:0.106)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.211:0.211:0.211 0.213:0.213:0.213 0.215:0.215:0.215 0.239:0.239:0.239 0.288:0.288:0.288 0.372:0.372:0.372 0.541:0.541:0.541)
	    (0.207:0.207:0.207 0.208:0.208:0.208 0.211:0.211:0.211 0.235:0.235:0.235 0.284:0.284:0.284 0.368:0.368:0.368 0.537:0.537:0.537)
	    (0.201:0.201:0.201 0.203:0.203:0.203 0.206:0.206:0.206 0.230:0.230:0.230 0.278:0.278:0.278 0.363:0.363:0.363 0.532:0.532:0.532)
	    (0.180:0.180:0.180 0.182:0.182:0.182 0.185:0.185:0.185 0.209:0.209:0.209 0.257:0.257:0.257 0.342:0.342:0.342 0.511:0.511:0.511)
	    (0.138:0.138:0.138 0.140:0.140:0.140 0.143:0.143:0.143 0.167:0.167:0.167 0.215:0.215:0.215 0.300:0.300:0.300 0.469:0.469:0.469)
	    (0.065:0.065:0.065 0.066:0.066:0.066 0.069:0.069:0.069 0.093:0.093:0.093 0.142:0.142:0.142 0.226:0.226:0.226 0.395:0.395:0.395)
	    (0.061:0.061:0.061 0.063:0.063:0.063 0.065:0.065:0.065 0.074:0.074:0.074 0.092:0.092:0.092 0.172:0.172:0.172 0.342:0.342:0.342)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.211:0.211:0.211 0.213:0.213:0.213 0.215:0.215:0.215 0.239:0.239:0.239 0.288:0.288:0.288 0.372:0.372:0.372 0.541:0.541:0.541)
	    (0.207:0.207:0.207 0.208:0.208:0.208 0.211:0.211:0.211 0.235:0.235:0.235 0.284:0.284:0.284 0.368:0.368:0.368 0.537:0.537:0.537)
	    (0.201:0.201:0.201 0.203:0.203:0.203 0.206:0.206:0.206 0.230:0.230:0.230 0.278:0.278:0.278 0.363:0.363:0.363 0.532:0.532:0.532)
	    (0.180:0.180:0.180 0.182:0.182:0.182 0.185:0.185:0.185 0.209:0.209:0.209 0.257:0.257:0.257 0.342:0.342:0.342 0.511:0.511:0.511)
	    (0.138:0.138:0.138 0.140:0.140:0.140 0.143:0.143:0.143 0.167:0.167:0.167 0.215:0.215:0.215 0.300:0.300:0.300 0.469:0.469:0.469)
	    (0.065:0.065:0.065 0.066:0.066:0.066 0.069:0.069:0.069 0.093:0.093:0.093 0.142:0.142:0.142 0.226:0.226:0.226 0.395:0.395:0.395)
	    (0.061:0.061:0.061 0.063:0.063:0.063 0.065:0.065:0.065 0.074:0.074:0.074 0.092:0.092:0.092 0.172:0.172:0.172 0.342:0.342:0.342)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.150:0.150:0.150 0.145:0.145:0.145 0.139:0.139:0.139 0.115:0.115:0.115 0.080:0.080:0.080 0.048:0.048:0.048 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.150:0.150:0.150 0.145:0.145:0.145 0.139:0.139:0.139 0.115:0.115:0.115 0.080:0.080:0.080 0.048:0.048:0.048 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (1.1018468923894)))
TIMING_model (tpw_tckl (const (0.162700000000004)))
TIMING_model (tpw_tckh (const (0.1185)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.067 0.074 0.095 0.131 0.237 0.436 0.635))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.050 0.053 0.064 0.083 0.139 0.242 0.346))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.181:1.181:1.181 1.184:1.184:1.184 1.195:1.195:1.195 1.213:1.213:1.213 1.266:1.266:1.266 1.365:1.365:1.365 1.464:1.464:1.464)
	    (1.185:1.185:1.185 1.188:1.188:1.188 1.199:1.199:1.199 1.217:1.217:1.217 1.270:1.270:1.270 1.369:1.369:1.369 1.468:1.468:1.468)
	    (1.190:1.190:1.190 1.194:1.194:1.194 1.204:1.204:1.204 1.222:1.222:1.222 1.275:1.275:1.275 1.374:1.374:1.374 1.473:1.473:1.473)
	    (1.211:1.211:1.211 1.215:1.215:1.215 1.225:1.225:1.225 1.243:1.243:1.243 1.296:1.296:1.296 1.395:1.395:1.395 1.495:1.495:1.495)
	    (1.253:1.253:1.253 1.257:1.257:1.257 1.267:1.267:1.267 1.285:1.285:1.285 1.338:1.338:1.338 1.437:1.437:1.437 1.537:1.537:1.537)
	    (1.327:1.327:1.327 1.330:1.330:1.330 1.341:1.341:1.341 1.359:1.359:1.359 1.412:1.412:1.412 1.511:1.511:1.511 1.610:1.610:1.610)
	    (1.474:1.474:1.474 1.478:1.478:1.478 1.488:1.488:1.488 1.506:1.506:1.506 1.559:1.559:1.559 1.658:1.658:1.658 1.758:1.758:1.758)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.180:1.180:1.180 1.182:1.182:1.182 1.189:1.189:1.189 1.201:1.201:1.201 1.237:1.237:1.237 1.304:1.304:1.304 1.371:1.371:1.371)
	    (1.184:1.184:1.184 1.186:1.186:1.186 1.193:1.193:1.193 1.205:1.205:1.205 1.241:1.241:1.241 1.308:1.308:1.308 1.375:1.375:1.375)
	    (1.189:1.189:1.189 1.192:1.192:1.192 1.199:1.199:1.199 1.211:1.211:1.211 1.246:1.246:1.246 1.313:1.313:1.313 1.380:1.380:1.380)
	    (1.210:1.210:1.210 1.213:1.213:1.213 1.220:1.220:1.220 1.232:1.232:1.232 1.267:1.267:1.267 1.334:1.334:1.334 1.401:1.401:1.401)
	    (1.252:1.252:1.252 1.255:1.255:1.255 1.262:1.262:1.262 1.274:1.274:1.274 1.310:1.310:1.310 1.376:1.376:1.376 1.443:1.443:1.443)
	    (1.326:1.326:1.326 1.328:1.328:1.328 1.335:1.335:1.335 1.347:1.347:1.347 1.383:1.383:1.383 1.450:1.450:1.450 1.517:1.517:1.517)
	    (1.473:1.473:1.473 1.476:1.476:1.476 1.483:1.483:1.483 1.495:1.495:1.495 1.530:1.530:1.530 1.597:1.597:1.597 1.664:1.664:1.664)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.682:0.682:0.682 0.781:0.781:0.781)
	    (0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.687:0.687:0.687 0.787:0.787:0.787)
	    (0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.694:0.694:0.694 0.794:0.794:0.794)
	    (0.622:0.622:0.622 0.622:0.622:0.622 0.622:0.622:0.622 0.622:0.622:0.622 0.623:0.623:0.623 0.722:0.722:0.722 0.821:0.821:0.821)
	    (0.647:0.647:0.647 0.647:0.647:0.647 0.647:0.647:0.647 0.647:0.647:0.647 0.678:0.678:0.678 0.777:0.777:0.777 0.876:0.876:0.876)
	    (0.691:0.691:0.691 0.693:0.693:0.693 0.704:0.704:0.704 0.722:0.722:0.722 0.775:0.775:0.775 0.874:0.874:0.874 0.973:0.973:0.973)
	    (0.883:0.883:0.883 0.887:0.887:0.887 0.897:0.897:0.897 0.915:0.915:0.915 0.968:0.968:0.968 1.067:1.067:1.067 1.167:1.167:1.167)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.603:0.603:0.603 0.644:0.644:0.644)
	    (0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.606:0.606:0.606 0.650:0.650:0.650)
	    (0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.609:0.609:0.609 0.657:0.657:0.657)
	    (0.622:0.622:0.622 0.622:0.622:0.622 0.622:0.622:0.622 0.622:0.622:0.622 0.622:0.622:0.622 0.622:0.622:0.622 0.684:0.684:0.684)
	    (0.647:0.647:0.647 0.647:0.647:0.647 0.647:0.647:0.647 0.647:0.647:0.647 0.647:0.647:0.647 0.673:0.673:0.673 0.740:0.740:0.740)
	    (0.691:0.691:0.691 0.691:0.691:0.691 0.691:0.691:0.691 0.691:0.691:0.691 0.703:0.703:0.703 0.770:0.770:0.770 0.836:0.836:0.836)
	    (0.839:0.839:0.839 0.841:0.841:0.841 0.848:0.848:0.848 0.860:0.860:0.860 0.896:0.896:0.896 0.963:0.963:0.963 1.030:1.030:1.030)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[7:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.800) error(2.800))
 capacitance(0.178)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.122)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.090))
pin(VSS pintype(ground) vdrop_limit(0.090))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
