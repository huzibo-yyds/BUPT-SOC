/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD256X32 -words 256 -bits 32 -frequency 20 -ring_width 2 -mux 4 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD256X32
 *      Words:          256
 *      Word Width:     32
 *      Mux:            4
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 13:16:43Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:16:56Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("slow")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(125.000)
  voltage(1.620)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(4.000) error(4.000))
  load_limit(0.822) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD256X32

Area (106626.051)
CT_TOLERANCE(0.162)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.522:0.522:0.522 0.524:0.524:0.524 0.531:0.531:0.531 0.545:0.545:0.545 0.576:0.576:0.576 0.639:0.639:0.639 0.702:0.702:0.702)
	    (0.516:0.516:0.516 0.518:0.518:0.518 0.524:0.524:0.524 0.538:0.538:0.538 0.570:0.570:0.570 0.633:0.633:0.633 0.696:0.696:0.696)
	    (0.491:0.491:0.491 0.493:0.493:0.493 0.500:0.500:0.500 0.514:0.514:0.514 0.545:0.545:0.545 0.608:0.608:0.608 0.671:0.671:0.671)
	    (0.443:0.443:0.443 0.444:0.444:0.444 0.451:0.451:0.451 0.465:0.465:0.465 0.496:0.496:0.496 0.559:0.559:0.559 0.623:0.623:0.623)
	    (0.329:0.329:0.329 0.331:0.331:0.331 0.337:0.337:0.337 0.351:0.351:0.351 0.382:0.382:0.382 0.446:0.446:0.446 0.509:0.509:0.509)
	    (0.101:0.101:0.101 0.103:0.103:0.103 0.109:0.109:0.109 0.123:0.123:0.123 0.154:0.154:0.154 0.218:0.218:0.218 0.281:0.281:0.281)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.522:0.522:0.522 0.524:0.524:0.524 0.531:0.531:0.531 0.545:0.545:0.545 0.576:0.576:0.576 0.639:0.639:0.639 0.702:0.702:0.702)
	    (0.516:0.516:0.516 0.518:0.518:0.518 0.524:0.524:0.524 0.538:0.538:0.538 0.570:0.570:0.570 0.633:0.633:0.633 0.696:0.696:0.696)
	    (0.491:0.491:0.491 0.493:0.493:0.493 0.500:0.500:0.500 0.514:0.514:0.514 0.545:0.545:0.545 0.608:0.608:0.608 0.671:0.671:0.671)
	    (0.443:0.443:0.443 0.444:0.444:0.444 0.451:0.451:0.451 0.465:0.465:0.465 0.496:0.496:0.496 0.559:0.559:0.559 0.623:0.623:0.623)
	    (0.329:0.329:0.329 0.331:0.331:0.331 0.337:0.337:0.337 0.351:0.351:0.351 0.382:0.382:0.382 0.446:0.446:0.446 0.509:0.509:0.509)
	    (0.101:0.101:0.101 0.103:0.103:0.103 0.109:0.109:0.109 0.123:0.123:0.123 0.154:0.154:0.154 0.218:0.218:0.218 0.281:0.281:0.281)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.098:0.098:0.098 0.096:0.096:0.096 0.090:0.090:0.090 0.076:0.076:0.076 0.044:0.044:0.044 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.105:0.105:0.105 0.103:0.103:0.103 0.096:0.096:0.096 0.083:0.083:0.083 0.051:0.051:0.051 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.129:0.129:0.129 0.127:0.127:0.127 0.120:0.120:0.120 0.107:0.107:0.107 0.075:0.075:0.075 0.012:0.012:0.012 0.000:0.000:0.000)
	    (0.178:0.178:0.178 0.176:0.176:0.176 0.169:0.169:0.169 0.156:0.156:0.156 0.124:0.124:0.124 0.061:0.061:0.061 0.000:0.000:0.000)
	    (0.292:0.292:0.292 0.290:0.290:0.290 0.283:0.283:0.283 0.270:0.270:0.270 0.238:0.238:0.238 0.175:0.175:0.175 0.112:0.112:0.112)
	    (0.520:0.520:0.520 0.518:0.518:0.518 0.511:0.511:0.511 0.498:0.498:0.498 0.466:0.466:0.466 0.403:0.403:0.403 0.340:0.340:0.340)
	    (0.748:0.748:0.748 0.746:0.746:0.746 0.739:0.739:0.739 0.726:0.726:0.726 0.694:0.694:0.694 0.631:0.631:0.631 0.568:0.568:0.568)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.059:0.059:0.059 0.056:0.056:0.056 0.045:0.045:0.045 0.024:0.024:0.024 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.066:0.066:0.066 0.063:0.063:0.063 0.052:0.052:0.052 0.030:0.030:0.030 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.090:0.090:0.090 0.087:0.087:0.087 0.076:0.076:0.076 0.055:0.055:0.055 0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.139:0.139:0.139 0.136:0.136:0.136 0.125:0.125:0.125 0.103:0.103:0.103 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.253:0.253:0.253 0.250:0.250:0.250 0.239:0.239:0.239 0.217:0.217:0.217 0.167:0.167:0.167 0.066:0.066:0.066 0.000:0.000:0.000)
	    (0.481:0.481:0.481 0.478:0.478:0.478 0.467:0.467:0.467 0.445:0.445:0.445 0.395:0.395:0.395 0.294:0.294:0.294 0.193:0.193:0.193)
	    (0.709:0.709:0.709 0.706:0.706:0.706 0.695:0.695:0.695 0.673:0.673:0.673 0.623:0.623:0.623 0.522:0.522:0.522 0.421:0.421:0.421)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.588:0.588:0.588 0.590:0.590:0.590 0.599:0.599:0.599 0.615:0.615:0.615 0.652:0.652:0.652 0.728:0.728:0.728 0.855:0.855:0.855)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.721:0.721:0.721 0.849:0.849:0.849)
	    (0.557:0.557:0.557 0.559:0.559:0.559 0.568:0.568:0.568 0.584:0.584:0.584 0.622:0.622:0.622 0.697:0.697:0.697 0.824:0.824:0.824)
	    (0.508:0.508:0.508 0.511:0.511:0.511 0.519:0.519:0.519 0.535:0.535:0.535 0.573:0.573:0.573 0.648:0.648:0.648 0.775:0.775:0.775)
	    (0.395:0.395:0.395 0.397:0.397:0.397 0.405:0.405:0.405 0.421:0.421:0.421 0.459:0.459:0.459 0.534:0.534:0.534 0.661:0.661:0.661)
	    (0.167:0.167:0.167 0.169:0.169:0.169 0.177:0.177:0.177 0.193:0.193:0.193 0.231:0.231:0.231 0.306:0.306:0.306 0.433:0.433:0.433)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.003:0.003:0.003 0.078:0.078:0.078 0.206:0.206:0.206)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.588:0.588:0.588 0.590:0.590:0.590 0.599:0.599:0.599 0.615:0.615:0.615 0.652:0.652:0.652 0.728:0.728:0.728 0.855:0.855:0.855)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.721:0.721:0.721 0.849:0.849:0.849)
	    (0.557:0.557:0.557 0.559:0.559:0.559 0.568:0.568:0.568 0.584:0.584:0.584 0.622:0.622:0.622 0.697:0.697:0.697 0.824:0.824:0.824)
	    (0.508:0.508:0.508 0.511:0.511:0.511 0.519:0.519:0.519 0.535:0.535:0.535 0.573:0.573:0.573 0.648:0.648:0.648 0.775:0.775:0.775)
	    (0.395:0.395:0.395 0.397:0.397:0.397 0.405:0.405:0.405 0.421:0.421:0.421 0.459:0.459:0.459 0.534:0.534:0.534 0.661:0.661:0.661)
	    (0.167:0.167:0.167 0.169:0.169:0.169 0.177:0.177:0.177 0.193:0.193:0.193 0.231:0.231:0.231 0.306:0.306:0.306 0.433:0.433:0.433)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.003:0.003:0.003 0.078:0.078:0.078 0.206:0.206:0.206)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.116:0.116:0.116 0.108:0.108:0.108 0.091:0.091:0.091 0.054:0.054:0.054 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.346:0.346:0.346 0.344:0.344:0.344 0.336:0.336:0.336 0.319:0.319:0.319 0.282:0.282:0.282 0.206:0.206:0.206 0.131:0.131:0.131)
	    (0.574:0.574:0.574 0.572:0.572:0.572 0.563:0.563:0.563 0.547:0.547:0.547 0.510:0.510:0.510 0.434:0.434:0.434 0.358:0.358:0.358)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.002:0.002:0.002 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.118:0.118:0.118 0.116:0.116:0.116 0.108:0.108:0.108 0.091:0.091:0.091 0.054:0.054:0.054 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.346:0.346:0.346 0.344:0.344:0.344 0.336:0.336:0.336 0.319:0.319:0.319 0.282:0.282:0.282 0.206:0.206:0.206 0.131:0.131:0.131)
	    (0.574:0.574:0.574 0.572:0.572:0.572 0.563:0.563:0.563 0.547:0.547:0.547 0.510:0.510:0.510 0.434:0.434:0.434 0.358:0.358:0.358)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.316:0.316:0.316 0.319:0.319:0.319 0.328:0.328:0.328 0.348:0.348:0.348 0.394:0.394:0.394 0.518:0.518:0.518 0.703:0.703:0.703)
	    (0.309:0.309:0.309 0.312:0.312:0.312 0.322:0.322:0.322 0.342:0.342:0.342 0.388:0.388:0.388 0.511:0.511:0.511 0.697:0.697:0.697)
	    (0.285:0.285:0.285 0.288:0.288:0.288 0.298:0.298:0.298 0.317:0.317:0.317 0.363:0.363:0.363 0.487:0.487:0.487 0.672:0.672:0.672)
	    (0.236:0.236:0.236 0.239:0.239:0.239 0.249:0.249:0.249 0.268:0.268:0.268 0.314:0.314:0.314 0.438:0.438:0.438 0.623:0.623:0.623)
	    (0.122:0.122:0.122 0.125:0.125:0.125 0.135:0.135:0.135 0.154:0.154:0.154 0.200:0.200:0.200 0.324:0.324:0.324 0.509:0.509:0.509)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.096:0.096:0.096 0.281:0.281:0.281)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.316:0.316:0.316 0.319:0.319:0.319 0.328:0.328:0.328 0.348:0.348:0.348 0.394:0.394:0.394 0.518:0.518:0.518 0.703:0.703:0.703)
	    (0.309:0.309:0.309 0.312:0.312:0.312 0.322:0.322:0.322 0.342:0.342:0.342 0.388:0.388:0.388 0.511:0.511:0.511 0.697:0.697:0.697)
	    (0.285:0.285:0.285 0.288:0.288:0.288 0.298:0.298:0.298 0.317:0.317:0.317 0.363:0.363:0.363 0.487:0.487:0.487 0.672:0.672:0.672)
	    (0.236:0.236:0.236 0.239:0.239:0.239 0.249:0.249:0.249 0.268:0.268:0.268 0.314:0.314:0.314 0.438:0.438:0.438 0.623:0.623:0.623)
	    (0.122:0.122:0.122 0.125:0.125:0.125 0.135:0.135:0.135 0.154:0.154:0.154 0.200:0.200:0.200 0.324:0.324:0.324 0.509:0.509:0.509)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.096:0.096:0.096 0.281:0.281:0.281)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.053:0.053:0.053)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.010:0.010:0.010 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.059:0.059:0.059 0.054:0.054:0.054 0.034:0.034:0.034 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.173:0.173:0.173 0.168:0.168:0.168 0.148:0.148:0.148 0.108:0.108:0.108 0.016:0.016:0.016 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.401:0.401:0.401 0.396:0.396:0.396 0.376:0.376:0.376 0.336:0.336:0.336 0.244:0.244:0.244 0.066:0.066:0.066 0.000:0.000:0.000)
	    (0.629:0.629:0.629 0.624:0.624:0.624 0.604:0.604:0.604 0.564:0.564:0.564 0.472:0.472:0.472 0.294:0.294:0.294 0.202:0.202:0.202)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.010:0.010:0.010 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.059:0.059:0.059 0.054:0.054:0.054 0.034:0.034:0.034 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.173:0.173:0.173 0.168:0.168:0.168 0.148:0.148:0.148 0.108:0.108:0.108 0.016:0.016:0.016 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.401:0.401:0.401 0.396:0.396:0.396 0.376:0.376:0.376 0.336:0.336:0.336 0.244:0.244:0.244 0.066:0.066:0.066 0.000:0.000:0.000)
	    (0.629:0.629:0.629 0.624:0.624:0.624 0.604:0.604:0.604 0.564:0.564:0.564 0.472:0.472:0.472 0.294:0.294:0.294 0.202:0.202:0.202)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.363:0.363:0.363 0.366:0.366:0.366 0.378:0.378:0.378 0.408:0.408:0.408 0.483:0.483:0.483 0.632:0.632:0.632 0.782:0.782:0.782)
	    (0.356:0.356:0.356 0.359:0.359:0.359 0.371:0.371:0.371 0.401:0.401:0.401 0.476:0.476:0.476 0.626:0.626:0.626 0.776:0.776:0.776)
	    (0.332:0.332:0.332 0.335:0.335:0.335 0.347:0.347:0.347 0.377:0.377:0.377 0.452:0.452:0.452 0.601:0.601:0.601 0.751:0.751:0.751)
	    (0.283:0.283:0.283 0.286:0.286:0.286 0.298:0.298:0.298 0.328:0.328:0.328 0.403:0.403:0.403 0.553:0.553:0.553 0.702:0.702:0.702)
	    (0.169:0.169:0.169 0.172:0.172:0.172 0.184:0.184:0.184 0.214:0.214:0.214 0.289:0.289:0.289 0.439:0.439:0.439 0.589:0.589:0.589)
	    (0.091:0.091:0.091 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.187:0.187:0.187 0.299:0.299:0.299 0.419:0.419:0.419)
	    (0.091:0.091:0.091 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.187:0.187:0.187 0.299:0.299:0.299 0.419:0.419:0.419)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.363:0.363:0.363 0.366:0.366:0.366 0.378:0.378:0.378 0.408:0.408:0.408 0.483:0.483:0.483 0.632:0.632:0.632 0.782:0.782:0.782)
	    (0.356:0.356:0.356 0.359:0.359:0.359 0.371:0.371:0.371 0.401:0.401:0.401 0.476:0.476:0.476 0.626:0.626:0.626 0.776:0.776:0.776)
	    (0.332:0.332:0.332 0.335:0.335:0.335 0.347:0.347:0.347 0.377:0.377:0.377 0.452:0.452:0.452 0.601:0.601:0.601 0.751:0.751:0.751)
	    (0.283:0.283:0.283 0.286:0.286:0.286 0.298:0.298:0.298 0.328:0.328:0.328 0.403:0.403:0.403 0.553:0.553:0.553 0.702:0.702:0.702)
	    (0.169:0.169:0.169 0.172:0.172:0.172 0.184:0.184:0.184 0.214:0.214:0.214 0.289:0.289:0.289 0.439:0.439:0.439 0.589:0.589:0.589)
	    (0.091:0.091:0.091 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.187:0.187:0.187 0.299:0.299:0.299 0.419:0.419:0.419)
	    (0.091:0.091:0.091 0.094:0.094:0.094 0.106:0.106:0.106 0.130:0.130:0.130 0.187:0.187:0.187 0.299:0.299:0.299 0.419:0.419:0.419)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.155:0.155:0.155 0.150:0.150:0.150 0.134:0.134:0.134 0.102:0.102:0.102 0.027:0.027:0.027 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.383:0.383:0.383 0.378:0.378:0.378 0.362:0.362:0.362 0.330:0.330:0.330 0.255:0.255:0.255 0.127:0.127:0.127 0.015:0.015:0.015)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.155:0.155:0.155 0.150:0.150:0.150 0.134:0.134:0.134 0.102:0.102:0.102 0.027:0.027:0.027 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.383:0.383:0.383 0.378:0.378:0.378 0.362:0.362:0.362 0.330:0.330:0.330 0.255:0.255:0.255 0.127:0.127:0.127 0.015:0.015:0.015)
	  )))
TIMING_model (period_tcyc (const (1.91795191571)))
TIMING_model (tpw_tckl (const (0.282799999999998)))
TIMING_model (tpw_tckh (const (0.2091)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  ((0.111 0.122 0.155 0.209 0.370 0.672 0.974))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  ((0.073 0.079 0.098 0.128 0.219 0.388 0.558))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  (
	    (2.002:2.002:2.002 2.007:2.007:2.007 2.024:2.024:2.024 2.051:2.051:2.051 2.132:2.132:2.132 2.283:2.283:2.283 2.434:2.434:2.434)
	    (2.009:2.009:2.009 2.014:2.014:2.014 2.030:2.030:2.030 2.057:2.057:2.057 2.138:2.138:2.138 2.289:2.289:2.289 2.440:2.440:2.440)
	    (2.033:2.033:2.033 2.038:2.038:2.038 2.055:2.055:2.055 2.082:2.082:2.082 2.163:2.163:2.163 2.314:2.314:2.314 2.465:2.465:2.465)
	    (2.082:2.082:2.082 2.087:2.087:2.087 2.103:2.103:2.103 2.130:2.130:2.130 2.211:2.211:2.211 2.363:2.363:2.363 2.514:2.514:2.514)
	    (2.196:2.196:2.196 2.201:2.201:2.201 2.217:2.217:2.217 2.244:2.244:2.244 2.325:2.325:2.325 2.477:2.477:2.477 2.628:2.628:2.628)
	    (2.424:2.424:2.424 2.429:2.429:2.429 2.445:2.445:2.445 2.472:2.472:2.472 2.553:2.553:2.553 2.704:2.704:2.704 2.856:2.856:2.856)
	    (2.652:2.652:2.652 2.657:2.657:2.657 2.673:2.673:2.673 2.700:2.700:2.700 2.781:2.781:2.781 2.932:2.932:2.932 3.084:3.084:3.084)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.022 0.032 0.062 0.112 0.262 0.542 0.822)
	  (
	    (1.998:1.998:1.998 2.002:2.002:2.002 2.013:2.013:2.013 2.032:2.032:2.032 2.089:2.089:2.089 2.195:2.195:2.195 2.301:2.301:2.301)
	    (2.005:2.005:2.005 2.009:2.009:2.009 2.020:2.020:2.020 2.039:2.039:2.039 2.096:2.096:2.096 2.201:2.201:2.201 2.307:2.307:2.307)
	    (2.029:2.029:2.029 2.033:2.033:2.033 2.044:2.044:2.044 2.063:2.063:2.063 2.120:2.120:2.120 2.226:2.226:2.226 2.332:2.332:2.332)
	    (2.078:2.078:2.078 2.082:2.082:2.082 2.093:2.093:2.093 2.112:2.112:2.112 2.169:2.169:2.169 2.275:2.275:2.275 2.381:2.381:2.381)
	    (2.192:2.192:2.192 2.196:2.196:2.196 2.207:2.207:2.207 2.226:2.226:2.226 2.283:2.283:2.283 2.389:2.389:2.389 2.495:2.495:2.495)
	    (2.420:2.420:2.420 2.424:2.424:2.424 2.435:2.435:2.435 2.454:2.454:2.454 2.511:2.511:2.511 2.617:2.617:2.617 2.722:2.722:2.722)
	    (2.648:2.648:2.648 2.652:2.652:2.652 2.663:2.663:2.663 2.682:2.682:2.682 2.739:2.739:2.739 2.845:2.845:2.845 2.950:2.950:2.950)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 1.080:1.080:1.080 1.232:1.232:1.232)
	    (0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 1.086:1.086:1.086 1.237:1.237:1.237)
	    (0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 1.105:1.105:1.105 1.256:1.256:1.256)
	    (1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.143:1.143:1.143 1.294:1.294:1.294)
	    (1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.233:1.233:1.233 1.384:1.384:1.384)
	    (1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.262:1.262:1.262 1.413:1.413:1.413 1.564:1.564:1.564)
	    (1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.441:1.441:1.441 1.592:1.592:1.592 1.744:1.744:1.744)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 0.964:0.964:0.964 1.037:1.037:1.037)
	    (0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 0.968:0.968:0.968 1.042:1.042:1.042)
	    (0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 0.983:0.983:0.983 1.061:1.061:1.061)
	    (1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.012:1.012:1.012 1.100:1.100:1.100)
	    (1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.082:1.082:1.082 1.084:1.084:1.084 1.189:1.189:1.189)
	    (1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.221:1.221:1.221 1.263:1.263:1.263 1.369:1.369:1.369)
	    (1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.360:1.360:1.360 1.443:1.443:1.443 1.549:1.549:1.549)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.822) error(2.147483647e3))
 capacitance(0.022)
)
bus(A[7:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(4.000) error(4.000))
 capacitance(0.157)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.121)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.081))
pin(VSS pintype(ground) vdrop_limit(0.081))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
