/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD1024X32 -words 1024 -bits 32 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD1024X32
 *      Words:          1024
 *      Word Width:     32
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        typical
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 13:08:09Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:08:26Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("typical")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(25.000)
  voltage(1.800)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(2.800) error(2.800))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD1024X32

Area (265487.493)
CT_TOLERANCE(0.180)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.383:0.383:0.383 0.389:0.389:0.389 0.399:0.399:0.399 0.471:0.471:0.471)
	    (0.375:0.375:0.375 0.376:0.376:0.376 0.376:0.376:0.376 0.379:0.379:0.379 0.385:0.385:0.385 0.395:0.395:0.395 0.467:0.467:0.467)
	    (0.370:0.370:0.370 0.370:0.370:0.370 0.371:0.371:0.371 0.374:0.374:0.374 0.380:0.380:0.380 0.390:0.390:0.390 0.462:0.462:0.462)
	    (0.349:0.349:0.349 0.350:0.350:0.350 0.350:0.350:0.350 0.353:0.353:0.353 0.359:0.359:0.359 0.369:0.369:0.369 0.441:0.441:0.441)
	    (0.307:0.307:0.307 0.308:0.308:0.308 0.309:0.309:0.309 0.311:0.311:0.311 0.317:0.317:0.317 0.327:0.327:0.327 0.399:0.399:0.399)
	    (0.234:0.234:0.234 0.235:0.235:0.235 0.236:0.236:0.236 0.239:0.239:0.239 0.244:0.244:0.244 0.254:0.254:0.254 0.326:0.326:0.326)
	    (0.088:0.088:0.088 0.089:0.089:0.089 0.090:0.090:0.090 0.093:0.093:0.093 0.098:0.098:0.098 0.108:0.108:0.108 0.180:0.180:0.180)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.383:0.383:0.383 0.389:0.389:0.389 0.399:0.399:0.399 0.471:0.471:0.471)
	    (0.375:0.375:0.375 0.376:0.376:0.376 0.376:0.376:0.376 0.379:0.379:0.379 0.385:0.385:0.385 0.395:0.395:0.395 0.467:0.467:0.467)
	    (0.370:0.370:0.370 0.370:0.370:0.370 0.371:0.371:0.371 0.374:0.374:0.374 0.380:0.380:0.380 0.390:0.390:0.390 0.462:0.462:0.462)
	    (0.349:0.349:0.349 0.350:0.350:0.350 0.350:0.350:0.350 0.353:0.353:0.353 0.359:0.359:0.359 0.369:0.369:0.369 0.441:0.441:0.441)
	    (0.307:0.307:0.307 0.308:0.308:0.308 0.309:0.309:0.309 0.311:0.311:0.311 0.317:0.317:0.317 0.327:0.327:0.327 0.399:0.399:0.399)
	    (0.234:0.234:0.234 0.235:0.235:0.235 0.236:0.236:0.236 0.239:0.239:0.239 0.244:0.244:0.244 0.254:0.254:0.254 0.326:0.326:0.326)
	    (0.088:0.088:0.088 0.089:0.089:0.089 0.090:0.090:0.090 0.093:0.093:0.093 0.098:0.098:0.098 0.108:0.108:0.108 0.180:0.180:0.180)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.037:0.037:0.037 0.037:0.037:0.037 0.036:0.036:0.036 0.033:0.033:0.033 0.028:0.028:0.028 0.018:0.018:0.018 0.000:0.000:0.000)
	    (0.042:0.042:0.042 0.041:0.041:0.041 0.040:0.040:0.040 0.037:0.037:0.037 0.032:0.032:0.032 0.022:0.022:0.022 0.002:0.002:0.002)
	    (0.047:0.047:0.047 0.046:0.046:0.046 0.046:0.046:0.046 0.043:0.043:0.043 0.037:0.037:0.037 0.027:0.027:0.027 0.007:0.007:0.007)
	    (0.068:0.068:0.068 0.067:0.067:0.067 0.066:0.066:0.066 0.064:0.064:0.064 0.058:0.058:0.058 0.048:0.048:0.048 0.028:0.028:0.028)
	    (0.109:0.109:0.109 0.109:0.109:0.109 0.108:0.108:0.108 0.105:0.105:0.105 0.099:0.099:0.099 0.089:0.089:0.089 0.069:0.069:0.069)
	    (0.182:0.182:0.182 0.182:0.182:0.182 0.181:0.181:0.181 0.178:0.178:0.178 0.172:0.172:0.172 0.162:0.162:0.162 0.142:0.142:0.142)
	    (0.328:0.328:0.328 0.328:0.328:0.328 0.327:0.327:0.327 0.324:0.324:0.324 0.318:0.318:0.318 0.308:0.308:0.308 0.288:0.288:0.288)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.016:0.016:0.016 0.013:0.013:0.013 0.008:0.008:0.008 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.020:0.020:0.020 0.017:0.017:0.017 0.013:0.013:0.013 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.026:0.026:0.026 0.022:0.022:0.022 0.018:0.018:0.018 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.047:0.047:0.047 0.043:0.043:0.043 0.039:0.039:0.039 0.021:0.021:0.021 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.088:0.088:0.088 0.085:0.085:0.085 0.080:0.080:0.080 0.063:0.063:0.063 0.028:0.028:0.028 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.161:0.161:0.161 0.158:0.158:0.158 0.153:0.153:0.153 0.136:0.136:0.136 0.101:0.101:0.101 0.040:0.040:0.040 0.000:0.000:0.000)
	    (0.307:0.307:0.307 0.304:0.304:0.304 0.299:0.299:0.299 0.282:0.282:0.282 0.247:0.247:0.247 0.185:0.185:0.185 0.063:0.063:0.063)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.410:0.410:0.410 0.410:0.410:0.410 0.412:0.412:0.412 0.416:0.416:0.416 0.424:0.424:0.424 0.442:0.442:0.442 0.596:0.596:0.596)
	    (0.406:0.406:0.406 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.420:0.420:0.420 0.438:0.438:0.438 0.591:0.591:0.591)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.415:0.415:0.415 0.432:0.432:0.432 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.394:0.394:0.394 0.412:0.412:0.412 0.565:0.565:0.565)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.297:0.297:0.297 0.451:0.451:0.451)
	    (0.119:0.119:0.119 0.120:0.120:0.120 0.121:0.121:0.121 0.125:0.125:0.125 0.133:0.133:0.133 0.151:0.151:0.151 0.305:0.305:0.305)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.410:0.410:0.410 0.410:0.410:0.410 0.412:0.412:0.412 0.416:0.416:0.416 0.424:0.424:0.424 0.442:0.442:0.442 0.596:0.596:0.596)
	    (0.406:0.406:0.406 0.406:0.406:0.406 0.407:0.407:0.407 0.411:0.411:0.411 0.420:0.420:0.420 0.438:0.438:0.438 0.591:0.591:0.591)
	    (0.400:0.400:0.400 0.401:0.401:0.401 0.402:0.402:0.402 0.406:0.406:0.406 0.415:0.415:0.415 0.432:0.432:0.432 0.586:0.586:0.586)
	    (0.379:0.379:0.379 0.380:0.380:0.380 0.381:0.381:0.381 0.385:0.385:0.385 0.394:0.394:0.394 0.412:0.412:0.412 0.565:0.565:0.565)
	    (0.338:0.338:0.338 0.339:0.339:0.339 0.340:0.340:0.340 0.344:0.344:0.344 0.352:0.352:0.352 0.370:0.370:0.370 0.524:0.524:0.524)
	    (0.265:0.265:0.265 0.266:0.266:0.266 0.267:0.267:0.267 0.271:0.271:0.271 0.279:0.279:0.279 0.297:0.297:0.297 0.451:0.451:0.451)
	    (0.119:0.119:0.119 0.120:0.120:0.120 0.121:0.121:0.121 0.125:0.125:0.125 0.133:0.133:0.133 0.151:0.151:0.151 0.305:0.305:0.305)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.082:0.082:0.082 0.067:0.067:0.067 0.039:0.039:0.039)
	    (0.242:0.242:0.242 0.241:0.241:0.241 0.240:0.240:0.240 0.236:0.236:0.236 0.228:0.228:0.228 0.213:0.213:0.213 0.185:0.185:0.185)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.023:0.023:0.023 0.022:0.022:0.022 0.021:0.021:0.021 0.017:0.017:0.017 0.009:0.009:0.009 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.096:0.096:0.096 0.095:0.095:0.095 0.094:0.094:0.094 0.090:0.090:0.090 0.082:0.082:0.082 0.067:0.067:0.067 0.039:0.039:0.039)
	    (0.242:0.242:0.242 0.241:0.241:0.241 0.240:0.240:0.240 0.236:0.236:0.236 0.228:0.228:0.228 0.213:0.213:0.213 0.185:0.185:0.185)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.237:0.237:0.237 0.238:0.238:0.238 0.239:0.239:0.239 0.245:0.245:0.245 0.257:0.257:0.257 0.334:0.334:0.334 0.535:0.535:0.535)
	    (0.232:0.232:0.232 0.234:0.234:0.234 0.235:0.235:0.235 0.241:0.241:0.241 0.253:0.253:0.253 0.330:0.330:0.330 0.530:0.530:0.530)
	    (0.227:0.227:0.227 0.228:0.228:0.228 0.230:0.230:0.230 0.236:0.236:0.236 0.248:0.248:0.248 0.325:0.325:0.325 0.525:0.525:0.525)
	    (0.206:0.206:0.206 0.207:0.207:0.207 0.209:0.209:0.209 0.215:0.215:0.215 0.227:0.227:0.227 0.304:0.304:0.304 0.504:0.504:0.504)
	    (0.165:0.165:0.165 0.166:0.166:0.166 0.167:0.167:0.167 0.173:0.173:0.173 0.185:0.185:0.185 0.262:0.262:0.262 0.463:0.463:0.463)
	    (0.092:0.092:0.092 0.093:0.093:0.093 0.094:0.094:0.094 0.100:0.100:0.100 0.112:0.112:0.112 0.189:0.189:0.189 0.390:0.390:0.390)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.043:0.043:0.043 0.244:0.244:0.244)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.237:0.237:0.237 0.238:0.238:0.238 0.239:0.239:0.239 0.245:0.245:0.245 0.257:0.257:0.257 0.334:0.334:0.334 0.535:0.535:0.535)
	    (0.232:0.232:0.232 0.234:0.234:0.234 0.235:0.235:0.235 0.241:0.241:0.241 0.253:0.253:0.253 0.330:0.330:0.330 0.530:0.530:0.530)
	    (0.227:0.227:0.227 0.228:0.228:0.228 0.230:0.230:0.230 0.236:0.236:0.236 0.248:0.248:0.248 0.325:0.325:0.325 0.525:0.525:0.525)
	    (0.206:0.206:0.206 0.207:0.207:0.207 0.209:0.209:0.209 0.215:0.215:0.215 0.227:0.227:0.227 0.304:0.304:0.304 0.504:0.504:0.504)
	    (0.165:0.165:0.165 0.166:0.166:0.166 0.167:0.167:0.167 0.173:0.173:0.173 0.185:0.185:0.185 0.262:0.262:0.262 0.463:0.463:0.463)
	    (0.092:0.092:0.092 0.093:0.093:0.093 0.094:0.094:0.094 0.100:0.100:0.100 0.112:0.112:0.112 0.189:0.189:0.189 0.390:0.390:0.390)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.043:0.043:0.043 0.244:0.244:0.244)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.046:0.046:0.046 0.040:0.040:0.040 0.033:0.033:0.033 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.119:0.119:0.119 0.113:0.113:0.113 0.106:0.106:0.106 0.078:0.078:0.078 0.020:0.020:0.020 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.265:0.265:0.265 0.259:0.259:0.259 0.252:0.252:0.252 0.223:0.223:0.223 0.166:0.166:0.166 0.115:0.115:0.115 0.073:0.073:0.073)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.046:0.046:0.046 0.040:0.040:0.040 0.033:0.033:0.033 0.005:0.005:0.005 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.119:0.119:0.119 0.113:0.113:0.113 0.106:0.106:0.106 0.078:0.078:0.078 0.020:0.020:0.020 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.265:0.265:0.265 0.259:0.259:0.259 0.252:0.252:0.252 0.223:0.223:0.223 0.166:0.166:0.166 0.115:0.115:0.115 0.073:0.073:0.073)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.254:0.254:0.254 0.256:0.256:0.256 0.258:0.258:0.258 0.281:0.281:0.281 0.330:0.330:0.330 0.414:0.414:0.414 0.583:0.583:0.583)
	    (0.250:0.250:0.250 0.251:0.251:0.251 0.254:0.254:0.254 0.277:0.277:0.277 0.325:0.325:0.325 0.410:0.410:0.410 0.579:0.579:0.579)
	    (0.244:0.244:0.244 0.246:0.246:0.246 0.248:0.248:0.248 0.272:0.272:0.272 0.320:0.320:0.320 0.405:0.405:0.405 0.574:0.574:0.574)
	    (0.223:0.223:0.223 0.225:0.225:0.225 0.228:0.228:0.228 0.251:0.251:0.251 0.299:0.299:0.299 0.384:0.384:0.384 0.553:0.553:0.553)
	    (0.182:0.182:0.182 0.184:0.184:0.184 0.186:0.186:0.186 0.209:0.209:0.209 0.258:0.258:0.258 0.342:0.342:0.342 0.511:0.511:0.511)
	    (0.109:0.109:0.109 0.111:0.111:0.111 0.113:0.113:0.113 0.136:0.136:0.136 0.185:0.185:0.185 0.269:0.269:0.269 0.438:0.438:0.438)
	    (0.100:0.100:0.100 0.102:0.102:0.102 0.105:0.105:0.105 0.114:0.114:0.114 0.132:0.132:0.132 0.211:0.211:0.211 0.380:0.380:0.380)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.254:0.254:0.254 0.256:0.256:0.256 0.258:0.258:0.258 0.281:0.281:0.281 0.330:0.330:0.330 0.414:0.414:0.414 0.583:0.583:0.583)
	    (0.250:0.250:0.250 0.251:0.251:0.251 0.254:0.254:0.254 0.277:0.277:0.277 0.325:0.325:0.325 0.410:0.410:0.410 0.579:0.579:0.579)
	    (0.244:0.244:0.244 0.246:0.246:0.246 0.248:0.248:0.248 0.272:0.272:0.272 0.320:0.320:0.320 0.405:0.405:0.405 0.574:0.574:0.574)
	    (0.223:0.223:0.223 0.225:0.225:0.225 0.228:0.228:0.228 0.251:0.251:0.251 0.299:0.299:0.299 0.384:0.384:0.384 0.553:0.553:0.553)
	    (0.182:0.182:0.182 0.184:0.184:0.184 0.186:0.186:0.186 0.209:0.209:0.209 0.258:0.258:0.258 0.342:0.342:0.342 0.511:0.511:0.511)
	    (0.109:0.109:0.109 0.111:0.111:0.111 0.113:0.113:0.113 0.136:0.136:0.136 0.185:0.185:0.185 0.269:0.269:0.269 0.438:0.438:0.438)
	    (0.100:0.100:0.100 0.102:0.102:0.102 0.105:0.105:0.105 0.114:0.114:0.114 0.132:0.132:0.132 0.211:0.211:0.211 0.380:0.380:0.380)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.105:0.105:0.105 0.100:0.100:0.100 0.094:0.094:0.094 0.070:0.070:0.070 0.038:0.038:0.038 0.006:0.006:0.006 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.105:0.105:0.105 0.100:0.100:0.100 0.094:0.094:0.094 0.070:0.070:0.070 0.038:0.038:0.038 0.006:0.006:0.006 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (1.23036369740929)))
TIMING_model (tpw_tckl (const (0.180072692307695)))
TIMING_model (tpw_tckh (const (0.1185)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.048 0.055 0.076 0.112 0.218 0.417 0.615))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.046 0.050 0.062 0.081 0.138 0.245 0.353))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.229:1.229:1.229 1.232:1.232:1.232 1.243:1.243:1.243 1.261:1.261:1.261 1.314:1.314:1.314 1.413:1.413:1.413 1.512:1.512:1.512)
	    (1.233:1.233:1.233 1.236:1.236:1.236 1.247:1.247:1.247 1.265:1.265:1.265 1.318:1.318:1.318 1.417:1.417:1.417 1.516:1.516:1.516)
	    (1.238:1.238:1.238 1.242:1.242:1.242 1.252:1.252:1.252 1.270:1.270:1.270 1.323:1.323:1.323 1.422:1.422:1.422 1.521:1.521:1.521)
	    (1.259:1.259:1.259 1.262:1.262:1.262 1.273:1.273:1.273 1.291:1.291:1.291 1.344:1.344:1.344 1.443:1.443:1.443 1.542:1.542:1.542)
	    (1.301:1.301:1.301 1.304:1.304:1.304 1.315:1.315:1.315 1.333:1.333:1.333 1.386:1.386:1.386 1.485:1.485:1.485 1.584:1.584:1.584)
	    (1.374:1.374:1.374 1.377:1.377:1.377 1.388:1.388:1.388 1.405:1.405:1.405 1.459:1.459:1.459 1.558:1.558:1.558 1.657:1.657:1.657)
	    (1.520:1.520:1.520 1.523:1.523:1.523 1.534:1.534:1.534 1.551:1.551:1.551 1.604:1.604:1.604 1.704:1.704:1.704 1.803:1.803:1.803)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (1.227:1.227:1.227 1.230:1.230:1.230 1.237:1.237:1.237 1.249:1.249:1.249 1.285:1.285:1.285 1.352:1.352:1.352 1.419:1.419:1.419)
	    (1.231:1.231:1.231 1.234:1.234:1.234 1.241:1.241:1.241 1.253:1.253:1.253 1.289:1.289:1.289 1.356:1.356:1.356 1.423:1.423:1.423)
	    (1.237:1.237:1.237 1.239:1.239:1.239 1.246:1.246:1.246 1.258:1.258:1.258 1.294:1.294:1.294 1.361:1.361:1.361 1.428:1.428:1.428)
	    (1.257:1.257:1.257 1.260:1.260:1.260 1.267:1.267:1.267 1.279:1.279:1.279 1.315:1.315:1.315 1.382:1.382:1.382 1.449:1.449:1.449)
	    (1.299:1.299:1.299 1.302:1.302:1.302 1.309:1.309:1.309 1.321:1.321:1.321 1.357:1.357:1.357 1.424:1.424:1.424 1.491:1.491:1.491)
	    (1.372:1.372:1.372 1.375:1.375:1.375 1.382:1.382:1.382 1.394:1.394:1.394 1.430:1.430:1.430 1.497:1.497:1.497 1.564:1.564:1.564)
	    (1.518:1.518:1.518 1.520:1.520:1.520 1.528:1.528:1.528 1.540:1.540:1.540 1.576:1.576:1.576 1.643:1.643:1.643 1.710:1.710:1.710)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.685:0.685:0.685 0.784:0.784:0.784)
	    (0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.690:0.690:0.690 0.790:0.790:0.790)
	    (0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.697:0.697:0.697 0.797:0.797:0.797)
	    (0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.725:0.725:0.725 0.824:0.824:0.824)
	    (0.652:0.652:0.652 0.652:0.652:0.652 0.652:0.652:0.652 0.652:0.652:0.652 0.681:0.681:0.681 0.780:0.780:0.780 0.879:0.879:0.879)
	    (0.696:0.696:0.696 0.696:0.696:0.696 0.707:0.707:0.707 0.725:0.725:0.725 0.778:0.778:0.778 0.877:0.877:0.877 0.976:0.976:0.976)
	    (0.886:0.886:0.886 0.890:0.890:0.890 0.901:0.901:0.901 0.918:0.918:0.918 0.971:0.971:0.971 1.070:1.070:1.070 1.170:1.170:1.170)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.100 0.300 0.700 1.400 2.800)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.608:0.608:0.608 0.644:0.644:0.644)
	    (0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.611:0.611:0.611 0.649:0.649:0.649)
	    (0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.614:0.614:0.614 0.656:0.656:0.656)
	    (0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.626:0.626:0.626 0.684:0.684:0.684)
	    (0.652:0.652:0.652 0.652:0.652:0.652 0.652:0.652:0.652 0.652:0.652:0.652 0.652:0.652:0.652 0.672:0.672:0.672 0.739:0.739:0.739)
	    (0.696:0.696:0.696 0.696:0.696:0.696 0.696:0.696:0.696 0.696:0.696:0.696 0.702:0.702:0.702 0.769:0.769:0.769 0.836:0.836:0.836)
	    (0.838:0.838:0.838 0.840:0.840:0.840 0.847:0.847:0.847 0.859:0.859:0.859 0.895:0.895:0.895 0.962:0.962:0.962 1.029:1.029:1.029)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[9:0] bustype(input)
 capacitance(0.055)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(2.800) error(2.800))
 capacitance(0.277)
)
bus(D[31:0] bustype(input)
 capacitance(0.004)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.122)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.090))
pin(VSS pintype(ground) vdrop_limit(0.090))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
