/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2002  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single-Port SRAM
 *           			SMIC 0.18um Logic018 Process
 *      version:		2005Q3V1
 *      comment:		
 *      configuration:	 -instname RA1SHD1024X32 -words 1024 -bits 32 -frequency 20 -ring_width 2 -mux 8 -drive 12 -write_mask on -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -asvm on -libname USERLIB
 *
 *      TLF model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD1024X32
 *      Words:          1024
 *      Word Width:     32
 *      Mux:            8
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:         max
 *
 *      Creation Date:  2002-06-03 13:08:38Z
 *      Version:	2005Q3V1
 *
 *      Verified With: Cadence Pearl
 *
 *      Modeling Assumptions: Warning and Error messages are issued if an input
 *          encounters a slew over the maximum characterized input slew.
 *          Warning messages are issued if an output is presented with greater
 *          that the maximum characterized load.  SDF created with this model
 *          will annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: Due to the limitations of this tool and the
 *          others it interacts with, some data reduction was necessary.  When
 *          reducing data, minimum values were chosen for the fast case corner
 *          and maximum values were used for the typical and best case corners.
 *          It is recommended that critical timing and setup and hold times be
 *          checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */
header(
  library("USERLIB")
  date("2002-06-03 13:08:53Z")
  vendor("Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2002 ARM Physical IP, Inc.")
  environment("slow")
  technology("CMOS")
  version("2005Q3V1")
  tlf_version("4.1")
)
/* wire load */
net_res_model(gateres (linear value(0:~:8.5e-8:5.0e-8 )))
net_cap_model(gatecap (linear value(0:3:1.0e-4:0.005 3:10:3.0e-4:0.002 )))

/* timing properties */
properties(
  /* models for RC delays */
  net_cap (gatecap)
  net_res (gateres)

  /* operating conditions */
  proc_var(1)
  temperature(125.000)
  voltage(1.620)

  /* multipliers and k-factors */
  proc_mult(1.0)
  temp_mult(1.0)
  volt_mult(1.0)

  /* threshold definitions */
  table_input_threshold (0.500)
  table_output_threshold (0.500)
  table_transition_start (0.100)
  table_transition_end (0.900)

  /* defaults */
  slew_limit(warn(4.000) error(4.000))
  load_limit(0.823) /* max output load */

  /* unit attributes */
  unit(
    time_unit(1ns)
    volt_unit(1V)
    current_unit(1uA)
    power_unit(1mW)
    area_unit(1squ)
    cap_unit (1PF)
  )
)

cell(RA1SHD1024X32

Area (265487.493)
CT_TOLERANCE(0.162)

TIMING_model (tch_tas_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.728:0.728:0.728 0.730:0.730:0.730 0.737:0.737:0.737 0.750:0.750:0.750 0.782:0.782:0.782 0.845:0.845:0.845 0.908:0.908:0.908)
	    (0.722:0.722:0.722 0.724:0.724:0.724 0.730:0.730:0.730 0.744:0.744:0.744 0.775:0.775:0.775 0.839:0.839:0.839 0.902:0.902:0.902)
	    (0.697:0.697:0.697 0.699:0.699:0.699 0.706:0.706:0.706 0.720:0.720:0.720 0.751:0.751:0.751 0.814:0.814:0.814 0.877:0.877:0.877)
	    (0.649:0.649:0.649 0.651:0.651:0.651 0.657:0.657:0.657 0.671:0.671:0.671 0.703:0.703:0.703 0.766:0.766:0.766 0.829:0.829:0.829)
	    (0.536:0.536:0.536 0.537:0.537:0.537 0.544:0.544:0.544 0.558:0.558:0.558 0.589:0.589:0.589 0.652:0.652:0.652 0.716:0.716:0.716)
	    (0.309:0.309:0.309 0.311:0.311:0.311 0.318:0.318:0.318 0.331:0.331:0.331 0.363:0.363:0.363 0.426:0.426:0.426 0.489:0.489:0.489)
	    (0.082:0.082:0.082 0.084:0.084:0.084 0.091:0.091:0.091 0.105:0.105:0.105 0.136:0.136:0.136 0.199:0.199:0.199 0.262:0.262:0.262)
	  )))
TIMING_model (tch_tas_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.728:0.728:0.728 0.730:0.730:0.730 0.737:0.737:0.737 0.750:0.750:0.750 0.782:0.782:0.782 0.845:0.845:0.845 0.908:0.908:0.908)
	    (0.722:0.722:0.722 0.724:0.724:0.724 0.730:0.730:0.730 0.744:0.744:0.744 0.775:0.775:0.775 0.839:0.839:0.839 0.902:0.902:0.902)
	    (0.697:0.697:0.697 0.699:0.699:0.699 0.706:0.706:0.706 0.720:0.720:0.720 0.751:0.751:0.751 0.814:0.814:0.814 0.877:0.877:0.877)
	    (0.649:0.649:0.649 0.651:0.651:0.651 0.657:0.657:0.657 0.671:0.671:0.671 0.703:0.703:0.703 0.766:0.766:0.766 0.829:0.829:0.829)
	    (0.536:0.536:0.536 0.537:0.537:0.537 0.544:0.544:0.544 0.558:0.558:0.558 0.589:0.589:0.589 0.652:0.652:0.652 0.716:0.716:0.716)
	    (0.309:0.309:0.309 0.311:0.311:0.311 0.318:0.318:0.318 0.331:0.331:0.331 0.363:0.363:0.363 0.426:0.426:0.426 0.489:0.489:0.489)
	    (0.082:0.082:0.082 0.084:0.084:0.084 0.091:0.091:0.091 0.105:0.105:0.105 0.136:0.136:0.136 0.199:0.199:0.199 0.262:0.262:0.262)
	  )))
TIMING_model (tch_tah_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.046:0.046:0.046 0.044:0.044:0.044 0.038:0.038:0.038 0.024:0.024:0.024 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.053:0.053:0.053 0.051:0.051:0.051 0.044:0.044:0.044 0.031:0.031:0.031 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.077:0.077:0.077 0.075:0.075:0.075 0.068:0.068:0.068 0.055:0.055:0.055 0.023:0.023:0.023 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.126:0.126:0.126 0.124:0.124:0.124 0.117:0.117:0.117 0.103:0.103:0.103 0.072:0.072:0.072 0.009:0.009:0.009 0.000:0.000:0.000)
	    (0.239:0.239:0.239 0.237:0.237:0.237 0.230:0.230:0.230 0.217:0.217:0.217 0.185:0.185:0.185 0.122:0.122:0.122 0.059:0.059:0.059)
	    (0.465:0.465:0.465 0.464:0.464:0.464 0.457:0.457:0.457 0.443:0.443:0.443 0.412:0.412:0.412 0.349:0.349:0.349 0.285:0.285:0.285)
	    (0.692:0.692:0.692 0.690:0.690:0.690 0.683:0.683:0.683 0.670:0.670:0.670 0.638:0.638:0.638 0.575:0.575:0.575 0.512:0.512:0.512)
	  )))
TIMING_model (tch_tah_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.007:0.007:0.007 0.004:0.004:0.004 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.014:0.014:0.014 0.011:0.011:0.011 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.038:0.038:0.038 0.035:0.035:0.035 0.024:0.024:0.024 0.003:0.003:0.003 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.086:0.086:0.086 0.084:0.084:0.084 0.073:0.073:0.073 0.051:0.051:0.051 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.200:0.200:0.200 0.197:0.197:0.197 0.186:0.186:0.186 0.164:0.164:0.164 0.114:0.114:0.114 0.013:0.013:0.013 0.000:0.000:0.000)
	    (0.426:0.426:0.426 0.423:0.423:0.423 0.413:0.413:0.413 0.391:0.391:0.391 0.341:0.341:0.341 0.240:0.240:0.240 0.139:0.139:0.139)
	    (0.653:0.653:0.653 0.650:0.650:0.650 0.639:0.639:0.639 0.618:0.618:0.618 0.567:0.567:0.567 0.466:0.466:0.466 0.366:0.366:0.366)
	  )))
TIMING_model (tch_tcs_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.661:0.661:0.661 0.663:0.663:0.663 0.671:0.671:0.671 0.687:0.687:0.687 0.725:0.725:0.725 0.801:0.801:0.801 0.889:0.889:0.889)
	    (0.654:0.654:0.654 0.657:0.657:0.657 0.665:0.665:0.665 0.681:0.681:0.681 0.719:0.719:0.719 0.794:0.794:0.794 0.883:0.883:0.883)
	    (0.630:0.630:0.630 0.632:0.632:0.632 0.640:0.640:0.640 0.657:0.657:0.657 0.694:0.694:0.694 0.770:0.770:0.770 0.859:0.859:0.859)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.721:0.721:0.721 0.810:0.810:0.810)
	    (0.468:0.468:0.468 0.471:0.471:0.471 0.479:0.479:0.479 0.495:0.495:0.495 0.533:0.533:0.533 0.608:0.608:0.608 0.697:0.697:0.697)
	    (0.242:0.242:0.242 0.244:0.244:0.244 0.252:0.252:0.252 0.268:0.268:0.268 0.306:0.306:0.306 0.382:0.382:0.382 0.470:0.470:0.470)
	    (0.015:0.015:0.015 0.017:0.017:0.017 0.026:0.026:0.026 0.042:0.042:0.042 0.079:0.079:0.079 0.155:0.155:0.155 0.244:0.244:0.244)
	  )))
TIMING_model (tch_tcs_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.661:0.661:0.661 0.663:0.663:0.663 0.671:0.671:0.671 0.687:0.687:0.687 0.725:0.725:0.725 0.801:0.801:0.801 0.889:0.889:0.889)
	    (0.654:0.654:0.654 0.657:0.657:0.657 0.665:0.665:0.665 0.681:0.681:0.681 0.719:0.719:0.719 0.794:0.794:0.794 0.883:0.883:0.883)
	    (0.630:0.630:0.630 0.632:0.632:0.632 0.640:0.640:0.640 0.657:0.657:0.657 0.694:0.694:0.694 0.770:0.770:0.770 0.859:0.859:0.859)
	    (0.582:0.582:0.582 0.584:0.584:0.584 0.592:0.592:0.592 0.608:0.608:0.608 0.646:0.646:0.646 0.721:0.721:0.721 0.810:0.810:0.810)
	    (0.468:0.468:0.468 0.471:0.471:0.471 0.479:0.479:0.479 0.495:0.495:0.495 0.533:0.533:0.533 0.608:0.608:0.608 0.697:0.697:0.697)
	    (0.242:0.242:0.242 0.244:0.244:0.244 0.252:0.252:0.252 0.268:0.268:0.268 0.306:0.306:0.306 0.382:0.382:0.382 0.470:0.470:0.470)
	    (0.015:0.015:0.015 0.017:0.017:0.017 0.026:0.026:0.026 0.042:0.042:0.042 0.079:0.079:0.079 0.155:0.155:0.155 0.244:0.244:0.244)
	  )))
TIMING_model (tch_tch_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.117:0.117:0.117 0.115:0.115:0.115 0.107:0.107:0.107 0.090:0.090:0.090 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.343:0.343:0.343 0.341:0.341:0.341 0.333:0.333:0.333 0.317:0.317:0.317 0.279:0.279:0.279 0.204:0.204:0.204 0.128:0.128:0.128)
	    (0.570:0.570:0.570 0.568:0.568:0.568 0.560:0.560:0.560 0.544:0.544:0.544 0.506:0.506:0.506 0.430:0.430:0.430 0.355:0.355:0.355)
	  )))
TIMING_model (tch_tch_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.004:0.004:0.004 0.001:0.001:0.001 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.117:0.117:0.117 0.115:0.115:0.115 0.107:0.107:0.107 0.090:0.090:0.090 0.053:0.053:0.053 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.343:0.343:0.343 0.341:0.341:0.341 0.333:0.333:0.333 0.317:0.317:0.317 0.279:0.279:0.279 0.204:0.204:0.204 0.128:0.128:0.128)
	    (0.570:0.570:0.570 0.568:0.568:0.568 0.560:0.560:0.560 0.544:0.544:0.544 0.506:0.506:0.506 0.430:0.430:0.430 0.355:0.355:0.355)
	  )))
TIMING_model (tch_tds_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.414:0.414:0.414 0.416:0.416:0.416 0.426:0.426:0.426 0.446:0.446:0.446 0.492:0.492:0.492 0.583:0.583:0.583 0.759:0.759:0.759)
	    (0.407:0.407:0.407 0.410:0.410:0.410 0.419:0.419:0.419 0.439:0.439:0.439 0.485:0.485:0.485 0.577:0.577:0.577 0.753:0.753:0.753)
	    (0.383:0.383:0.383 0.385:0.385:0.385 0.395:0.395:0.395 0.415:0.415:0.415 0.461:0.461:0.461 0.553:0.553:0.553 0.728:0.728:0.728)
	    (0.334:0.334:0.334 0.337:0.337:0.337 0.347:0.347:0.347 0.366:0.366:0.366 0.412:0.412:0.412 0.504:0.504:0.504 0.680:0.680:0.680)
	    (0.221:0.221:0.221 0.224:0.224:0.224 0.233:0.233:0.233 0.253:0.253:0.253 0.299:0.299:0.299 0.391:0.391:0.391 0.567:0.567:0.567)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.007:0.007:0.007 0.026:0.026:0.026 0.072:0.072:0.072 0.164:0.164:0.164 0.340:0.340:0.340)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.113:0.113:0.113)
	  )))
TIMING_model (tch_tds_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.414:0.414:0.414 0.416:0.416:0.416 0.426:0.426:0.426 0.446:0.446:0.446 0.492:0.492:0.492 0.583:0.583:0.583 0.759:0.759:0.759)
	    (0.407:0.407:0.407 0.410:0.410:0.410 0.419:0.419:0.419 0.439:0.439:0.439 0.485:0.485:0.485 0.577:0.577:0.577 0.753:0.753:0.753)
	    (0.383:0.383:0.383 0.385:0.385:0.385 0.395:0.395:0.395 0.415:0.415:0.415 0.461:0.461:0.461 0.553:0.553:0.553 0.728:0.728:0.728)
	    (0.334:0.334:0.334 0.337:0.337:0.337 0.347:0.347:0.347 0.366:0.366:0.366 0.412:0.412:0.412 0.504:0.504:0.504 0.680:0.680:0.680)
	    (0.221:0.221:0.221 0.224:0.224:0.224 0.233:0.233:0.233 0.253:0.253:0.253 0.299:0.299:0.299 0.391:0.391:0.391 0.567:0.567:0.567)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.007:0.007:0.007 0.026:0.026:0.026 0.072:0.072:0.072 0.164:0.164:0.164 0.340:0.340:0.340)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.113:0.113:0.113)
	  )))
TIMING_model (tch_tdh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.019:0.019:0.019 0.013:0.013:0.013 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.132:0.132:0.132 0.127:0.127:0.127 0.107:0.107:0.107 0.067:0.067:0.067 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.358:0.358:0.358 0.353:0.353:0.353 0.333:0.333:0.333 0.294:0.294:0.294 0.201:0.201:0.201 0.016:0.016:0.016 0.000:0.000:0.000)
	    (0.585:0.585:0.585 0.580:0.580:0.580 0.560:0.560:0.560 0.520:0.520:0.520 0.428:0.428:0.428 0.242:0.242:0.242 0.144:0.144:0.144)
	  )))
TIMING_model (tch_tdh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.019:0.019:0.019 0.013:0.013:0.013 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.132:0.132:0.132 0.127:0.127:0.127 0.107:0.107:0.107 0.067:0.067:0.067 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.358:0.358:0.358 0.353:0.353:0.353 0.333:0.333:0.333 0.294:0.294:0.294 0.201:0.201:0.201 0.016:0.016:0.016 0.000:0.000:0.000)
	    (0.585:0.585:0.585 0.580:0.580:0.580 0.560:0.560:0.560 0.520:0.520:0.520 0.428:0.428:0.428 0.242:0.242:0.242 0.144:0.144:0.144)
	  )))
TIMING_model (tch_tws_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.438:0.438:0.438 0.442:0.442:0.442 0.454:0.454:0.454 0.485:0.485:0.485 0.560:0.560:0.560 0.710:0.710:0.710 0.860:0.860:0.860)
	    (0.432:0.432:0.432 0.435:0.435:0.435 0.447:0.447:0.447 0.479:0.479:0.479 0.554:0.554:0.554 0.703:0.703:0.703 0.853:0.853:0.853)
	    (0.408:0.408:0.408 0.411:0.411:0.411 0.423:0.423:0.423 0.454:0.454:0.454 0.529:0.529:0.529 0.679:0.679:0.679 0.829:0.829:0.829)
	    (0.359:0.359:0.359 0.362:0.362:0.362 0.374:0.374:0.374 0.406:0.406:0.406 0.481:0.481:0.481 0.631:0.631:0.631 0.780:0.780:0.780)
	    (0.246:0.246:0.246 0.249:0.249:0.249 0.261:0.261:0.261 0.293:0.293:0.293 0.367:0.367:0.367 0.517:0.517:0.517 0.667:0.667:0.667)
	    (0.152:0.152:0.152 0.155:0.155:0.155 0.167:0.167:0.167 0.191:0.191:0.191 0.247:0.247:0.247 0.360:0.360:0.360 0.481:0.481:0.481)
	    (0.152:0.152:0.152 0.155:0.155:0.155 0.167:0.167:0.167 0.191:0.191:0.191 0.247:0.247:0.247 0.360:0.360:0.360 0.481:0.481:0.481)
	  )))
TIMING_model (tch_tws_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.438:0.438:0.438 0.442:0.442:0.442 0.454:0.454:0.454 0.485:0.485:0.485 0.560:0.560:0.560 0.710:0.710:0.710 0.860:0.860:0.860)
	    (0.432:0.432:0.432 0.435:0.435:0.435 0.447:0.447:0.447 0.479:0.479:0.479 0.554:0.554:0.554 0.703:0.703:0.703 0.853:0.853:0.853)
	    (0.408:0.408:0.408 0.411:0.411:0.411 0.423:0.423:0.423 0.454:0.454:0.454 0.529:0.529:0.529 0.679:0.679:0.679 0.829:0.829:0.829)
	    (0.359:0.359:0.359 0.362:0.362:0.362 0.374:0.374:0.374 0.406:0.406:0.406 0.481:0.481:0.481 0.631:0.631:0.631 0.780:0.780:0.780)
	    (0.246:0.246:0.246 0.249:0.249:0.249 0.261:0.261:0.261 0.293:0.293:0.293 0.367:0.367:0.367 0.517:0.517:0.517 0.667:0.667:0.667)
	    (0.152:0.152:0.152 0.155:0.155:0.155 0.167:0.167:0.167 0.191:0.191:0.191 0.247:0.247:0.247 0.360:0.360:0.360 0.481:0.481:0.481)
	    (0.152:0.152:0.152 0.155:0.155:0.155 0.167:0.167:0.167 0.191:0.191:0.191 0.247:0.247:0.247 0.360:0.360:0.360 0.481:0.481:0.481)
	  )))
TIMING_model (tch_twh_rise 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.077:0.077:0.077 0.073:0.073:0.073 0.057:0.057:0.057 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.304:0.304:0.304 0.300:0.300:0.300 0.284:0.284:0.284 0.252:0.252:0.252 0.177:0.177:0.177 0.057:0.057:0.057 0.000:0.000:0.000)
	  )))
TIMING_model (tch_twh_fall 	(spline
	  (clock_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.077:0.077:0.077 0.073:0.073:0.073 0.057:0.057:0.057 0.025:0.025:0.025 0.000:0.000:0.000 0.000:0.000:0.000 0.000:0.000:0.000)
	    (0.304:0.304:0.304 0.300:0.300:0.300 0.284:0.284:0.284 0.252:0.252:0.252 0.177:0.177:0.177 0.057:0.057:0.057 0.000:0.000:0.000)
	  )))
TIMING_model (period_tcyc (const (2.16122245129762)))
TIMING_model (tpw_tckl (const (0.3115275)))
TIMING_model (tpw_tckh (const (0.2091)))
TIMING_model (sl_qr 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.105 0.116 0.148 0.201 0.361 0.659 0.958))))
TIMING_model (sl_qf 	(spline
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  ((0.083 0.088 0.106 0.136 0.225 0.392 0.558))))
TIMING_model (dly_f_tanpr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.065:2.065:2.065 2.070:2.070:2.070 2.086:2.086:2.086 2.112:2.112:2.112 2.191:2.191:2.191 2.338:2.338:2.338 2.486:2.486:2.486)
	    (2.071:2.071:2.071 2.077:2.077:2.077 2.092:2.092:2.092 2.119:2.119:2.119 2.198:2.198:2.198 2.345:2.345:2.345 2.492:2.492:2.492)
	    (2.096:2.096:2.096 2.101:2.101:2.101 2.117:2.117:2.117 2.143:2.143:2.143 2.222:2.222:2.222 2.369:2.369:2.369 2.516:2.516:2.516)
	    (2.144:2.144:2.144 2.149:2.149:2.149 2.165:2.165:2.165 2.191:2.191:2.191 2.270:2.270:2.270 2.418:2.418:2.418 2.565:2.565:2.565)
	    (2.257:2.257:2.257 2.263:2.263:2.263 2.278:2.278:2.278 2.305:2.305:2.305 2.384:2.384:2.384 2.531:2.531:2.531 2.678:2.678:2.678)
	    (2.484:2.484:2.484 2.489:2.489:2.489 2.505:2.505:2.505 2.531:2.531:2.531 2.610:2.610:2.610 2.757:2.757:2.757 2.905:2.905:2.905)
	    (2.711:2.711:2.711 2.716:2.716:2.716 2.732:2.732:2.732 2.758:2.758:2.758 2.837:2.837:2.837 2.984:2.984:2.984 3.131:3.131:3.131)
	  )))
TIMING_model (dly_f_tanpf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.023 0.033 0.063 0.113 0.263 0.543 0.823)
	  (
	    (2.066:2.066:2.066 2.069:2.069:2.069 2.081:2.081:2.081 2.100:2.100:2.100 2.156:2.156:2.156 2.261:2.261:2.261 2.366:2.366:2.366)
	    (2.072:2.072:2.072 2.076:2.076:2.076 2.087:2.087:2.087 2.106:2.106:2.106 2.162:2.162:2.162 2.268:2.268:2.268 2.373:2.373:2.373)
	    (2.096:2.096:2.096 2.100:2.100:2.100 2.112:2.112:2.112 2.130:2.130:2.130 2.187:2.187:2.187 2.292:2.292:2.292 2.397:2.397:2.397)
	    (2.145:2.145:2.145 2.149:2.149:2.149 2.160:2.160:2.160 2.179:2.179:2.179 2.235:2.235:2.235 2.340:2.340:2.340 2.446:2.446:2.446)
	    (2.258:2.258:2.258 2.262:2.262:2.262 2.273:2.273:2.273 2.292:2.292:2.292 2.349:2.349:2.349 2.454:2.454:2.454 2.559:2.559:2.559)
	    (2.485:2.485:2.485 2.489:2.489:2.489 2.500:2.500:2.500 2.519:2.519:2.519 2.575:2.575:2.575 2.680:2.680:2.680 2.785:2.785:2.785)
	    (2.711:2.711:2.711 2.715:2.715:2.715 2.726:2.726:2.726 2.745:2.745:2.745 2.802:2.802:2.802 2.907:2.907:2.907 3.012:3.012:3.012)
	  )))
TIMING_model (dly_f_tl_zr 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.084:1.084:1.084 1.232:1.232:1.232)
	    (1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.089:1.089:1.089 1.237:1.237:1.237)
	    (1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.109:1.109:1.109 1.256:1.256:1.256)
	    (1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.147:1.147:1.147 1.294:1.294:1.294)
	    (1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.237:1.237:1.237 1.384:1.384:1.384)
	    (1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.417:1.417:1.417 1.564:1.564:1.564)
	    (1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.449:1.449:1.449 1.596:1.596:1.596 1.744:1.744:1.744)
	  )))
TIMING_model (dly_f_tl_zf 	(spline
	  (input_slew_axis 0.010 0.050 0.200 0.500 1.200 2.600 4.000)
	  (load_axis 0.000 0.010 0.040 0.090 0.240 0.520 0.800)
	  (
	    (1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.016:1.016:1.016 1.030:1.030:1.030)
	    (1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.020:1.020:1.020 1.035:1.035:1.035)
	    (1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.035:1.035:1.035 1.054:1.054:1.054)
	    (1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.064:1.064:1.064 1.092:1.092:1.092)
	    (1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.134:1.134:1.134 1.182:1.182:1.182)
	    (1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.273:1.273:1.273 1.362:1.362:1.362)
	    (1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.412:1.412:1.412 1.436:1.436:1.436 1.542:1.542:1.542)
	  )))

bus(Q[31:0] bustype(output)
 load_limit(warn(0.823) error(2.147483647e3))
 capacitance(0.023)
)
bus(A[9:0] bustype(input)
 capacitance(0.054)
)
pin(CEN pintype(input)
 capacitance(0.015)
)
pin(CLK clock_pin pintype(input)
 slew_limit(warn(4.000) error(4.000))
 capacitance(0.269)
)
bus(D[31:0] bustype(input)
 capacitance(0.003)
)
bus(WEN[3:0] bustype(input)
 capacitance(0.121)
)
pin(OEN pintype(input)
 capacitance(0.010)
)
pin(VDD pintype(supply) vdrop_limit(0.081))
pin(VSS pintype(ground) vdrop_limit(0.081))
setup (A[0] => CLK 01 posedge tch_tas_rise)
setup (A[0] => CLK 10 posedge tch_tas_fall)
hold (A[0] => CLK 01 posedge tch_tah_rise)
hold (A[0] => CLK 10 posedge tch_tah_fall)
setup (A[1] => CLK 01 posedge tch_tas_rise)
setup (A[1] => CLK 10 posedge tch_tas_fall)
hold (A[1] => CLK 01 posedge tch_tah_rise)
hold (A[1] => CLK 10 posedge tch_tah_fall)
setup (A[2] => CLK 01 posedge tch_tas_rise)
setup (A[2] => CLK 10 posedge tch_tas_fall)
hold (A[2] => CLK 01 posedge tch_tah_rise)
hold (A[2] => CLK 10 posedge tch_tah_fall)
setup (A[3] => CLK 01 posedge tch_tas_rise)
setup (A[3] => CLK 10 posedge tch_tas_fall)
hold (A[3] => CLK 01 posedge tch_tah_rise)
hold (A[3] => CLK 10 posedge tch_tah_fall)
setup (A[4] => CLK 01 posedge tch_tas_rise)
setup (A[4] => CLK 10 posedge tch_tas_fall)
hold (A[4] => CLK 01 posedge tch_tah_rise)
hold (A[4] => CLK 10 posedge tch_tah_fall)
setup (A[5] => CLK 01 posedge tch_tas_rise)
setup (A[5] => CLK 10 posedge tch_tas_fall)
hold (A[5] => CLK 01 posedge tch_tah_rise)
hold (A[5] => CLK 10 posedge tch_tah_fall)
setup (A[6] => CLK 01 posedge tch_tas_rise)
setup (A[6] => CLK 10 posedge tch_tas_fall)
hold (A[6] => CLK 01 posedge tch_tah_rise)
hold (A[6] => CLK 10 posedge tch_tah_fall)
setup (A[7] => CLK 01 posedge tch_tas_rise)
setup (A[7] => CLK 10 posedge tch_tas_fall)
hold (A[7] => CLK 01 posedge tch_tah_rise)
hold (A[7] => CLK 10 posedge tch_tah_fall)
setup (A[8] => CLK 01 posedge tch_tas_rise)
setup (A[8] => CLK 10 posedge tch_tas_fall)
hold (A[8] => CLK 01 posedge tch_tah_rise)
hold (A[8] => CLK 10 posedge tch_tah_fall)
setup (A[9] => CLK 01 posedge tch_tas_rise)
setup (A[9] => CLK 10 posedge tch_tas_fall)
hold (A[9] => CLK 01 posedge tch_tah_rise)
hold (A[9] => CLK 10 posedge tch_tah_fall)
setup (CEN => CLK 01 posEdge tch_tcs_rise)
setup (CEN => CLK 10 posEdge tch_tcs_fall)
hold (CEN => CLK 01 posEdge tch_tch_rise)
hold (CEN => CLK 10 posEdge tch_tch_fall)
setup (D[0] => CLK 01 posedge tch_tds_rise)
setup (D[0] => CLK 10 posedge tch_tds_fall)
hold (D[0] => CLK 01 posedge tch_tdh_rise)
hold (D[0] => CLK 10 posedge tch_tdh_fall)
setup (D[1] => CLK 01 posedge tch_tds_rise)
setup (D[1] => CLK 10 posedge tch_tds_fall)
hold (D[1] => CLK 01 posedge tch_tdh_rise)
hold (D[1] => CLK 10 posedge tch_tdh_fall)
setup (D[2] => CLK 01 posedge tch_tds_rise)
setup (D[2] => CLK 10 posedge tch_tds_fall)
hold (D[2] => CLK 01 posedge tch_tdh_rise)
hold (D[2] => CLK 10 posedge tch_tdh_fall)
setup (D[3] => CLK 01 posedge tch_tds_rise)
setup (D[3] => CLK 10 posedge tch_tds_fall)
hold (D[3] => CLK 01 posedge tch_tdh_rise)
hold (D[3] => CLK 10 posedge tch_tdh_fall)
setup (D[4] => CLK 01 posedge tch_tds_rise)
setup (D[4] => CLK 10 posedge tch_tds_fall)
hold (D[4] => CLK 01 posedge tch_tdh_rise)
hold (D[4] => CLK 10 posedge tch_tdh_fall)
setup (D[5] => CLK 01 posedge tch_tds_rise)
setup (D[5] => CLK 10 posedge tch_tds_fall)
hold (D[5] => CLK 01 posedge tch_tdh_rise)
hold (D[5] => CLK 10 posedge tch_tdh_fall)
setup (D[6] => CLK 01 posedge tch_tds_rise)
setup (D[6] => CLK 10 posedge tch_tds_fall)
hold (D[6] => CLK 01 posedge tch_tdh_rise)
hold (D[6] => CLK 10 posedge tch_tdh_fall)
setup (D[7] => CLK 01 posedge tch_tds_rise)
setup (D[7] => CLK 10 posedge tch_tds_fall)
hold (D[7] => CLK 01 posedge tch_tdh_rise)
hold (D[7] => CLK 10 posedge tch_tdh_fall)
setup (D[8] => CLK 01 posedge tch_tds_rise)
setup (D[8] => CLK 10 posedge tch_tds_fall)
hold (D[8] => CLK 01 posedge tch_tdh_rise)
hold (D[8] => CLK 10 posedge tch_tdh_fall)
setup (D[9] => CLK 01 posedge tch_tds_rise)
setup (D[9] => CLK 10 posedge tch_tds_fall)
hold (D[9] => CLK 01 posedge tch_tdh_rise)
hold (D[9] => CLK 10 posedge tch_tdh_fall)
setup (D[10] => CLK 01 posedge tch_tds_rise)
setup (D[10] => CLK 10 posedge tch_tds_fall)
hold (D[10] => CLK 01 posedge tch_tdh_rise)
hold (D[10] => CLK 10 posedge tch_tdh_fall)
setup (D[11] => CLK 01 posedge tch_tds_rise)
setup (D[11] => CLK 10 posedge tch_tds_fall)
hold (D[11] => CLK 01 posedge tch_tdh_rise)
hold (D[11] => CLK 10 posedge tch_tdh_fall)
setup (D[12] => CLK 01 posedge tch_tds_rise)
setup (D[12] => CLK 10 posedge tch_tds_fall)
hold (D[12] => CLK 01 posedge tch_tdh_rise)
hold (D[12] => CLK 10 posedge tch_tdh_fall)
setup (D[13] => CLK 01 posedge tch_tds_rise)
setup (D[13] => CLK 10 posedge tch_tds_fall)
hold (D[13] => CLK 01 posedge tch_tdh_rise)
hold (D[13] => CLK 10 posedge tch_tdh_fall)
setup (D[14] => CLK 01 posedge tch_tds_rise)
setup (D[14] => CLK 10 posedge tch_tds_fall)
hold (D[14] => CLK 01 posedge tch_tdh_rise)
hold (D[14] => CLK 10 posedge tch_tdh_fall)
setup (D[15] => CLK 01 posedge tch_tds_rise)
setup (D[15] => CLK 10 posedge tch_tds_fall)
hold (D[15] => CLK 01 posedge tch_tdh_rise)
hold (D[15] => CLK 10 posedge tch_tdh_fall)
setup (D[16] => CLK 01 posedge tch_tds_rise)
setup (D[16] => CLK 10 posedge tch_tds_fall)
hold (D[16] => CLK 01 posedge tch_tdh_rise)
hold (D[16] => CLK 10 posedge tch_tdh_fall)
setup (D[17] => CLK 01 posedge tch_tds_rise)
setup (D[17] => CLK 10 posedge tch_tds_fall)
hold (D[17] => CLK 01 posedge tch_tdh_rise)
hold (D[17] => CLK 10 posedge tch_tdh_fall)
setup (D[18] => CLK 01 posedge tch_tds_rise)
setup (D[18] => CLK 10 posedge tch_tds_fall)
hold (D[18] => CLK 01 posedge tch_tdh_rise)
hold (D[18] => CLK 10 posedge tch_tdh_fall)
setup (D[19] => CLK 01 posedge tch_tds_rise)
setup (D[19] => CLK 10 posedge tch_tds_fall)
hold (D[19] => CLK 01 posedge tch_tdh_rise)
hold (D[19] => CLK 10 posedge tch_tdh_fall)
setup (D[20] => CLK 01 posedge tch_tds_rise)
setup (D[20] => CLK 10 posedge tch_tds_fall)
hold (D[20] => CLK 01 posedge tch_tdh_rise)
hold (D[20] => CLK 10 posedge tch_tdh_fall)
setup (D[21] => CLK 01 posedge tch_tds_rise)
setup (D[21] => CLK 10 posedge tch_tds_fall)
hold (D[21] => CLK 01 posedge tch_tdh_rise)
hold (D[21] => CLK 10 posedge tch_tdh_fall)
setup (D[22] => CLK 01 posedge tch_tds_rise)
setup (D[22] => CLK 10 posedge tch_tds_fall)
hold (D[22] => CLK 01 posedge tch_tdh_rise)
hold (D[22] => CLK 10 posedge tch_tdh_fall)
setup (D[23] => CLK 01 posedge tch_tds_rise)
setup (D[23] => CLK 10 posedge tch_tds_fall)
hold (D[23] => CLK 01 posedge tch_tdh_rise)
hold (D[23] => CLK 10 posedge tch_tdh_fall)
setup (D[24] => CLK 01 posedge tch_tds_rise)
setup (D[24] => CLK 10 posedge tch_tds_fall)
hold (D[24] => CLK 01 posedge tch_tdh_rise)
hold (D[24] => CLK 10 posedge tch_tdh_fall)
setup (D[25] => CLK 01 posedge tch_tds_rise)
setup (D[25] => CLK 10 posedge tch_tds_fall)
hold (D[25] => CLK 01 posedge tch_tdh_rise)
hold (D[25] => CLK 10 posedge tch_tdh_fall)
setup (D[26] => CLK 01 posedge tch_tds_rise)
setup (D[26] => CLK 10 posedge tch_tds_fall)
hold (D[26] => CLK 01 posedge tch_tdh_rise)
hold (D[26] => CLK 10 posedge tch_tdh_fall)
setup (D[27] => CLK 01 posedge tch_tds_rise)
setup (D[27] => CLK 10 posedge tch_tds_fall)
hold (D[27] => CLK 01 posedge tch_tdh_rise)
hold (D[27] => CLK 10 posedge tch_tdh_fall)
setup (D[28] => CLK 01 posedge tch_tds_rise)
setup (D[28] => CLK 10 posedge tch_tds_fall)
hold (D[28] => CLK 01 posedge tch_tdh_rise)
hold (D[28] => CLK 10 posedge tch_tdh_fall)
setup (D[29] => CLK 01 posedge tch_tds_rise)
setup (D[29] => CLK 10 posedge tch_tds_fall)
hold (D[29] => CLK 01 posedge tch_tdh_rise)
hold (D[29] => CLK 10 posedge tch_tdh_fall)
setup (D[30] => CLK 01 posedge tch_tds_rise)
setup (D[30] => CLK 10 posedge tch_tds_fall)
hold (D[30] => CLK 01 posedge tch_tdh_rise)
hold (D[30] => CLK 10 posedge tch_tdh_fall)
setup (D[31] => CLK 01 posedge tch_tds_rise)
setup (D[31] => CLK 10 posedge tch_tds_fall)
hold (D[31] => CLK 01 posedge tch_tdh_rise)
hold (D[31] => CLK 10 posedge tch_tdh_fall)
setup (WEN[0] => CLK 01 posedge tch_tws_rise)
setup (WEN[0] => CLK 10 posedge tch_tws_fall)
hold (WEN[0] => CLK 01 posedge tch_twh_rise)
hold (WEN[0] => CLK 10 posedge tch_twh_fall)
setup (WEN[1] => CLK 01 posedge tch_tws_rise)
setup (WEN[1] => CLK 10 posedge tch_tws_fall)
hold (WEN[1] => CLK 01 posedge tch_twh_rise)
hold (WEN[1] => CLK 10 posedge tch_twh_fall)
setup (WEN[2] => CLK 01 posedge tch_tws_rise)
setup (WEN[2] => CLK 10 posedge tch_tws_fall)
hold (WEN[2] => CLK 01 posedge tch_twh_rise)
hold (WEN[2] => CLK 10 posedge tch_twh_fall)
setup (WEN[3] => CLK 01 posedge tch_tws_rise)
setup (WEN[3] => CLK 10 posedge tch_tws_fall)
hold (WEN[3] => CLK 01 posedge tch_twh_rise)
hold (WEN[3] => CLK 10 posedge tch_twh_fall)
period (CLK 01 period_tcyc)
mpwl (CLK tpw_tckl)
mpwh (CLK tpw_tckh)
path (CLK => Q[0] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[0] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[1] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[1] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[2] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[2] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[3] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[3] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[4] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[4] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[5] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[5] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[6] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[6] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[7] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[7] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[8] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[8] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[9] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[9] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[10] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[10] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[11] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[11] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[12] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[12] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[13] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[13] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[14] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[14] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[15] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[15] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[16] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[16] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[17] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[17] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[18] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[18] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[19] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[19] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[20] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[20] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[21] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[21] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[22] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[22] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[23] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[23] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[24] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[24] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[25] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[25] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[26] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[26] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[27] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[27] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[28] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[28] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[29] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[29] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[30] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[30] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (CLK => Q[31] 01 01 delay(dly_f_tanpr) slew(sl_qr))
path (CLK => Q[31] 01 10 delay(dly_f_tanpf) slew(sl_qf))
path (OEN => Q[0] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[0] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[0] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[1] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[1] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[2] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[2] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[3] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[3] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[4] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[4] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[5] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[5] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[6] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[6] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[7] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[7] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[8] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[8] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[9] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[9] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[10] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[10] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[11] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[11] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[12] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[12] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[13] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[13] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[14] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[14] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[15] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[15] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[16] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[16] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[17] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[17] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[18] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[18] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[19] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[19] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[20] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[20] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[21] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[21] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[22] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[22] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[23] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[23] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[24] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[24] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[25] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[25] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[26] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[26] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[27] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[27] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[28] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[28] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[29] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[29] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[30] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[30] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 0z delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 z1 delay(dly_f_tl_zr) slew(sl_qr))
path (OEN => Q[31] 01 1z delay(dly_f_tl_zf) slew(sl_qf))
path (OEN => Q[31] 01 z0 delay(dly_f_tl_zf) slew(sl_qf))
)
